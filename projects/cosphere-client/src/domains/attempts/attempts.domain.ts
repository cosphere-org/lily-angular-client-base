/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * Attempts Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './attempts.models';

@Injectable()
export class AttemptsDomain {
    constructor(private client: ClientService) {}

    /**
     * List Attempts By Card
     * -------------
     *
     * List Attempts for a specific Card given by its Id.
     */
    public bulkReadAttemptsByCards(cardId: any): DataState<X.BulkReadAttemptsByCardsResponseEntity[]> {
        return this.client.getDataState<X.BulkReadAttemptsByCardsResponseEntity[]>(`/recall/attempts/by_card/${cardId}`, { responseMap: 'data', authorizationRequired: true });
    }
    
    public bulkReadAttemptsByCards2(cardId: any): Observable<X.BulkReadAttemptsByCardsResponseEntity[]> {
        return this.client.get<X.BulkReadAttemptsByCardsResponseEntity[]>(`/recall/attempts/by_card/${cardId}`, { responseMap: 'data', authorizationRequired: true });
    }

    /**
     * Create Attempt
     * -------------
     *
     * Create Attempt which is a reflection of someone's knowledge regarding a given Card.
     */
    public createAttempt(body: X.CreateAttemptBody): Observable<X.CreateAttemptResponse> {
        return this.client
            .post<X.CreateAttemptResponse>('/recall/attempts/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Update Attempt
     * -------------
     *
     * Update existing Attempt with new cells and / or style.
     */
    public updateAttempt(attemptId: any, body: X.UpdateAttemptBody): Observable<X.UpdateAttemptResponse> {
        return this.client
            .put<X.UpdateAttemptResponse>(`/recall/attempts/${attemptId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

}