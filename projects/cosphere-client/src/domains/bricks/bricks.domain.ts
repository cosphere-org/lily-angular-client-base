/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * Bricks Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './bricks.models';

@Injectable()
export class BricksDomain {
    constructor(private client: ClientService) {}

    /**
     * Bulk Read Bricks Game Attempts
     */
    public bulkReadGameattempts(gameId: any): DataState<X.BulkReadGameattemptsResponseEntity[]> {
        return this.client.getDataState<X.BulkReadGameattemptsResponseEntity[]>(`/games/${gameId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }
    
    public bulkReadGameattempts2(gameId: any): Observable<X.BulkReadGameattemptsResponseEntity[]> {
        return this.client.get<X.BulkReadGameattemptsResponseEntity[]>(`/games/${gameId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }

    /**
     * Bulk Read Game
     */
    public bulkReadGames(): DataState<X.BulkReadGamesResponseEntity[]> {
        return this.client.getDataState<X.BulkReadGamesResponseEntity[]>('/games/', { responseMap: 'data', authorizationRequired: true });
    }
    
    public bulkReadGames2(): Observable<X.BulkReadGamesResponseEntity[]> {
        return this.client.get<X.BulkReadGamesResponseEntity[]>('/games/', { responseMap: 'data', authorizationRequired: true });
    }

    /**
     * Create Game
     */
    public createGame(body: X.CreateGameBody): Observable<X.CreateGameResponse> {
        return this.client
            .post<X.CreateGameResponse>('/games/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Create Bricks Game Attempt
     */
    public createGameattempt(gameId: any, body: X.CreateGameattemptBody): Observable<X.CreateGameattemptResponse> {
        return this.client
            .post<X.CreateGameattemptResponse>(`/games/${gameId}/attempts/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Delete Game
     */
    public deleteGame(gameId: any): Observable<X.DeleteGameResponse> {
        return this.client
            .delete<X.DeleteGameResponse>(`/games/${gameId}`, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Read Game
     */
    public readGame(gameId: any): DataState<X.ReadGameResponse> {
        return this.client.getDataState<X.ReadGameResponse>(`/games/${gameId}`, { authorizationRequired: true });
    }
    
    public readGame2(gameId: any): Observable<X.ReadGameResponse> {
        return this.client.get<X.ReadGameResponse>(`/games/${gameId}`, { authorizationRequired: true });
    }

    /**
     * Update Game
     */
    public updateGame(gameId: any, body: X.UpdateGameBody): Observable<X.UpdateGameResponse> {
        return this.client
            .put<X.UpdateGameResponse>(`/games/${gameId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

}