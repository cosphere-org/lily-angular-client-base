/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * Quizzer Entities Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './quizzer.models';

@Injectable()
export class QuizzerDomain {
    constructor(private client: ClientService) {}

    /**
     * Build Read Quiz Attempts
     */
    public bulkReadQuizattempts(quizId: any): DataState<X.BulkReadQuizattemptsResponseEntity[]> {
        return this.client.getDataState<X.BulkReadQuizattemptsResponseEntity[]>(`/quizzes/${quizId}/attempts/`, { responseMap: 'quiz_attempts', authorizationRequired: true });
    }
    
    public bulkReadQuizattempts2(quizId: any): Observable<X.BulkReadQuizattemptsResponseEntity[]> {
        return this.client.get<X.BulkReadQuizattemptsResponseEntity[]>(`/quizzes/${quizId}/attempts/`, { responseMap: 'quiz_attempts', authorizationRequired: true });
    }

    /**
     * Bulk Read Quizzes
     */
    public bulkReadQuizzes(): DataState<X.BulkReadQuizzesResponseEntity[]> {
        return this.client.getDataState<X.BulkReadQuizzesResponseEntity[]>('/quizzes/', { responseMap: 'quizzes', authorizationRequired: true });
    }
    
    public bulkReadQuizzes2(): Observable<X.BulkReadQuizzesResponseEntity[]> {
        return this.client.get<X.BulkReadQuizzesResponseEntity[]>('/quizzes/', { responseMap: 'quizzes', authorizationRequired: true });
    }

    /**
     * Create Quiz
     */
    public createQuiz(body: X.CreateQuizBody): Observable<X.CreateQuizResponse> {
        return this.client
            .post<X.CreateQuizResponse>('/quizzes/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Create Quiz Attempt
     */
    public createQuizattempt(quizId: any, body: X.CreateQuizattemptBody): Observable<X.CreateQuizattemptResponse> {
        return this.client
            .post<X.CreateQuizattemptResponse>(`/quizzes/${quizId}/attempts/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Delete Quiz
     */
    public deleteQuiz(quizId: any): Observable<X.DeleteQuizResponse> {
        return this.client
            .delete<X.DeleteQuizResponse>(`/quizzes/${quizId}`, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Read Quiz
     */
    public readQuiz(quizId: any): DataState<X.ReadQuizResponse> {
        return this.client.getDataState<X.ReadQuizResponse>(`/quizzes/${quizId}`, { authorizationRequired: true });
    }
    
    public readQuiz2(quizId: any): Observable<X.ReadQuizResponse> {
        return this.client.get<X.ReadQuizResponse>(`/quizzes/${quizId}`, { authorizationRequired: true });
    }

    /**
     * Update Quiz
     */
    public updateQuiz(quizId: any, body: X.UpdateQuizBody): Observable<X.UpdateQuizResponse> {
        return this.client
            .put<X.UpdateQuizResponse>(`/quizzes/${quizId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

}