/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * MediaItems Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './mediaitems.models';

@Injectable()
export class MediaitemsDomain {
    constructor(private client: ClientService) {}

    /**
     * List MediaItems
     * -------------
     *
     * List MediaItems
     */
    public bulkReadMediaitems(params: X.BulkReadMediaitemsQuery): DataState<X.BulkReadMediaitemsResponseEntity[]> {
        return this.client.getDataState<X.BulkReadMediaitemsResponseEntity[]>('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });
    }
    
    public bulkReadMediaitems2(params: X.BulkReadMediaitemsQuery): Observable<X.BulkReadMediaitemsResponseEntity[]> {
        return this.client.get<X.BulkReadMediaitemsResponseEntity[]>('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });
    }

    /**
     * Remove MediaItem
     * -------------
     *
     * Remove MediaItem instance.
     */
    public deleteMediaitem(mediaitemId: any, params: X.DeleteMediaitemQuery): Observable<X.DeleteMediaitemResponse> {
        return this.client
            .delete<X.DeleteMediaitemResponse>(`/mediaitems/${mediaitemId}`, { params, authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Read MediaItem
     * -------------
     *
     * Read MediaItem
     */
    public readMediaitem(mediaitemId: any): DataState<X.ReadMediaitemResponse> {
        return this.client.getDataState<X.ReadMediaitemResponse>(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });
    }
    
    public readMediaitem2(mediaitemId: any): Observable<X.ReadMediaitemResponse> {
        return this.client.get<X.ReadMediaitemResponse>(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });
    }

    /**
     * Read By Process Id
     * -------------
     *
     * Read MediaItem by Process Id
     */
    public readMediaitemByProcessId(): DataState<X.ReadMediaitemByProcessIdResponse> {
        return this.client.getDataState<X.ReadMediaitemByProcessIdResponse>('/mediaitems/by_process/(?P<process_id>[\w+\=]+)', { authorizationRequired: true });
    }
    
    public readMediaitemByProcessId2(): Observable<X.ReadMediaitemByProcessIdResponse> {
        return this.client.get<X.ReadMediaitemByProcessIdResponse>('/mediaitems/by_process/(?P<process_id>[\w+\=]+)', { authorizationRequired: true });
    }

    /**
     * Read or Create MediaItem
     * -------------
     *
     * Read or Create MediaItem instance.
     */
    public readOrCreateMediaitem(body: X.ReadOrCreateMediaitemBody): Observable<X.ReadOrCreateMediaitemResponse> {
        return this.client
            .post<X.ReadOrCreateMediaitemResponse>('/mediaitems/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Update MediaItem
     * -------------
     *
     * Update MediaItem instance.
     */
    public updateMediaitem(mediaitemId: any, body: X.UpdateMediaitemBody): Observable<X.UpdateMediaitemResponse> {
        return this.client
            .put<X.UpdateMediaitemResponse>(`/mediaitems/${mediaitemId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Update MediaItem Representation
     * -------------
     *
     * Update given MediaItem with only the fields which are decided externally (using external services). Fields like: - `web_representations` - `thumbnail_uri` - `meta` - `text` All of those fields are computed in smarter way in order to make the MediaItem way better in a semantic sense. Those fields are perceived as the `representation` of a given MediaItem since they contains information about how to display a given MediaItem, how to understand it etc. It goes beyond the simple abstract data oriented representation (uri, extension etc.).
     */
    public updateMediaitemRepresentation(mediaitemId: any, body: X.UpdateMediaitemRepresentationBody): Observable<X.UpdateMediaitemRepresentationResponse> {
        return this.client
            .put<X.UpdateMediaitemRepresentationResponse>(`/mediaitems/${mediaitemId}/representation/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

}