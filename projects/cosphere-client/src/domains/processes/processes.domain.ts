/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * Processes Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './processes.models';

@Injectable()
export class ProcessesDomain {
    constructor(private client: ClientService) {}

    /**
     * Create Deletion Process
     */
    public createDeletionProcess(body: X.CreateDeletionProcessBody): Observable<X.CreateDeletionProcessResponse> {
        return this.client
            .post<X.CreateDeletionProcessResponse>('/mediafiles/processes/deletions/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Create Download Process
     */
    public createDownloadProcess(body: X.CreateDownloadProcessBody): Observable<X.CreateDownloadProcessResponse> {
        return this.client
            .post<X.CreateDownloadProcessResponse>('/mediafiles/processes/downloads/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Create Media Lock
     */
    public createMediaLock(body: X.CreateMediaLockBody): Observable<X.CreateMediaLockResponse> {
        return this.client
            .post<X.CreateMediaLockResponse>('/mediafiles/locks/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Create Upload Process
     */
    public createUploadProcess(body: X.CreateUploadProcessBody): Observable<X.CreateUploadProcessResponse> {
        return this.client
            .post<X.CreateUploadProcessResponse>('/mediafiles/processes/uploads/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Read invariants for a given uri
     */
    public readInvariants(params: X.ReadInvariantsQuery): DataState<X.ReadInvariantsResponse> {
        return this.client.getDataState<X.ReadInvariantsResponse>('/mediafiles/invariants/', { params, authorizationRequired: true });
    }
    
    public readInvariants2(params: X.ReadInvariantsQuery): Observable<X.ReadInvariantsResponse> {
        return this.client.get<X.ReadInvariantsResponse>('/mediafiles/invariants/', { params, authorizationRequired: true });
    }

    /**
     * Create Media Lock
     */
    public readProcessState(params: X.ReadProcessStateQuery): DataState<X.ReadProcessStateResponse> {
        return this.client.getDataState<X.ReadProcessStateResponse>('/mediafiles/processes/', { params, authorizationRequired: true });
    }
    
    public readProcessState2(params: X.ReadProcessStateQuery): Observable<X.ReadProcessStateResponse> {
        return this.client.get<X.ReadProcessStateResponse>('/mediafiles/processes/', { params, authorizationRequired: true });
    }

    /**
     * Sign Process dedicated to upload and conversion of media file
     */
    public signProcess(params: X.SignProcessQuery): DataState<X.SignProcessResponse> {
        return this.client.getDataState<X.SignProcessResponse>('/mediafiles/processes/sign/', { params, authorizationRequired: true });
    }
    
    public signProcess2(params: X.SignProcessQuery): Observable<X.SignProcessResponse> {
        return this.client.get<X.SignProcessResponse>('/mediafiles/processes/sign/', { params, authorizationRequired: true });
    }

    /**
     * Watch conversion status
     * -------------
     *
     * Endpoint called by the external conversion service.
     */
    public watchConversionStatus(processId: any, waiterId: any, params: X.WatchConversionStatusQuery): DataState<X.WatchConversionStatusResponse> {
        return this.client.getDataState<X.WatchConversionStatusResponse>(`/mediafiles/convert_processes/${processId}/${waiterId}`, { params, authorizationRequired: false });
    }
    
    public watchConversionStatus2(processId: any, waiterId: any, params: X.WatchConversionStatusQuery): Observable<X.WatchConversionStatusResponse> {
        return this.client.get<X.WatchConversionStatusResponse>(`/mediafiles/convert_processes/${processId}/${waiterId}`, { params, authorizationRequired: false });
    }

}