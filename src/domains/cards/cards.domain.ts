/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */

/**
 * Cards Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as _ from 'underscore';

import { ClientService } from '../../services/client.service';
import { DataState } from '../../services/client.interface';

import * as X from './cards.models';

@Injectable()
export class CardsDomain {
    constructor(private client: ClientService) {}

    /**
     * Remove Card
     * -------------
     *
     * Remove list of Cards specified by their ids.
     */
    public bulkDeleteCards(params: X.BulkDeleteCardsQuery): Observable<X.BulkDeleteCardsResponse> {
        return this.client
            .delete<X.BulkDeleteCardsResponse>('/cards/', { params, authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Bulk Read Multiple Cards
     * -------------
     *
     * List subset of Cards depending on various filtering flags.
     */
    public bulkReadCards(params: X.BulkReadCardsQuery): DataState<X.BulkReadCardsResponseEntity[]> {
        return this.client.getDataState<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });
    }
    
    public bulkReadCards2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]> {
        return this.client.get<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });
    }
    
    public bulkReadGeometriesOnly2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]> {
        return this.client.get<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });
    }

    /**
     * Creating a single Card
     * -------------
     *
     * Enables one to create a single Card instance.
     */
    public createCard(body: X.CreateCardBody): Observable<X.CreateCardResponse> {
        return this.client
            .post<X.CreateCardResponse>('/cards/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

    /**
     * Read Card by Id
     * -------------
     *
     * Read Card by `id`.
     */
    public readCard(cardId: any): DataState<X.ReadCardResponse> {
        return this.client.getDataState<X.ReadCardResponse>(`/cards/${cardId}`, { authorizationRequired: true });
    }
    
    public readCard2(cardId: any, params?: any): Observable<X.ReadCardResponse> {
        return this.client.get<X.ReadCardResponse>(`/cards/${cardId}`, { params, authorizationRequired: true });
    }

    /**
     * Creating a single Card
     * -------------
     *
     * Enables one to create a single Card instance.
     */
    public updateCard(cardId: any, body: X.UpdateCardBody): Observable<X.UpdateCardResponse> {
        return this.client
            .put<X.UpdateCardResponse>(`/cards/${cardId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }

}