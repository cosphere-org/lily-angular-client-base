/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Facade API Service for all domains
 */
import { Injectable, Injector } from '@angular/core';
import * as X from '../domains/index';
var APIService = /** @class */ (function () {
    function APIService(injector) {
        this.injector = injector;
    }
    Object.defineProperty(APIService.prototype, "account_settingsDomain", {
        get: function () {
            if (!this._account_settingsDomain) {
                this._account_settingsDomain = this.injector.get(X.AccountSettingsDomain);
            }
            return this._account_settingsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.readAccountsetting = function () {
        return this.account_settingsDomain.readAccountsetting();
    };
    APIService.prototype.readAccountsetting2 = function () {
        return this.account_settingsDomain.readAccountsetting2();
    };
    APIService.prototype.updateAccountsetting = function (body) {
        return this.account_settingsDomain.updateAccountsetting(body);
    };
    Object.defineProperty(APIService.prototype, "accountsDomain", {
        get: function () {
            if (!this._accountsDomain) {
                this._accountsDomain = this.injector.get(X.AccountsDomain);
            }
            return this._accountsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.activateAccount = function (body) {
        return this.accountsDomain.activateAccount(body);
    };
    APIService.prototype.bulkReadAccounts = function (params) {
        return this.accountsDomain.bulkReadAccounts(params);
    };
    APIService.prototype.bulkReadAccounts2 = function (params) {
        return this.accountsDomain.bulkReadAccounts2(params);
    };
    APIService.prototype.changePassword = function (body) {
        return this.accountsDomain.changePassword(body);
    };
    APIService.prototype.createAccount = function (body) {
        return this.accountsDomain.createAccount(body);
    };
    APIService.prototype.readAccount = function () {
        return this.accountsDomain.readAccount();
    };
    APIService.prototype.readAccount2 = function () {
        return this.accountsDomain.readAccount2();
    };
    APIService.prototype.resetPassword = function (body) {
        return this.accountsDomain.resetPassword(body);
    };
    APIService.prototype.sendAccountActivationEmail = function (body) {
        return this.accountsDomain.sendAccountActivationEmail(body);
    };
    APIService.prototype.sendResetPasswordEmail = function (body) {
        return this.accountsDomain.sendResetPasswordEmail(body);
    };
    APIService.prototype.updateAccount = function (body) {
        return this.accountsDomain.updateAccount(body);
    };
    Object.defineProperty(APIService.prototype, "attempt_statsDomain", {
        get: function () {
            if (!this._attempt_statsDomain) {
                this._attempt_statsDomain = this.injector.get(X.AttemptStatsDomain);
            }
            return this._attempt_statsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadAttemptstats = function (params) {
        return this.attempt_statsDomain.bulkReadAttemptstats(params);
    };
    APIService.prototype.bulkReadAttemptstats2 = function (params) {
        return this.attempt_statsDomain.bulkReadAttemptstats2(params);
    };
    APIService.prototype.createAttemptstat = function (body) {
        return this.attempt_statsDomain.createAttemptstat(body);
    };
    APIService.prototype.createExternalAttemptStat = function (body) {
        return this.attempt_statsDomain.createExternalAttemptStat(body);
    };
    Object.defineProperty(APIService.prototype, "attemptsDomain", {
        get: function () {
            if (!this._attemptsDomain) {
                this._attemptsDomain = this.injector.get(X.AttemptsDomain);
            }
            return this._attemptsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadAttemptsByCards = function (cardId) {
        return this.attemptsDomain.bulkReadAttemptsByCards(cardId);
    };
    APIService.prototype.bulkReadAttemptsByCards2 = function (cardId) {
        return this.attemptsDomain.bulkReadAttemptsByCards2(cardId);
    };
    APIService.prototype.createAttempt = function (body) {
        return this.attemptsDomain.createAttempt(body);
    };
    APIService.prototype.updateAttempt = function (attemptId, body) {
        return this.attemptsDomain.updateAttempt(attemptId, body);
    };
    Object.defineProperty(APIService.prototype, "auth_tokensDomain", {
        get: function () {
            if (!this._auth_tokensDomain) {
                this._auth_tokensDomain = this.injector.get(X.AuthTokensDomain);
            }
            return this._auth_tokensDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.authorizeAuthToken = function () {
        return this.auth_tokensDomain.authorizeAuthToken();
    };
    APIService.prototype.createAuthToken = function (body) {
        return this.auth_tokensDomain.createAuthToken(body);
    };
    APIService.prototype.createFacebookBasedAuthToken = function (body) {
        return this.auth_tokensDomain.createFacebookBasedAuthToken(body);
    };
    APIService.prototype.createFacebookBasedMobileAuthToken = function (body) {
        return this.auth_tokensDomain.createFacebookBasedMobileAuthToken(body);
    };
    APIService.prototype.createGoogleBasedAuthToken = function (body) {
        return this.auth_tokensDomain.createGoogleBasedAuthToken(body);
    };
    APIService.prototype.createGoogleBasedMobileAuthToken = function (body) {
        return this.auth_tokensDomain.createGoogleBasedMobileAuthToken(body);
    };
    APIService.prototype.updateAuthToken = function () {
        return this.auth_tokensDomain.updateAuthToken();
    };
    Object.defineProperty(APIService.prototype, "bricksDomain", {
        get: function () {
            if (!this._bricksDomain) {
                this._bricksDomain = this.injector.get(X.BricksDomain);
            }
            return this._bricksDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadGameattempts = function (gameId) {
        return this.bricksDomain.bulkReadGameattempts(gameId);
    };
    APIService.prototype.bulkReadGameattempts2 = function (gameId) {
        return this.bricksDomain.bulkReadGameattempts2(gameId);
    };
    APIService.prototype.bulkReadGames = function () {
        return this.bricksDomain.bulkReadGames();
    };
    APIService.prototype.bulkReadGames2 = function () {
        return this.bricksDomain.bulkReadGames2();
    };
    APIService.prototype.createGame = function (body) {
        return this.bricksDomain.createGame(body);
    };
    APIService.prototype.createGameattempt = function (gameId, body) {
        return this.bricksDomain.createGameattempt(gameId, body);
    };
    APIService.prototype.deleteGame = function (gameId) {
        return this.bricksDomain.deleteGame(gameId);
    };
    APIService.prototype.readGame = function (gameId) {
        return this.bricksDomain.readGame(gameId);
    };
    APIService.prototype.readGame2 = function (gameId) {
        return this.bricksDomain.readGame2(gameId);
    };
    APIService.prototype.updateGame = function (gameId, body) {
        return this.bricksDomain.updateGame(gameId, body);
    };
    Object.defineProperty(APIService.prototype, "cardsDomain", {
        get: function () {
            if (!this._cardsDomain) {
                this._cardsDomain = this.injector.get(X.CardsDomain);
            }
            return this._cardsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkDeleteCards = function (params) {
        return this.cardsDomain.bulkDeleteCards(params);
    };
    APIService.prototype.bulkReadCards = function (params) {
        return this.cardsDomain.bulkReadCards(params);
    };
    APIService.prototype.bulkReadCards2 = function (params) {
        return this.cardsDomain.bulkReadCards2(params);
    };
    APIService.prototype.createCard = function (body) {
        return this.cardsDomain.createCard(body);
    };
    APIService.prototype.readCard = function (cardId) {
        return this.cardsDomain.readCard(cardId);
    };
    APIService.prototype.readCard2 = function (cardId) {
        return this.cardsDomain.readCard2(cardId);
    };
    APIService.prototype.updateCard = function (cardId, body) {
        return this.cardsDomain.updateCard(cardId, body);
    };
    Object.defineProperty(APIService.prototype, "categoriesDomain", {
        get: function () {
            if (!this._categoriesDomain) {
                this._categoriesDomain = this.injector.get(X.CategoriesDomain);
            }
            return this._categoriesDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadCategories = function () {
        return this.categoriesDomain.bulkReadCategories();
    };
    APIService.prototype.bulkReadCategories2 = function () {
        return this.categoriesDomain.bulkReadCategories2();
    };
    Object.defineProperty(APIService.prototype, "contactsDomain", {
        get: function () {
            if (!this._contactsDomain) {
                this._contactsDomain = this.injector.get(X.ContactsDomain);
            }
            return this._contactsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.createAnonymousContactAttempt = function (body) {
        return this.contactsDomain.createAnonymousContactAttempt(body);
    };
    APIService.prototype.sendAuthenticatedContactMessage = function (body) {
        return this.contactsDomain.sendAuthenticatedContactMessage(body);
    };
    APIService.prototype.verifyAnonymousContactAttempt = function (body) {
        return this.contactsDomain.verifyAnonymousContactAttempt(body);
    };
    Object.defineProperty(APIService.prototype, "donationsDomain", {
        get: function () {
            if (!this._donationsDomain) {
                this._donationsDomain = this.injector.get(X.DonationsDomain);
            }
            return this._donationsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.checkIfCanAttemptDonation = function (params) {
        return this.donationsDomain.checkIfCanAttemptDonation(params);
    };
    APIService.prototype.checkIfCanAttemptDonation2 = function (params) {
        return this.donationsDomain.checkIfCanAttemptDonation2(params);
    };
    APIService.prototype.createAnonymousDonation = function (body) {
        return this.donationsDomain.createAnonymousDonation(body);
    };
    APIService.prototype.createDonation = function (body) {
        return this.donationsDomain.createDonation(body);
    };
    APIService.prototype.createDonationattempt = function (body) {
        return this.donationsDomain.createDonationattempt(body);
    };
    Object.defineProperty(APIService.prototype, "external_appsDomain", {
        get: function () {
            if (!this._external_appsDomain) {
                this._external_appsDomain = this.injector.get(X.ExternalAppsDomain);
            }
            return this._external_appsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.authorizeExternalAppAuthToken = function () {
        return this.external_appsDomain.authorizeExternalAppAuthToken();
    };
    APIService.prototype.createExternalAppAuthToken = function (body) {
        return this.external_appsDomain.createExternalAppAuthToken(body);
    };
    APIService.prototype.readExternalappconf = function (params) {
        return this.external_appsDomain.readExternalappconf(params);
    };
    APIService.prototype.readExternalappconf2 = function (params) {
        return this.external_appsDomain.readExternalappconf2(params);
    };
    Object.defineProperty(APIService.prototype, "focus_recordsDomain", {
        get: function () {
            if (!this._focus_recordsDomain) {
                this._focus_recordsDomain = this.injector.get(X.FocusRecordsDomain);
            }
            return this._focus_recordsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.createFocusrecord = function (body) {
        return this.focus_recordsDomain.createFocusrecord(body);
    };
    APIService.prototype.readFocusRecordSummary = function () {
        return this.focus_recordsDomain.readFocusRecordSummary();
    };
    APIService.prototype.readFocusRecordSummary2 = function () {
        return this.focus_recordsDomain.readFocusRecordSummary2();
    };
    Object.defineProperty(APIService.prototype, "fragment_hashtagsDomain", {
        get: function () {
            if (!this._fragment_hashtagsDomain) {
                this._fragment_hashtagsDomain = this.injector.get(X.FragmentHashtagsDomain);
            }
            return this._fragment_hashtagsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadFragmentHashtags = function (params) {
        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags(params);
    };
    APIService.prototype.bulkReadFragmentHashtags2 = function (params) {
        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags2(params);
    };
    APIService.prototype.bulkReadPublishedFragmentHashtags = function (params) {
        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags(params);
    };
    APIService.prototype.bulkReadPublishedFragmentHashtags2 = function (params) {
        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags2(params);
    };
    Object.defineProperty(APIService.prototype, "fragment_wordsDomain", {
        get: function () {
            if (!this._fragment_wordsDomain) {
                this._fragment_wordsDomain = this.injector.get(X.FragmentWordsDomain);
            }
            return this._fragment_wordsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadFragmentWords = function (params) {
        return this.fragment_wordsDomain.bulkReadFragmentWords(params);
    };
    APIService.prototype.bulkReadFragmentWords2 = function (params) {
        return this.fragment_wordsDomain.bulkReadFragmentWords2(params);
    };
    APIService.prototype.bulkReadPublishedFragmentWords = function (params) {
        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords(params);
    };
    APIService.prototype.bulkReadPublishedFragmentWords2 = function (params) {
        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords2(params);
    };
    Object.defineProperty(APIService.prototype, "fragmentsDomain", {
        get: function () {
            if (!this._fragmentsDomain) {
                this._fragmentsDomain = this.injector.get(X.FragmentsDomain);
            }
            return this._fragmentsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadFragments = function (params) {
        return this.fragmentsDomain.bulkReadFragments(params);
    };
    APIService.prototype.bulkReadFragments2 = function (params) {
        return this.fragmentsDomain.bulkReadFragments2(params);
    };
    APIService.prototype.bulkReadPublishedFragments = function (params) {
        return this.fragmentsDomain.bulkReadPublishedFragments(params);
    };
    APIService.prototype.bulkReadPublishedFragments2 = function (params) {
        return this.fragmentsDomain.bulkReadPublishedFragments2(params);
    };
    APIService.prototype.createFragment = function () {
        return this.fragmentsDomain.createFragment();
    };
    APIService.prototype.deleteFragment = function (fragmentId) {
        return this.fragmentsDomain.deleteFragment(fragmentId);
    };
    APIService.prototype.mergeFragment = function (fragmentId) {
        return this.fragmentsDomain.mergeFragment(fragmentId);
    };
    APIService.prototype.publishFragment = function (fragmentId) {
        return this.fragmentsDomain.publishFragment(fragmentId);
    };
    APIService.prototype.readFragment = function (fragmentId) {
        return this.fragmentsDomain.readFragment(fragmentId);
    };
    APIService.prototype.readFragment2 = function (fragmentId) {
        return this.fragmentsDomain.readFragment2(fragmentId);
    };
    APIService.prototype.readFragmentDiff = function (fragmentId) {
        return this.fragmentsDomain.readFragmentDiff(fragmentId);
    };
    APIService.prototype.readFragmentDiff2 = function (fragmentId) {
        return this.fragmentsDomain.readFragmentDiff2(fragmentId);
    };
    APIService.prototype.readFragmentSample = function (fragmentId) {
        return this.fragmentsDomain.readFragmentSample(fragmentId);
    };
    APIService.prototype.readFragmentSample2 = function (fragmentId) {
        return this.fragmentsDomain.readFragmentSample2(fragmentId);
    };
    APIService.prototype.updateFragment = function (fragmentId, body) {
        return this.fragmentsDomain.updateFragment(fragmentId, body);
    };
    Object.defineProperty(APIService.prototype, "geometriesDomain", {
        get: function () {
            if (!this._geometriesDomain) {
                this._geometriesDomain = this.injector.get(X.GeometriesDomain);
            }
            return this._geometriesDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadGeometries = function (params) {
        return this.geometriesDomain.bulkReadGeometries(params);
    };
    APIService.prototype.bulkReadGeometries2 = function (params) {
        return this.geometriesDomain.bulkReadGeometries2(params);
    };
    APIService.prototype.bulkUpdateGeometries = function (body) {
        return this.geometriesDomain.bulkUpdateGeometries(body);
    };
    APIService.prototype.readGeometryByCard = function (cardId) {
        return this.geometriesDomain.readGeometryByCard(cardId);
    };
    APIService.prototype.readGeometryByCard2 = function (cardId) {
        return this.geometriesDomain.readGeometryByCard2(cardId);
    };
    APIService.prototype.readGraph = function (params) {
        return this.geometriesDomain.readGraph(params);
    };
    APIService.prototype.readGraph2 = function (params) {
        return this.geometriesDomain.readGraph2(params);
    };
    Object.defineProperty(APIService.prototype, "gossipDomain", {
        get: function () {
            if (!this._gossipDomain) {
                this._gossipDomain = this.injector.get(X.GossipDomain);
            }
            return this._gossipDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadSpeechLanguages = function () {
        return this.gossipDomain.bulkReadSpeechLanguages();
    };
    APIService.prototype.bulkReadSpeechLanguages2 = function () {
        return this.gossipDomain.bulkReadSpeechLanguages2();
    };
    APIService.prototype.bulkReadTextLanguages = function () {
        return this.gossipDomain.bulkReadTextLanguages();
    };
    APIService.prototype.bulkReadTextLanguages2 = function () {
        return this.gossipDomain.bulkReadTextLanguages2();
    };
    APIService.prototype.detectSpeechLanguages = function (body) {
        return this.gossipDomain.detectSpeechLanguages(body);
    };
    APIService.prototype.detectTextLanguages = function (body) {
        return this.gossipDomain.detectTextLanguages(body);
    };
    Object.defineProperty(APIService.prototype, "hashtagsDomain", {
        get: function () {
            if (!this._hashtagsDomain) {
                this._hashtagsDomain = this.injector.get(X.HashtagsDomain);
            }
            return this._hashtagsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadHashtags = function (params) {
        return this.hashtagsDomain.bulkReadHashtags(params);
    };
    APIService.prototype.bulkReadHashtags2 = function (params) {
        return this.hashtagsDomain.bulkReadHashtags2(params);
    };
    APIService.prototype.createHashtag = function (body) {
        return this.hashtagsDomain.createHashtag(body);
    };
    APIService.prototype.deleteHashtag = function (hashtagId, params) {
        return this.hashtagsDomain.deleteHashtag(hashtagId, params);
    };
    APIService.prototype.readHashtagsToc = function (params) {
        return this.hashtagsDomain.readHashtagsToc(params);
    };
    APIService.prototype.readHashtagsToc2 = function (params) {
        return this.hashtagsDomain.readHashtagsToc2(params);
    };
    APIService.prototype.updateHashtag = function (hashtagId, body) {
        return this.hashtagsDomain.updateHashtag(hashtagId, body);
    };
    Object.defineProperty(APIService.prototype, "invoicesDomain", {
        get: function () {
            if (!this._invoicesDomain) {
                this._invoicesDomain = this.injector.get(X.InvoicesDomain);
            }
            return this._invoicesDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadInvoices = function () {
        return this.invoicesDomain.bulkReadInvoices();
    };
    APIService.prototype.bulkReadInvoices2 = function () {
        return this.invoicesDomain.bulkReadInvoices2();
    };
    APIService.prototype.calculateDebt = function () {
        return this.invoicesDomain.calculateDebt();
    };
    APIService.prototype.calculateDebt2 = function () {
        return this.invoicesDomain.calculateDebt2();
    };
    Object.defineProperty(APIService.prototype, "linksDomain", {
        get: function () {
            if (!this._linksDomain) {
                this._linksDomain = this.injector.get(X.LinksDomain);
            }
            return this._linksDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.deleteLink = function (fromCardId, toCardId) {
        return this.linksDomain.deleteLink(fromCardId, toCardId);
    };
    APIService.prototype.readOrCreateLink = function (body) {
        return this.linksDomain.readOrCreateLink(body);
    };
    Object.defineProperty(APIService.prototype, "mediaitemsDomain", {
        get: function () {
            if (!this._mediaitemsDomain) {
                this._mediaitemsDomain = this.injector.get(X.MediaitemsDomain);
            }
            return this._mediaitemsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadMediaitems = function (params) {
        return this.mediaitemsDomain.bulkReadMediaitems(params);
    };
    APIService.prototype.bulkReadMediaitems2 = function (params) {
        return this.mediaitemsDomain.bulkReadMediaitems2(params);
    };
    APIService.prototype.deleteMediaitem = function (mediaitemId, params) {
        return this.mediaitemsDomain.deleteMediaitem(mediaitemId, params);
    };
    APIService.prototype.readMediaitem = function (mediaitemId) {
        return this.mediaitemsDomain.readMediaitem(mediaitemId);
    };
    APIService.prototype.readMediaitem2 = function (mediaitemId) {
        return this.mediaitemsDomain.readMediaitem2(mediaitemId);
    };
    APIService.prototype.readMediaitemByProcessId = function () {
        return this.mediaitemsDomain.readMediaitemByProcessId();
    };
    APIService.prototype.readMediaitemByProcessId2 = function () {
        return this.mediaitemsDomain.readMediaitemByProcessId2();
    };
    APIService.prototype.readOrCreateMediaitem = function (body) {
        return this.mediaitemsDomain.readOrCreateMediaitem(body);
    };
    APIService.prototype.updateMediaitem = function (mediaitemId, body) {
        return this.mediaitemsDomain.updateMediaitem(mediaitemId, body);
    };
    APIService.prototype.updateMediaitemRepresentation = function (mediaitemId, body) {
        return this.mediaitemsDomain.updateMediaitemRepresentation(mediaitemId, body);
    };
    Object.defineProperty(APIService.prototype, "notificationsDomain", {
        get: function () {
            if (!this._notificationsDomain) {
                this._notificationsDomain = this.injector.get(X.NotificationsDomain);
            }
            return this._notificationsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.acknowledgeNotification = function (notificationId) {
        return this.notificationsDomain.acknowledgeNotification(notificationId);
    };
    APIService.prototype.bulkReadNotifications = function (params) {
        return this.notificationsDomain.bulkReadNotifications(params);
    };
    APIService.prototype.bulkReadNotifications2 = function (params) {
        return this.notificationsDomain.bulkReadNotifications2(params);
    };
    Object.defineProperty(APIService.prototype, "nounsDomain", {
        get: function () {
            if (!this._nounsDomain) {
                this._nounsDomain = this.injector.get(X.NounsDomain);
            }
            return this._nounsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadIcons = function (params) {
        return this.nounsDomain.bulkReadIcons(params);
    };
    APIService.prototype.bulkReadIcons2 = function (params) {
        return this.nounsDomain.bulkReadIcons2(params);
    };
    Object.defineProperty(APIService.prototype, "pathsDomain", {
        get: function () {
            if (!this._pathsDomain) {
                this._pathsDomain = this.injector.get(X.PathsDomain);
            }
            return this._pathsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkDeletePaths = function (params) {
        return this.pathsDomain.bulkDeletePaths(params);
    };
    APIService.prototype.bulkReadPaths = function (params) {
        return this.pathsDomain.bulkReadPaths(params);
    };
    APIService.prototype.bulkReadPaths2 = function (params) {
        return this.pathsDomain.bulkReadPaths2(params);
    };
    APIService.prototype.createPath = function (body) {
        return this.pathsDomain.createPath(body);
    };
    APIService.prototype.readPath = function (pathId) {
        return this.pathsDomain.readPath(pathId);
    };
    APIService.prototype.readPath2 = function (pathId) {
        return this.pathsDomain.readPath2(pathId);
    };
    APIService.prototype.updatePath = function (pathId, body) {
        return this.pathsDomain.updatePath(pathId, body);
    };
    Object.defineProperty(APIService.prototype, "payment_cardsDomain", {
        get: function () {
            if (!this._payment_cardsDomain) {
                this._payment_cardsDomain = this.injector.get(X.PaymentCardsDomain);
            }
            return this._payment_cardsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.asDefaultMarkPaymentcard = function (paymentCardId) {
        return this.payment_cardsDomain.asDefaultMarkPaymentcard(paymentCardId);
    };
    APIService.prototype.bulkReadPaymentcards = function () {
        return this.payment_cardsDomain.bulkReadPaymentcards();
    };
    APIService.prototype.bulkReadPaymentcards2 = function () {
        return this.payment_cardsDomain.bulkReadPaymentcards2();
    };
    APIService.prototype.createPaymentcard = function (body) {
        return this.payment_cardsDomain.createPaymentcard(body);
    };
    APIService.prototype.deletePaymentcard = function (paymentCardId) {
        return this.payment_cardsDomain.deletePaymentcard(paymentCardId);
    };
    APIService.prototype.payWithDefaultPaymentCard = function (body) {
        return this.payment_cardsDomain.payWithDefaultPaymentCard(body);
    };
    APIService.prototype.renderPaymentCardWidget = function () {
        return this.payment_cardsDomain.renderPaymentCardWidget();
    };
    APIService.prototype.renderPaymentCardWidget2 = function () {
        return this.payment_cardsDomain.renderPaymentCardWidget2();
    };
    Object.defineProperty(APIService.prototype, "paymentsDomain", {
        get: function () {
            if (!this._paymentsDomain) {
                this._paymentsDomain = this.injector.get(X.PaymentsDomain);
            }
            return this._paymentsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.updatePaymentStatus = function (body) {
        return this.paymentsDomain.updatePaymentStatus(body);
    };
    Object.defineProperty(APIService.prototype, "processesDomain", {
        get: function () {
            if (!this._processesDomain) {
                this._processesDomain = this.injector.get(X.ProcessesDomain);
            }
            return this._processesDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.createDeletionProcess = function (body) {
        return this.processesDomain.createDeletionProcess(body);
    };
    APIService.prototype.createDownloadProcess = function (body) {
        return this.processesDomain.createDownloadProcess(body);
    };
    APIService.prototype.createMediaLock = function (body) {
        return this.processesDomain.createMediaLock(body);
    };
    APIService.prototype.createUploadProcess = function (body) {
        return this.processesDomain.createUploadProcess(body);
    };
    APIService.prototype.readInvariants = function (params) {
        return this.processesDomain.readInvariants(params);
    };
    APIService.prototype.readInvariants2 = function (params) {
        return this.processesDomain.readInvariants2(params);
    };
    APIService.prototype.readProcessState = function (params) {
        return this.processesDomain.readProcessState(params);
    };
    APIService.prototype.readProcessState2 = function (params) {
        return this.processesDomain.readProcessState2(params);
    };
    APIService.prototype.signProcess = function (params) {
        return this.processesDomain.signProcess(params);
    };
    APIService.prototype.signProcess2 = function (params) {
        return this.processesDomain.signProcess2(params);
    };
    APIService.prototype.watchConversionStatus = function (waiterId, params) {
        return this.processesDomain.watchConversionStatus(waiterId, params);
    };
    APIService.prototype.watchConversionStatus2 = function (waiterId, params) {
        return this.processesDomain.watchConversionStatus2(waiterId, params);
    };
    Object.defineProperty(APIService.prototype, "quizzerDomain", {
        get: function () {
            if (!this._quizzerDomain) {
                this._quizzerDomain = this.injector.get(X.QuizzerDomain);
            }
            return this._quizzerDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadQuizattempts = function (quizId) {
        return this.quizzerDomain.bulkReadQuizattempts(quizId);
    };
    APIService.prototype.bulkReadQuizattempts2 = function (quizId) {
        return this.quizzerDomain.bulkReadQuizattempts2(quizId);
    };
    APIService.prototype.bulkReadQuizzes = function () {
        return this.quizzerDomain.bulkReadQuizzes();
    };
    APIService.prototype.bulkReadQuizzes2 = function () {
        return this.quizzerDomain.bulkReadQuizzes2();
    };
    APIService.prototype.createQuiz = function (body) {
        return this.quizzerDomain.createQuiz(body);
    };
    APIService.prototype.createQuizattempt = function (quizId, body) {
        return this.quizzerDomain.createQuizattempt(quizId, body);
    };
    APIService.prototype.deleteQuiz = function (quizId) {
        return this.quizzerDomain.deleteQuiz(quizId);
    };
    APIService.prototype.readQuiz = function (quizId) {
        return this.quizzerDomain.readQuiz(quizId);
    };
    APIService.prototype.readQuiz2 = function (quizId) {
        return this.quizzerDomain.readQuiz2(quizId);
    };
    APIService.prototype.updateQuiz = function (quizId, body) {
        return this.quizzerDomain.updateQuiz(quizId, body);
    };
    Object.defineProperty(APIService.prototype, "recallDomain", {
        get: function () {
            if (!this._recallDomain) {
                this._recallDomain = this.injector.get(X.RecallDomain);
            }
            return this._recallDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.createRecallSession = function (body) {
        return this.recallDomain.createRecallSession(body);
    };
    APIService.prototype.readRecallSummary = function () {
        return this.recallDomain.readRecallSummary();
    };
    APIService.prototype.readRecallSummary2 = function () {
        return this.recallDomain.readRecallSummary2();
    };
    Object.defineProperty(APIService.prototype, "subscriptionsDomain", {
        get: function () {
            if (!this._subscriptionsDomain) {
                this._subscriptionsDomain = this.injector.get(X.SubscriptionsDomain);
            }
            return this._subscriptionsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.changeSubscription = function (body) {
        return this.subscriptionsDomain.changeSubscription(body);
    };
    Object.defineProperty(APIService.prototype, "tasksDomain", {
        get: function () {
            if (!this._tasksDomain) {
                this._tasksDomain = this.injector.get(X.TasksDomain);
            }
            return this._tasksDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadTasks = function (params) {
        return this.tasksDomain.bulkReadTasks(params);
    };
    APIService.prototype.bulkReadTasks2 = function (params) {
        return this.tasksDomain.bulkReadTasks2(params);
    };
    APIService.prototype.bulkReadTaskBins = function (params) {
        return this.tasksDomain.bulkReadTaskBins(params);
    };
    APIService.prototype.bulkReadTaskBins2 = function (params) {
        return this.tasksDomain.bulkReadTaskBins2(params);
    };
    Object.defineProperty(APIService.prototype, "wordsDomain", {
        get: function () {
            if (!this._wordsDomain) {
                this._wordsDomain = this.injector.get(X.WordsDomain);
            }
            return this._wordsDomain;
        },
        enumerable: true,
        configurable: true
    });
    APIService.prototype.bulkReadWords = function (params) {
        return this.wordsDomain.bulkReadWords(params);
    };
    APIService.prototype.bulkReadWords2 = function (params) {
        return this.wordsDomain.bulkReadWords2(params);
    };
    APIService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    APIService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return APIService;
}());
export { APIService };

//# sourceMappingURL=data:application/json;base64,