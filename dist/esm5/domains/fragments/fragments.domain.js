/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Fragments Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var FragmentsDomain = /** @class */ (function () {
    function FragmentsDomain(client) {
        this.client = client;
    }
    /**
     * List Remote Fragments
     * -------------
     *
     * List Remote Fragments
     */
    FragmentsDomain.prototype.bulkReadFragments = function (params) {
        return this.client.getDataState('/fragments/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    FragmentsDomain.prototype.bulkReadFragments2 = function (params) {
        return this.client.get('/fragments/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    /**
     * List Published Remote Fragments
     * -------------
     *
     * List Published Remote Fragments
     */
    FragmentsDomain.prototype.bulkReadPublishedFragments = function (params) {
        return this.client.getDataState('/fragments/published/', { params: params, responseMap: 'data', authorizationRequired: false });
    };
    FragmentsDomain.prototype.bulkReadPublishedFragments2 = function (params) {
        return this.client.get('/fragments/published/', { params: params, responseMap: 'data', authorizationRequired: false });
    };
    /**
     * Create Remote Fragment
     * -------------
     *
     * Create Remote Fragment
     */
    FragmentsDomain.prototype.createFragment = function () {
        return this.client
            .post('/fragments/', {}, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Delete Remote Fragment
     * -------------
     *
     * Delete Remote Fragment
     */
    FragmentsDomain.prototype.deleteFragment = function (fragmentId) {
        return this.client
            .delete("/fragments/" + fragmentId, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Merge Remote Fragment
     * -------------
     *
     * Merge Remote Fragment
     */
    FragmentsDomain.prototype.mergeFragment = function (fragmentId) {
        return this.client
            .post("/fragments/" + fragmentId + "/merge/", {}, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Publish Remote Fragment
     * -------------
     *
     * Publish Remote Fragment
     */
    FragmentsDomain.prototype.publishFragment = function (fragmentId) {
        return this.client
            .put("/fragments/" + fragmentId + "/publish/", {}, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read Remote Fragment
     * -------------
     *
     * Read Remote Fragment
     */
    FragmentsDomain.prototype.readFragment = function (fragmentId) {
        return this.client.getDataState("/fragments/" + fragmentId, { authorizationRequired: true });
    };
    FragmentsDomain.prototype.readFragment2 = function (fragmentId) {
        return this.client.get("/fragments/" + fragmentId, { authorizationRequired: true });
    };
    /**
     * Read Fragment Diff
     * -------------
     *
     * Read Fragment Diff
     */
    FragmentsDomain.prototype.readFragmentDiff = function (fragmentId) {
        return this.client.getDataState("/fragments/" + fragmentId + "/diff/", { authorizationRequired: true });
    };
    FragmentsDomain.prototype.readFragmentDiff2 = function (fragmentId) {
        return this.client.get("/fragments/" + fragmentId + "/diff/", { authorizationRequired: true });
    };
    /**
     * Read Fragment Sample
     * -------------
     *
     * Read Fragment Sample
     */
    FragmentsDomain.prototype.readFragmentSample = function (fragmentId) {
        return this.client.getDataState("/fragments/" + fragmentId + "/sample/", { authorizationRequired: false });
    };
    FragmentsDomain.prototype.readFragmentSample2 = function (fragmentId) {
        return this.client.get("/fragments/" + fragmentId + "/sample/", { authorizationRequired: false });
    };
    /**
     * Update Remote Fragment
     * -------------
     *
     * Update Remote Fragment
     */
    FragmentsDomain.prototype.updateFragment = function (fragmentId, body) {
        return this.client
            .put("/fragments/" + fragmentId, body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    FragmentsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FragmentsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return FragmentsDomain;
}());
export { FragmentsDomain };

//# sourceMappingURL=data:application/json;base64,