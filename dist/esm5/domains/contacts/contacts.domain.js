/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Contact Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var ContactsDomain = /** @class */ (function () {
    function ContactsDomain(client) {
        this.client = client;
    }
    /**
     * Create Anonymous Contact Attempt
     * -------------
     *
     * Enables one to send messages to CoSphere's support even if the sender is not authenticated.
     */
    ContactsDomain.prototype.createAnonymousContactAttempt = function (body) {
        return this.client
            .post('/contacts/anonymous/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Send Authenticated Contact Message
     * -------------
     *
     * Send the Contact Message immediately since it's already for an existing and authenticated user.
     */
    ContactsDomain.prototype.sendAuthenticatedContactMessage = function (body) {
        return this.client
            .post('/contacts/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Verify the contact attempt
     * -------------
     *
     * Verify the correctness of provided verification code and send the message to the CoSphere's support. This mechanism is used for anonymous users only.
     */
    ContactsDomain.prototype.verifyAnonymousContactAttempt = function (body) {
        return this.client
            .post('/contacts/anonymous/verify/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    ContactsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContactsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return ContactsDomain;
}());
export { ContactsDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdHMuZG9tYWluLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvc3BoZXJlL2NsaWVudC8iLCJzb3VyY2VzIjpbImRvbWFpbnMvY29udGFjdHMvY29udGFjdHMuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksd0JBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0ksc0RBQTZCLEdBQXBDLFVBQXFDLElBQXlDO1FBQzFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLElBQUksQ0FBMEMsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDN0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHdEQUErQixHQUF0QyxVQUF1QyxJQUEyQztRQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQTRDLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUNwRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksc0RBQTZCLEdBQXBDLFVBQXFDLElBQXlDO1FBQzFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLElBQUksQ0FBMEMsNkJBQTZCLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDcEgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2dCQXRDSixVQUFVOzs7O2dCQUxGLGFBQWE7O0lBNkN0QixxQkFBQztDQUFBLEFBeENELElBd0NDO1NBdkNZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgKiBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURUQsIEFMTCBNQU5VQUwgQ0hBTkdFUyBDQU4gQkVcbiAgKiBPVkVSV1JJVFRFTlxuICAqL1xuXG4vKipcbiAqIENvbnRhY3QgTWFuYWdlbWVudCBEb21haW5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuaW1wb3J0IHsgQ2xpZW50U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFTdGF0ZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgKiBhcyBYIGZyb20gJy4vY29udGFjdHMubW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRhY3RzRG9tYWluIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogQ2xpZW50U2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBBbm9ueW1vdXMgQ29udGFjdCBBdHRlbXB0XG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gc2VuZCBtZXNzYWdlcyB0byBDb1NwaGVyZSdzIHN1cHBvcnQgZXZlbiBpZiB0aGUgc2VuZGVyIGlzIG5vdCBhdXRoZW50aWNhdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVBbm9ueW1vdXNDb250YWN0QXR0ZW1wdChib2R5OiBYLkNyZWF0ZUFub255bW91c0NvbnRhY3RBdHRlbXB0Qm9keSk6IE9ic2VydmFibGU8WC5DcmVhdGVBbm9ueW1vdXNDb250YWN0QXR0ZW1wdFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnBvc3Q8WC5DcmVhdGVBbm9ueW1vdXNDb250YWN0QXR0ZW1wdFJlc3BvbnNlPignL2NvbnRhY3RzL2Fub255bW91cy8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogZmFsc2UgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIEF1dGhlbnRpY2F0ZWQgQ29udGFjdCBNZXNzYWdlXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogU2VuZCB0aGUgQ29udGFjdCBNZXNzYWdlIGltbWVkaWF0ZWx5IHNpbmNlIGl0J3MgYWxyZWFkeSBmb3IgYW4gZXhpc3RpbmcgYW5kIGF1dGhlbnRpY2F0ZWQgdXNlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VuZEF1dGhlbnRpY2F0ZWRDb250YWN0TWVzc2FnZShib2R5OiBYLlNlbmRBdXRoZW50aWNhdGVkQ29udGFjdE1lc3NhZ2VCb2R5KTogT2JzZXJ2YWJsZTxYLlNlbmRBdXRoZW50aWNhdGVkQ29udGFjdE1lc3NhZ2VSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguU2VuZEF1dGhlbnRpY2F0ZWRDb250YWN0TWVzc2FnZVJlc3BvbnNlPignL2NvbnRhY3RzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmVyaWZ5IHRoZSBjb250YWN0IGF0dGVtcHRcbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBWZXJpZnkgdGhlIGNvcnJlY3RuZXNzIG9mIHByb3ZpZGVkIHZlcmlmaWNhdGlvbiBjb2RlIGFuZCBzZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSBDb1NwaGVyZSdzIHN1cHBvcnQuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgZm9yIGFub255bW91cyB1c2VycyBvbmx5LlxuICAgICAqL1xuICAgIHB1YmxpYyB2ZXJpZnlBbm9ueW1vdXNDb250YWN0QXR0ZW1wdChib2R5OiBYLlZlcmlmeUFub255bW91c0NvbnRhY3RBdHRlbXB0Qm9keSk6IE9ic2VydmFibGU8WC5WZXJpZnlBbm9ueW1vdXNDb250YWN0QXR0ZW1wdFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnBvc3Q8WC5WZXJpZnlBbm9ueW1vdXNDb250YWN0QXR0ZW1wdFJlc3BvbnNlPignL2NvbnRhY3RzL2Fub255bW91cy92ZXJpZnkvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IGZhbHNlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG59Il19