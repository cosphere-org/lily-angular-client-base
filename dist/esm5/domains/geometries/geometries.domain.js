/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Geometries Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var GeometriesDomain = /** @class */ (function () {
    function GeometriesDomain(client) {
        this.client = client;
    }
    /**
     * List Geometries
     * -------------
     *
     * List Geometries.
     */
    GeometriesDomain.prototype.bulkReadGeometries = function (params) {
        return this.client.getDataState('/grid/geometries/', { params: params, responseMap: 'geometries', authorizationRequired: true });
    };
    GeometriesDomain.prototype.bulkReadGeometries2 = function (params) {
        return this.client.get('/grid/geometries/', { params: params, responseMap: 'geometries', authorizationRequired: true });
    };
    /**
     * Bulk Update Geometries
     * -------------
     *
     * Update in a Bulk list of Geometries.
     */
    GeometriesDomain.prototype.bulkUpdateGeometries = function (body) {
        return this.client
            .put('/grid/geometries/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read Geometry by Card
     * -------------
     *
     * Read a Geometry entity given the id of Card which is the parent of the Geometry entity.
     */
    GeometriesDomain.prototype.readGeometryByCard = function (cardId) {
        return this.client.getDataState("/grid/geometries/by_card/" + cardId, { authorizationRequired: true });
    };
    GeometriesDomain.prototype.readGeometryByCard2 = function (cardId) {
        return this.client.get("/grid/geometries/by_card/" + cardId, { authorizationRequired: true });
    };
    /**
     * Read Graph
     * -------------
     *
     * Render and read Graph made out of all Cards and Links belonging to a given user.
     */
    GeometriesDomain.prototype.readGraph = function (params) {
        return this.client.getDataState('/grid/graphs/', { params: params, authorizationRequired: true });
    };
    GeometriesDomain.prototype.readGraph2 = function (params) {
        return this.client.get('/grid/graphs/', { params: params, authorizationRequired: true });
    };
    GeometriesDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GeometriesDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return GeometriesDomain;
}());
export { GeometriesDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cmllcy5kb21haW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY29zcGhlcmUvY2xpZW50LyIsInNvdXJjZXMiOlsiZG9tYWlucy9nZW9tZXRyaWVzL2dlb21ldHJpZXMuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksMEJBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0ksNkNBQWtCLEdBQXpCLFVBQTBCLE1BQWlDO1FBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBdUMsbUJBQW1CLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkssQ0FBQztJQUVNLDhDQUFtQixHQUExQixVQUEyQixNQUFpQztRQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQXVDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLCtDQUFvQixHQUEzQixVQUE0QixJQUFnQztRQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixHQUFHLENBQWlDLG1CQUFtQixFQUFFLElBQUksRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQy9GLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSw2Q0FBa0IsR0FBekIsVUFBMEIsTUFBVztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQStCLDhCQUE0QixNQUFRLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pJLENBQUM7SUFFTSw4Q0FBbUIsR0FBMUIsVUFBMkIsTUFBVztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQStCLDhCQUE0QixNQUFRLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hJLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLG9DQUFTLEdBQWhCLFVBQWlCLE1BQXdCO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBc0IsZUFBZSxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBRU0scUNBQVUsR0FBakIsVUFBa0IsTUFBd0I7UUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFzQixlQUFlLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFHLENBQUM7O2dCQXhESixVQUFVOzs7O2dCQUxGLGFBQWE7O0lBK0R0Qix1QkFBQztDQUFBLEFBMURELElBMERDO1NBekRZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAqIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRCwgQUxMIE1BTlVBTCBDSEFOR0VTIENBTiBCRVxuICAqIE9WRVJXUklUVEVOXG4gICovXG5cbi8qKlxuICogR2VvbWV0cmllcyBNYW5hZ2VtZW50IERvbWFpblxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5pbXBvcnQgeyBDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVN0YXRlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LmludGVyZmFjZSc7XG5cbmltcG9ydCAqIGFzIFggZnJvbSAnLi9nZW9tZXRyaWVzLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHZW9tZXRyaWVzRG9tYWluIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogQ2xpZW50U2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIExpc3QgR2VvbWV0cmllc1xuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIExpc3QgR2VvbWV0cmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1JlYWRHZW9tZXRyaWVzKHBhcmFtczogWC5CdWxrUmVhZEdlb21ldHJpZXNRdWVyeSk6IERhdGFTdGF0ZTxYLkJ1bGtSZWFkR2VvbWV0cmllc1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldERhdGFTdGF0ZTxYLkJ1bGtSZWFkR2VvbWV0cmllc1Jlc3BvbnNlRW50aXR5W10+KCcvZ3JpZC9nZW9tZXRyaWVzLycsIHsgcGFyYW1zLCByZXNwb25zZU1hcDogJ2dlb21ldHJpZXMnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZEdlb21ldHJpZXMyKHBhcmFtczogWC5CdWxrUmVhZEdlb21ldHJpZXNRdWVyeSk6IE9ic2VydmFibGU8WC5CdWxrUmVhZEdlb21ldHJpZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZEdlb21ldHJpZXNSZXNwb25zZUVudGl0eVtdPignL2dyaWQvZ2VvbWV0cmllcy8nLCB7IHBhcmFtcywgcmVzcG9uc2VNYXA6ICdnZW9tZXRyaWVzJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgVXBkYXRlIEdlb21ldHJpZXNcbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBVcGRhdGUgaW4gYSBCdWxrIGxpc3Qgb2YgR2VvbWV0cmllcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1VwZGF0ZUdlb21ldHJpZXMoYm9keTogWC5CdWxrVXBkYXRlR2VvbWV0cmllc0JvZHkpOiBPYnNlcnZhYmxlPFguQnVsa1VwZGF0ZUdlb21ldHJpZXNSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wdXQ8WC5CdWxrVXBkYXRlR2VvbWV0cmllc1Jlc3BvbnNlPignL2dyaWQvZ2VvbWV0cmllcy8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgR2VvbWV0cnkgYnkgQ2FyZFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIFJlYWQgYSBHZW9tZXRyeSBlbnRpdHkgZ2l2ZW4gdGhlIGlkIG9mIENhcmQgd2hpY2ggaXMgdGhlIHBhcmVudCBvZiB0aGUgR2VvbWV0cnkgZW50aXR5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkR2VvbWV0cnlCeUNhcmQoY2FyZElkOiBhbnkpOiBEYXRhU3RhdGU8WC5SZWFkR2VvbWV0cnlCeUNhcmRSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguUmVhZEdlb21ldHJ5QnlDYXJkUmVzcG9uc2U+KGAvZ3JpZC9nZW9tZXRyaWVzL2J5X2NhcmQvJHtjYXJkSWR9YCwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyByZWFkR2VvbWV0cnlCeUNhcmQyKGNhcmRJZDogYW55KTogT2JzZXJ2YWJsZTxYLlJlYWRHZW9tZXRyeUJ5Q2FyZFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5SZWFkR2VvbWV0cnlCeUNhcmRSZXNwb25zZT4oYC9ncmlkL2dlb21ldHJpZXMvYnlfY2FyZC8ke2NhcmRJZH1gLCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIEdyYXBoXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogUmVuZGVyIGFuZCByZWFkIEdyYXBoIG1hZGUgb3V0IG9mIGFsbCBDYXJkcyBhbmQgTGlua3MgYmVsb25naW5nIHRvIGEgZ2l2ZW4gdXNlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZEdyYXBoKHBhcmFtczogWC5SZWFkR3JhcGhRdWVyeSk6IERhdGFTdGF0ZTxYLlJlYWRHcmFwaFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5SZWFkR3JhcGhSZXNwb25zZT4oJy9ncmlkL2dyYXBocy8nLCB7IHBhcmFtcywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgcmVhZEdyYXBoMihwYXJhbXM6IFguUmVhZEdyYXBoUXVlcnkpOiBPYnNlcnZhYmxlPFguUmVhZEdyYXBoUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLlJlYWRHcmFwaFJlc3BvbnNlPignL2dyaWQvZ3JhcGhzLycsIHsgcGFyYW1zLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuXG59Il19