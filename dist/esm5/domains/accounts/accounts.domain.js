/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Accounts Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var AccountsDomain = /** @class */ (function () {
    function AccountsDomain(client) {
        this.client = client;
    }
    /**
     * Activate Account
     * -------------
     *
     * Activate Account by decoding the `code` which contains the confirmation off the intent and was signed by the user itself.
     */
    AccountsDomain.prototype.activateAccount = function (body) {
        return this.client
            .post('/auth/activate/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Bulk Read Mentors' Account
     * -------------
     *
     * Enable one to Read all available Mentor accounts
     */
    AccountsDomain.prototype.bulkReadAccounts = function (params) {
        return this.client.getDataState('/auth/accounts/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    AccountsDomain.prototype.bulkReadAccounts2 = function (params) {
        return this.client.get('/auth/accounts/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Change Password
     * -------------
     *
     * Enables one to change one's password for an authenticated user.
     */
    AccountsDomain.prototype.changePassword = function (body) {
        return this.client
            .post('/auth/change_password/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create Account
     * -------------
     *
     * Creates User and Account if provided data are valid.
     */
    AccountsDomain.prototype.createAccount = function (body) {
        return this.client
            .post('/auth/accounts/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read My Account
     * -------------
     *
     * Read my Account data.
     */
    AccountsDomain.prototype.readAccount = function () {
        return this.client.getDataState('/auth/accounts/me/', { authorizationRequired: true });
    };
    AccountsDomain.prototype.readAccount2 = function () {
        return this.client.get('/auth/accounts/me/', { authorizationRequired: true });
    };
    /**
     * Reset Password
     * -------------
     *
     * Enables one to reset her password in case the old one cannot be recalled.
     */
    AccountsDomain.prototype.resetPassword = function (body) {
        return this.client
            .post('/auth/reset_password/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Send Account Activation Email
     * -------------
     *
     * Send an Email containing the confirmation link which when clicked kicks of the Account Activation. Even though the activation email is send automatically during the Sign Up phase one should have a way to send it again in case it was not delivered.
     */
    AccountsDomain.prototype.sendAccountActivationEmail = function (body) {
        return this.client
            .post('/auth/send_activation_email/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Send Reset Password Email
     * -------------
     *
     * Send an Email containing the confirmation link which when clicked kicks of the real Reset Password operation.
     */
    AccountsDomain.prototype.sendResetPasswordEmail = function (body) {
        return this.client
            .post('/auth/send_reset_password_email/', body, { authorizationRequired: false })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Update My Account
     * -------------
     *
     * Update my Account data.
     */
    AccountsDomain.prototype.updateAccount = function (body) {
        return this.client
            .put('/auth/accounts/me/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    AccountsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AccountsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return AccountsDomain;
}());
export { AccountsDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudHMuZG9tYWluLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvc3BoZXJlL2NsaWVudC8iLCJzb3VyY2VzIjpbImRvbWFpbnMvYWNjb3VudHMvYWNjb3VudHMuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksd0JBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0ksd0NBQWUsR0FBdEIsVUFBdUIsSUFBMkI7UUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUE0QixpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUMxRixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0kseUNBQWdCLEdBQXZCLFVBQXdCLE1BQStCO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBcUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekosQ0FBQztJQUVNLDBDQUFpQixHQUF4QixVQUF5QixNQUErQjtRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFD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LHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQ3pGLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDOztnQkFsSEosVUFBVTs7OztnQkFMRixhQUFhOztJQXlIdEIscUJBQUM7Q0FBQSxBQXBIRCxJQW9IQztTQW5IWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICogVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVELCBBTEwgTUFOVUFMIENIQU5HRVMgQ0FOIEJFXG4gICogT1ZFUldSSVRURU5cbiAgKi9cblxuLyoqXG4gKiBBY2NvdW50cyBNYW5hZ2VtZW50IERvbWFpblxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5pbXBvcnQgeyBDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVN0YXRlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LmludGVyZmFjZSc7XG5cbmltcG9ydCAqIGFzIFggZnJvbSAnLi9hY2NvdW50cy5tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWNjb3VudHNEb21haW4ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xpZW50OiBDbGllbnRTZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogQWN0aXZhdGUgQWNjb3VudFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEFjdGl2YXRlIEFjY291bnQgYnkgZGVjb2RpbmcgdGhlIGBjb2RlYCB3aGljaCBjb250YWlucyB0aGUgY29uZmlybWF0aW9uIG9mZiB0aGUgaW50ZW50IGFuZCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyIGl0c2VsZi5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZhdGVBY2NvdW50KGJvZHk6IFguQWN0aXZhdGVBY2NvdW50Qm9keSk6IE9ic2VydmFibGU8WC5BY3RpdmF0ZUFjY291bnRSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguQWN0aXZhdGVBY2NvdW50UmVzcG9uc2U+KCcvYXV0aC9hY3RpdmF0ZS8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogZmFsc2UgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWxrIFJlYWQgTWVudG9ycycgQWNjb3VudFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEVuYWJsZSBvbmUgdG8gUmVhZCBhbGwgYXZhaWxhYmxlIE1lbnRvciBhY2NvdW50c1xuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZEFjY291bnRzKHBhcmFtczogWC5CdWxrUmVhZEFjY291bnRzUXVlcnkpOiBEYXRhU3RhdGU8WC5CdWxrUmVhZEFjY291bnRzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRBY2NvdW50c1Jlc3BvbnNlRW50aXR5W10+KCcvYXV0aC9hY2NvdW50cy8nLCB7IHBhcmFtcywgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgYnVsa1JlYWRBY2NvdW50czIocGFyYW1zOiBYLkJ1bGtSZWFkQWNjb3VudHNRdWVyeSk6IE9ic2VydmFibGU8WC5CdWxrUmVhZEFjY291bnRzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRBY2NvdW50c1Jlc3BvbnNlRW50aXR5W10+KCcvYXV0aC9hY2NvdW50cy8nLCB7IHBhcmFtcywgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZSBQYXNzd29yZFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEVuYWJsZXMgb25lIHRvIGNoYW5nZSBvbmUncyBwYXNzd29yZCBmb3IgYW4gYXV0aGVudGljYXRlZCB1c2VyLlxuICAgICAqL1xuICAgIHB1YmxpYyBjaGFuZ2VQYXNzd29yZChib2R5OiBYLkNoYW5nZVBhc3N3b3JkQm9keSk6IE9ic2VydmFibGU8WC5DaGFuZ2VQYXNzd29yZFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnBvc3Q8WC5DaGFuZ2VQYXNzd29yZFJlc3BvbnNlPignL2F1dGgvY2hhbmdlX3Bhc3N3b3JkLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEFjY291bnRcbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIFVzZXIgYW5kIEFjY291bnQgaWYgcHJvdmlkZWQgZGF0YSBhcmUgdmFsaWQuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUFjY291bnQoYm9keTogWC5DcmVhdGVBY2NvdW50Qm9keSk6IE9ic2VydmFibGU8WC5DcmVhdGVBY2NvdW50UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkNyZWF0ZUFjY291bnRSZXNwb25zZT4oJy9hdXRoL2FjY291bnRzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiBmYWxzZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgTXkgQWNjb3VudFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIFJlYWQgbXkgQWNjb3VudCBkYXRhLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkQWNjb3VudCgpOiBEYXRhU3RhdGU8WC5SZWFkQWNjb3VudFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5SZWFkQWNjb3VudFJlc3BvbnNlPignL2F1dGgvYWNjb3VudHMvbWUvJywgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyByZWFkQWNjb3VudDIoKTogT2JzZXJ2YWJsZTxYLlJlYWRBY2NvdW50UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLlJlYWRBY2NvdW50UmVzcG9uc2U+KCcvYXV0aC9hY2NvdW50cy9tZS8nLCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCBQYXNzd29yZFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEVuYWJsZXMgb25lIHRvIHJlc2V0IGhlciBwYXNzd29yZCBpbiBjYXNlIHRoZSBvbGQgb25lIGNhbm5vdCBiZSByZWNhbGxlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRQYXNzd29yZChib2R5OiBYLlJlc2V0UGFzc3dvcmRCb2R5KTogT2JzZXJ2YWJsZTxYLlJlc2V0UGFzc3dvcmRSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguUmVzZXRQYXNzd29yZFJlc3BvbnNlPignL2F1dGgvcmVzZXRfcGFzc3dvcmQvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IGZhbHNlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBBY2NvdW50IEFjdGl2YXRpb24gRW1haWxcbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBTZW5kIGFuIEVtYWlsIGNvbnRhaW5pbmcgdGhlIGNvbmZpcm1hdGlvbiBsaW5rIHdoaWNoIHdoZW4gY2xpY2tlZCBraWNrcyBvZiB0aGUgQWNjb3VudCBBY3RpdmF0aW9uLiBFdmVuIHRob3VnaCB0aGUgYWN0aXZhdGlvbiBlbWFpbCBpcyBzZW5kIGF1dG9tYXRpY2FsbHkgZHVyaW5nIHRoZSBTaWduIFVwIHBoYXNlIG9uZSBzaG91bGQgaGF2ZSBhIHdheSB0byBzZW5kIGl0IGFnYWluIGluIGNhc2UgaXQgd2FzIG5vdCBkZWxpdmVyZWQuXG4gICAgICovXG4gICAgcHVibGljIHNlbmRBY2NvdW50QWN0aXZhdGlvbkVtYWlsKGJvZHk6IFguU2VuZEFjY291bnRBY3RpdmF0aW9uRW1haWxCb2R5KTogT2JzZXJ2YWJsZTxYLlNlbmRBY2NvdW50QWN0aXZhdGlvbkVtYWlsUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLlNlbmRBY2NvdW50QWN0aXZhdGlvbkVtYWlsUmVzcG9uc2U+KCcvYXV0aC9zZW5kX2FjdGl2YXRpb25fZW1haWwvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IGZhbHNlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBSZXNldCBQYXNzd29yZCBFbWFpbFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIFNlbmQgYW4gRW1haWwgY29udGFpbmluZyB0aGUgY29uZmlybWF0aW9uIGxpbmsgd2hpY2ggd2hlbiBjbGlja2VkIGtpY2tzIG9mIHRoZSByZWFsIFJlc2V0IFBhc3N3b3JkIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VuZFJlc2V0UGFzc3dvcmRFbWFpbChib2R5OiBYLlNlbmRSZXNldFBhc3N3b3JkRW1haWxCb2R5KTogT2JzZXJ2YWJsZTxYLlNlbmRSZXNldFBhc3N3b3JkRW1haWxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguU2VuZFJlc2V0UGFzc3dvcmRFbWFpbFJlc3BvbnNlPignL2F1dGgvc2VuZF9yZXNldF9wYXNzd29yZF9lbWFpbC8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogZmFsc2UgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgTXkgQWNjb3VudFxuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIFVwZGF0ZSBteSBBY2NvdW50IGRhdGEuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUFjY291bnQoYm9keTogWC5VcGRhdGVBY2NvdW50Qm9keSk6IE9ic2VydmFibGU8WC5VcGRhdGVBY2NvdW50UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucHV0PFguVXBkYXRlQWNjb3VudFJlc3BvbnNlPignL2F1dGgvYWNjb3VudHMvbWUvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbn0iXX0=