/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * MediaItems Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var MediaitemsDomain = /** @class */ (function () {
    function MediaitemsDomain(client) {
        this.client = client;
    }
    /**
     * List MediaItems
     * -------------
     *
     * List MediaItems
     */
    MediaitemsDomain.prototype.bulkReadMediaitems = function (params) {
        return this.client.getDataState('/mediaitems/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    MediaitemsDomain.prototype.bulkReadMediaitems2 = function (params) {
        return this.client.get('/mediaitems/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Remove MediaItem
     * -------------
     *
     * Remove MediaItem instance.
     */
    MediaitemsDomain.prototype.deleteMediaitem = function (mediaitemId, params) {
        return this.client
            .delete("/mediaitems/" + mediaitemId, { params: params, authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read MediaItem
     * -------------
     *
     * Read MediaItem
     */
    MediaitemsDomain.prototype.readMediaitem = function (mediaitemId) {
        return this.client.getDataState("/mediaitems/" + mediaitemId, { authorizationRequired: true });
    };
    MediaitemsDomain.prototype.readMediaitem2 = function (mediaitemId) {
        return this.client.get("/mediaitems/" + mediaitemId, { authorizationRequired: true });
    };
    /**
     * Read By Process Id
     * -------------
     *
     * Read MediaItem by Process Id
     */
    MediaitemsDomain.prototype.readMediaitemByProcessId = function (processId) {
        return this.client.getDataState("/mediaitems/by_process/" + processId, { authorizationRequired: true });
    };
    MediaitemsDomain.prototype.readMediaitemByProcessId2 = function (processId) {
        return this.client.get("/mediaitems/by_process/" + processId, { authorizationRequired: true });
    };
    /**
     * Read or Create MediaItem
     * -------------
     *
     * Read or Create MediaItem instance.
     */
    MediaitemsDomain.prototype.readOrCreateMediaitem = function (body) {
        return this.client
            .post('/mediaitems/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Update MediaItem
     * -------------
     *
     * Update MediaItem instance.
     */
    MediaitemsDomain.prototype.updateMediaitem = function (mediaitemId, body) {
        return this.client
            .put("/mediaitems/" + mediaitemId, body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Update MediaItem Representation
     * -------------
     *
     * Update given MediaItem with only the fields which are decided externally (using external services). Fields like: - `web_representations` - `thumbnail_uri` - `meta` - `text` All of those fields are computed in smarter way in order to make the MediaItem way better in a semantic sense. Those fields are perceived as the `representation` of a given MediaItem since they contains information about how to display a given MediaItem, how to understand it etc. It goes beyond the simple abstract data oriented representation (uri, extension etc.).
     */
    MediaitemsDomain.prototype.updateMediaitemRepresentation = function (mediaitemId, body) {
        return this.client
            .put("/mediaitems/" + mediaitemId + "/representation/", body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    MediaitemsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MediaitemsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return MediaitemsDomain;
}());
export { MediaitemsDomain };

//# sourceMappingURL=data:application/json;base64,