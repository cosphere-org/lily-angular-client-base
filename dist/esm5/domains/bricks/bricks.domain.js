/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Bricks Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var BricksDomain = /** @class */ (function () {
    function BricksDomain(client) {
        this.client = client;
    }
    /**
     * Bulk Read Bricks Game Attempts
     */
    BricksDomain.prototype.bulkReadGameattempts = function (gameId) {
        return this.client.getDataState("/games/" + gameId + "/attempts/", { responseMap: 'data', authorizationRequired: true });
    };
    BricksDomain.prototype.bulkReadGameattempts2 = function (gameId) {
        return this.client.get("/games/" + gameId + "/attempts/", { responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Bulk Read Game
     */
    BricksDomain.prototype.bulkReadGames = function () {
        return this.client.getDataState('/games/', { responseMap: 'data', authorizationRequired: true });
    };
    BricksDomain.prototype.bulkReadGames2 = function () {
        return this.client.get('/games/', { responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Create Game
     */
    BricksDomain.prototype.createGame = function (body) {
        return this.client
            .post('/games/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create Bricks Game Attempt
     */
    BricksDomain.prototype.createGameattempt = function (gameId, body) {
        return this.client
            .post("/games/" + gameId + "/attempts/", body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Delete Game
     */
    BricksDomain.prototype.deleteGame = function (gameId) {
        return this.client
            .delete("/games/" + gameId, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read Game
     */
    BricksDomain.prototype.readGame = function (gameId) {
        return this.client.getDataState("/games/" + gameId, { authorizationRequired: true });
    };
    BricksDomain.prototype.readGame2 = function (gameId) {
        return this.client.get("/games/" + gameId, { authorizationRequired: true });
    };
    /**
     * Update Game
     */
    BricksDomain.prototype.updateGame = function (gameId, body) {
        return this.client
            .put("/games/" + gameId, body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    BricksDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BricksDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return BricksDomain;
}());
export { BricksDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpY2tzLmRvbWFpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjb3NwaGVyZS9jbGllbnQvIiwic291cmNlcyI6WyJkb21haW5zL2JyaWNrcy9icmlja3MuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksc0JBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOztPQUVHO0lBQ0ksMkNBQW9CLEdBQTNCLFVBQTRCLE1BQVc7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUF5QyxZQUFVLE1BQU0sZUFBWSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hLLENBQUM7SUFFTSw0Q0FBcUIsR0FBNUIsVUFBNkIsTUFBVztRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQXlDLFlBQVUsTUFBTSxlQUFZLEVBQUUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkosQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0NBQWEsR0FBcEI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQWtDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0SSxDQUFDO0lBRU0scUNBQWMsR0FBckI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQWtDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3SCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQ0FBVSxHQUFqQixVQUFrQixJQUFzQjtRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQXVCLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1RSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQWlCLEdBQXhCLFVBQXlCLE1BQVcsRUFBRSxJQUE2QjtRQUMvRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQThCLFlBQVUsTUFBTSxlQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDdEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNJLGlDQUFVLEdBQWpCLFVBQWtCLE1BQVc7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsTUFBTSxDQUF1QixZQUFVLE1BQVEsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQ2pGLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSwrQkFBUSxHQUFmLFVBQWdCLE1BQVc7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFxQixZQUFVLE1BQVEsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVNLGdDQUFTLEdBQWhCLFVBQWlCLE1BQVc7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFxQixZQUFVLE1BQVEsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEcsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUNBQVUsR0FBakIsVUFBa0IsTUFBVyxFQUFFLElBQXNCO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLEdBQUcsQ0FBdUIsWUFBVSxNQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDcEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2dCQXZFSixVQUFVOzs7O2dCQUxGLGFBQWE7O0lBOEV0QixtQkFBQztDQUFBLEFBekVELElBeUVDO1NBeEVZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgKiBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURUQsIEFMTCBNQU5VQUwgQ0hBTkdFUyBDQU4gQkVcbiAgKiBPVkVSV1JJVFRFTlxuICAqL1xuXG4vKipcbiAqIEJyaWNrcyBNYW5hZ2VtZW50IERvbWFpblxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5pbXBvcnQgeyBDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVN0YXRlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xpZW50LmludGVyZmFjZSc7XG5cbmltcG9ydCAqIGFzIFggZnJvbSAnLi9icmlja3MubW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJyaWNrc0RvbWFpbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IENsaWVudFNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBCdWxrIFJlYWQgQnJpY2tzIEdhbWUgQXR0ZW1wdHNcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1JlYWRHYW1lYXR0ZW1wdHMoZ2FtZUlkOiBhbnkpOiBEYXRhU3RhdGU8WC5CdWxrUmVhZEdhbWVhdHRlbXB0c1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldERhdGFTdGF0ZTxYLkJ1bGtSZWFkR2FtZWF0dGVtcHRzUmVzcG9uc2VFbnRpdHlbXT4oYC9nYW1lcy8ke2dhbWVJZH0vYXR0ZW1wdHMvYCwgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZEdhbWVhdHRlbXB0czIoZ2FtZUlkOiBhbnkpOiBPYnNlcnZhYmxlPFguQnVsa1JlYWRHYW1lYXR0ZW1wdHNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZEdhbWVhdHRlbXB0c1Jlc3BvbnNlRW50aXR5W10+KGAvZ2FtZXMvJHtnYW1lSWR9L2F0dGVtcHRzL2AsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgUmVhZCBHYW1lXG4gICAgICovXG4gICAgcHVibGljIGJ1bGtSZWFkR2FtZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRHYW1lc1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldERhdGFTdGF0ZTxYLkJ1bGtSZWFkR2FtZXNSZXNwb25zZUVudGl0eVtdPignL2dhbWVzLycsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgYnVsa1JlYWRHYW1lczIoKTogT2JzZXJ2YWJsZTxYLkJ1bGtSZWFkR2FtZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZEdhbWVzUmVzcG9uc2VFbnRpdHlbXT4oJy9nYW1lcy8nLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgR2FtZVxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVHYW1lKGJvZHk6IFguQ3JlYXRlR2FtZUJvZHkpOiBPYnNlcnZhYmxlPFguQ3JlYXRlR2FtZVJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnBvc3Q8WC5DcmVhdGVHYW1lUmVzcG9uc2U+KCcvZ2FtZXMvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgQnJpY2tzIEdhbWUgQXR0ZW1wdFxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVHYW1lYXR0ZW1wdChnYW1lSWQ6IGFueSwgYm9keTogWC5DcmVhdGVHYW1lYXR0ZW1wdEJvZHkpOiBPYnNlcnZhYmxlPFguQ3JlYXRlR2FtZWF0dGVtcHRSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguQ3JlYXRlR2FtZWF0dGVtcHRSZXNwb25zZT4oYC9nYW1lcy8ke2dhbWVJZH0vYXR0ZW1wdHMvYCwgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgR2FtZVxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVHYW1lKGdhbWVJZDogYW55KTogT2JzZXJ2YWJsZTxYLkRlbGV0ZUdhbWVSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5kZWxldGU8WC5EZWxldGVHYW1lUmVzcG9uc2U+KGAvZ2FtZXMvJHtnYW1lSWR9YCwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIEdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZEdhbWUoZ2FtZUlkOiBhbnkpOiBEYXRhU3RhdGU8WC5SZWFkR2FtZVJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5SZWFkR2FtZVJlc3BvbnNlPihgL2dhbWVzLyR7Z2FtZUlkfWAsIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgcmVhZEdhbWUyKGdhbWVJZDogYW55KTogT2JzZXJ2YWJsZTxYLlJlYWRHYW1lUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLlJlYWRHYW1lUmVzcG9uc2U+KGAvZ2FtZXMvJHtnYW1lSWR9YCwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIEdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlR2FtZShnYW1lSWQ6IGFueSwgYm9keTogWC5VcGRhdGVHYW1lQm9keSk6IE9ic2VydmFibGU8WC5VcGRhdGVHYW1lUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucHV0PFguVXBkYXRlR2FtZVJlc3BvbnNlPihgL2dhbWVzLyR7Z2FtZUlkfWAsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG59Il19