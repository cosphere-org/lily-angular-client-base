/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Processes Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var ProcessesDomain = /** @class */ (function () {
    function ProcessesDomain(client) {
        this.client = client;
    }
    /**
     * Create Deletion Process
     */
    ProcessesDomain.prototype.createDeletionProcess = function (body) {
        return this.client
            .post('/mediafiles/processes/deletions/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create Download Process
     */
    ProcessesDomain.prototype.createDownloadProcess = function (body) {
        return this.client
            .post('/mediafiles/processes/downloads/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create Media Lock
     */
    ProcessesDomain.prototype.createMediaLock = function (body) {
        return this.client
            .post('/mediafiles/locks/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create Upload Process
     */
    ProcessesDomain.prototype.createUploadProcess = function (body) {
        return this.client
            .post('/mediafiles/processes/uploads/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read invariants for a given uri
     */
    ProcessesDomain.prototype.readInvariants = function (params) {
        return this.client.getDataState('/mediafiles/invariants/', { params: params, authorizationRequired: true });
    };
    ProcessesDomain.prototype.readInvariants2 = function (params) {
        return this.client.get('/mediafiles/invariants/', { params: params, authorizationRequired: true });
    };
    /**
     * Create Media Lock
     */
    ProcessesDomain.prototype.readProcessState = function (params) {
        return this.client.getDataState('/mediafiles/processes/', { params: params, authorizationRequired: true });
    };
    ProcessesDomain.prototype.readProcessState2 = function (params) {
        return this.client.get('/mediafiles/processes/', { params: params, authorizationRequired: true });
    };
    /**
     * Sign Process dedicated to upload and conversion of media file
     */
    ProcessesDomain.prototype.signProcess = function (params) {
        return this.client.getDataState('/mediafiles/processes/sign/', { params: params, authorizationRequired: true });
    };
    ProcessesDomain.prototype.signProcess2 = function (params) {
        return this.client.get('/mediafiles/processes/sign/', { params: params, authorizationRequired: true });
    };
    /**
     * Watch conversion status
     * -------------
     *
     * Endpoint called by the external conversion service.
     */
    ProcessesDomain.prototype.watchConversionStatus = function (waiterId, params) {
        return this.client.getDataState("/mediafiles/convert_processes/(?P<process_id>[0-9a-zA-Z_-=]+)/" + waiterId, { params: params, authorizationRequired: false });
    };
    ProcessesDomain.prototype.watchConversionStatus2 = function (waiterId, params) {
        return this.client.get("/mediafiles/convert_processes/(?P<process_id>[0-9a-zA-Z_-=]+)/" + waiterId, { params: params, authorizationRequired: false });
    };
    ProcessesDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessesDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return ProcessesDomain;
}());
export { ProcessesDomain };

//# sourceMappingURL=data:application/json;base64,