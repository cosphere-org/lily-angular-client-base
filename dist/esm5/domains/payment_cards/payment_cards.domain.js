/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Payment Cards Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var PaymentCardsDomain = /** @class */ (function () {
    function PaymentCardsDomain(client) {
        this.client = client;
    }
    /**
     * Mark a given Payment Card as a default one
     * -------------
     *
     * Enables the the User to mark a specific Payment Card as a default one, meaning that it will be used for all upcoming payments. Marking Payment Card as a default one automatically leads to the unmarking of any Payment Card which was default one before the invocation of the command.
     */
    PaymentCardsDomain.prototype.asDefaultMarkPaymentcard = function (paymentCardId) {
        return this.client
            .put("/payments/payment_cards/" + paymentCardId + "/mark_as_default/", {}, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * List all Payment Cards belonging to a given user
     * -------------
     *
     * Enables the the User to list all of the Payment Cards which were added by him / her. Among all returned Payment Cards there must be one and only one which is marked as **default**.
     */
    PaymentCardsDomain.prototype.bulkReadPaymentcards = function () {
        return this.client.getDataState('/payments/payment_cards/', { responseMap: 'data', authorizationRequired: true });
    };
    PaymentCardsDomain.prototype.bulkReadPaymentcards2 = function () {
        return this.client.get('/payments/payment_cards/', { responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Create a Payment Card
     * -------------
     *
     * Enables the the User to add new Payment Card, which could be needed in cases when the User would like to replace existing Payment Card because: - it expired - is empty - the User prefers another one to be used from now on. Using the optional `mark_as_default` field one can mark just created Payment Card as the default one.
     */
    PaymentCardsDomain.prototype.createPaymentcard = function (body) {
        return this.client
            .post('/payments/payment_cards/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Remove a given Payment Card belonging to a given user
     * -------------
     *
     * Enables the the User to remove a specific Payment Card which were added by him / her. Payment Card can be removed only if it's not a default one.
     */
    PaymentCardsDomain.prototype.deletePaymentcard = function (paymentCardId) {
        return this.client
            .delete("/payments/payment_cards/" + paymentCardId, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Pay using the default Payment Card
     * -------------
     *
     * User is allowed only to perform payments against her default Payment Card. In other words on order to use a given Payment Card one has to mark is as default. Also one is not allowed to perform such payments freely and therefore we expect to get a `payment_token` inside which another piece of our system encoded allowed sum to be paid.
     */
    PaymentCardsDomain.prototype.payWithDefaultPaymentCard = function (body) {
        return this.client
            .post('/payments/payment_cards/pay_with_default/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Create a Payment Card
     * -------------
     *
     * Enables the the User to add new Payment Card, which could be needed in cases when the User would like to replace existing Payment Card because: - it expired - is empty - the User prefers another one to be used from now on
     */
    PaymentCardsDomain.prototype.renderPaymentCardWidget = function () {
        return this.client.getDataState('/payments/payment_cards/widget/', { authorizationRequired: true });
    };
    PaymentCardsDomain.prototype.renderPaymentCardWidget2 = function () {
        return this.client.get('/payments/payment_cards/widget/', { authorizationRequired: true });
    };
    PaymentCardsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PaymentCardsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return PaymentCardsDomain;
}());
export { PaymentCardsDomain };

//# sourceMappingURL=data:application/json;base64,