/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Hashtags Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var HashtagsDomain = /** @class */ (function () {
    function HashtagsDomain(client) {
        this.client = client;
    }
    /**
     * List Hashtags
     * -------------
     *
     * Enables one to list a series of Hashtag instances. It accepts various query parameters such as: - `limit` - `offset` - `first_character`
     */
    HashtagsDomain.prototype.bulkReadHashtags = function (params) {
        return this.client.getDataState('/hashtags/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    HashtagsDomain.prototype.bulkReadHashtags2 = function (params) {
        return this.client.get('/hashtags/', { params: params, responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Creating a single Hashtag
     * -------------
     *
     * Enables one to create a single Hashtag instance.
     */
    HashtagsDomain.prototype.createHashtag = function (body) {
        return this.client
            .post('/hashtags/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Removing a single Hashtag
     * -------------
     *
     * Enables one to detach a single Hashtag instance from a list cards given by `card_ids`.
     */
    HashtagsDomain.prototype.deleteHashtag = function (hashtagId, params) {
        return this.client
            .delete("/hashtags/" + hashtagId, { params: params, authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * List Hashtags TOC
     * -------------
     *
     * Enables one to list Hashtags Table of Contents made out of Hashtags. Note: Currently this endpoint returns only a flat list of hashtags with the count of Cards with which they're attached to. In the future though one could propose a mechanism which could calculate hierarchy between those hashtags (parent - child relationships) and ordering based on the knowledge grid topology. It accepts various query parameters such as: - `limit` - `offset`
     */
    HashtagsDomain.prototype.readHashtagsToc = function (params) {
        return this.client.getDataState('/hashtags/toc/', { params: params, authorizationRequired: true });
    };
    HashtagsDomain.prototype.readHashtagsToc2 = function (params) {
        return this.client.get('/hashtags/toc/', { params: params, authorizationRequired: true });
    };
    /**
     * Updating a single Hashtag
     * -------------
     *
     * Enables one to update a single Hashtag instance with a list of `card_ids` to which it should get attached to.
     */
    HashtagsDomain.prototype.updateHashtag = function (hashtagId, body) {
        return this.client
            .put("/hashtags/" + hashtagId, body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    HashtagsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HashtagsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return HashtagsDomain;
}());
export { HashtagsDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaHRhZ3MuZG9tYWluLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvc3BoZXJlL2NsaWVudC8iLCJzb3VyY2VzIjpbImRvbWFpbnMvaGFzaHRhZ3MvaGFzaHRhZ3MuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksd0JBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0kseUNBQWdCLEdBQXZCLFVBQXdCLE1BQStCO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBcUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3BKLENBQUM7SUFFTSwwQ0FBaUIsR0FBeEIsVUFBeUIsTUFBK0I7UUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFxQyxZQUFZLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0ksQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksc0NBQWEsR0FBcEIsVUFBcUIsSUFBeUI7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUEwQixZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDbEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHNDQUFhLEdBQXBCLFVBQXFCLFNBQWMsRUFBRSxNQUE0QjtRQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixNQUFNLENBQTBCLGVBQWEsU0FBVyxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDbEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLHdDQUFlLEdBQXRCLFVBQXVCLE1BQThCO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBNEIsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFILENBQUM7SUFFTSx5Q0FBZ0IsR0FBdkIsVUFBd0IsTUFBOEI7UUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUE0QixnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakgsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksc0NBQWEsR0FBcEIsVUFBcUIsU0FBYyxFQUFFLElBQXlCO1FBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLEdBQUcsQ0FBMEIsZUFBYSxTQUFXLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDN0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBYixDQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2dCQWxFSixVQUFVOzs7O2dCQUxGLGFBQWE7O0lBeUV0QixxQkFBQztDQUFBLEFBcEVELElBb0VDO1NBbkVZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgKiBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURUQsIEFMTCBNQU5VQUwgQ0hBTkdFUyBDQU4gQkVcbiAgKiBPVkVSV1JJVFRFTlxuICAqL1xuXG4vKipcbiAqIEhhc2h0YWdzIE1hbmFnZW1lbnQgRG9tYWluXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmltcG9ydCB7IENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuaW50ZXJmYWNlJztcblxuaW1wb3J0ICogYXMgWCBmcm9tICcuL2hhc2h0YWdzLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIYXNodGFnc0RvbWFpbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IENsaWVudFNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IEhhc2h0YWdzXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gbGlzdCBhIHNlcmllcyBvZiBIYXNodGFnIGluc3RhbmNlcy4gSXQgYWNjZXB0cyB2YXJpb3VzIHF1ZXJ5IHBhcmFtZXRlcnMgc3VjaCBhczogLSBgbGltaXRgIC0gYG9mZnNldGAgLSBgZmlyc3RfY2hhcmFjdGVyYFxuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZEhhc2h0YWdzKHBhcmFtczogWC5CdWxrUmVhZEhhc2h0YWdzUXVlcnkpOiBEYXRhU3RhdGU8WC5CdWxrUmVhZEhhc2h0YWdzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRIYXNodGFnc1Jlc3BvbnNlRW50aXR5W10+KCcvaGFzaHRhZ3MvJywgeyBwYXJhbXMsIHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGJ1bGtSZWFkSGFzaHRhZ3MyKHBhcmFtczogWC5CdWxrUmVhZEhhc2h0YWdzUXVlcnkpOiBPYnNlcnZhYmxlPFguQnVsa1JlYWRIYXNodGFnc1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLkJ1bGtSZWFkSGFzaHRhZ3NSZXNwb25zZUVudGl0eVtdPignL2hhc2h0YWdzLycsIHsgcGFyYW1zLCByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRpbmcgYSBzaW5nbGUgSGFzaHRhZ1xuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEVuYWJsZXMgb25lIHRvIGNyZWF0ZSBhIHNpbmdsZSBIYXNodGFnIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVIYXNodGFnKGJvZHk6IFguQ3JlYXRlSGFzaHRhZ0JvZHkpOiBPYnNlcnZhYmxlPFguQ3JlYXRlSGFzaHRhZ1Jlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnBvc3Q8WC5DcmVhdGVIYXNodGFnUmVzcG9uc2U+KCcvaGFzaHRhZ3MvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmluZyBhIHNpbmdsZSBIYXNodGFnXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gZGV0YWNoIGEgc2luZ2xlIEhhc2h0YWcgaW5zdGFuY2UgZnJvbSBhIGxpc3QgY2FyZHMgZ2l2ZW4gYnkgYGNhcmRfaWRzYC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlSGFzaHRhZyhoYXNodGFnSWQ6IGFueSwgcGFyYW1zOiBYLkRlbGV0ZUhhc2h0YWdRdWVyeSk6IE9ic2VydmFibGU8WC5EZWxldGVIYXNodGFnUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAuZGVsZXRlPFguRGVsZXRlSGFzaHRhZ1Jlc3BvbnNlPihgL2hhc2h0YWdzLyR7aGFzaHRhZ0lkfWAsIHsgcGFyYW1zLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IEhhc2h0YWdzIFRPQ1xuICAgICAqIC0tLS0tLS0tLS0tLS1cbiAgICAgKlxuICAgICAqIEVuYWJsZXMgb25lIHRvIGxpc3QgSGFzaHRhZ3MgVGFibGUgb2YgQ29udGVudHMgbWFkZSBvdXQgb2YgSGFzaHRhZ3MuIE5vdGU6IEN1cnJlbnRseSB0aGlzIGVuZHBvaW50IHJldHVybnMgb25seSBhIGZsYXQgbGlzdCBvZiBoYXNodGFncyB3aXRoIHRoZSBjb3VudCBvZiBDYXJkcyB3aXRoIHdoaWNoIHRoZXkncmUgYXR0YWNoZWQgdG8uIEluIHRoZSBmdXR1cmUgdGhvdWdoIG9uZSBjb3VsZCBwcm9wb3NlIGEgbWVjaGFuaXNtIHdoaWNoIGNvdWxkIGNhbGN1bGF0ZSBoaWVyYXJjaHkgYmV0d2VlbiB0aG9zZSBoYXNodGFncyAocGFyZW50IC0gY2hpbGQgcmVsYXRpb25zaGlwcykgYW5kIG9yZGVyaW5nIGJhc2VkIG9uIHRoZSBrbm93bGVkZ2UgZ3JpZCB0b3BvbG9neS4gSXQgYWNjZXB0cyB2YXJpb3VzIHF1ZXJ5IHBhcmFtZXRlcnMgc3VjaCBhczogLSBgbGltaXRgIC0gYG9mZnNldGBcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZEhhc2h0YWdzVG9jKHBhcmFtczogWC5SZWFkSGFzaHRhZ3NUb2NRdWVyeSk6IERhdGFTdGF0ZTxYLlJlYWRIYXNodGFnc1RvY1Jlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5SZWFkSGFzaHRhZ3NUb2NSZXNwb25zZT4oJy9oYXNodGFncy90b2MvJywgeyBwYXJhbXMsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHJlYWRIYXNodGFnc1RvYzIocGFyYW1zOiBYLlJlYWRIYXNodGFnc1RvY1F1ZXJ5KTogT2JzZXJ2YWJsZTxYLlJlYWRIYXNodGFnc1RvY1Jlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5SZWFkSGFzaHRhZ3NUb2NSZXNwb25zZT4oJy9oYXNodGFncy90b2MvJywgeyBwYXJhbXMsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGluZyBhIHNpbmdsZSBIYXNodGFnXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gdXBkYXRlIGEgc2luZ2xlIEhhc2h0YWcgaW5zdGFuY2Ugd2l0aCBhIGxpc3Qgb2YgYGNhcmRfaWRzYCB0byB3aGljaCBpdCBzaG91bGQgZ2V0IGF0dGFjaGVkIHRvLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVIYXNodGFnKGhhc2h0YWdJZDogYW55LCBib2R5OiBYLlVwZGF0ZUhhc2h0YWdCb2R5KTogT2JzZXJ2YWJsZTxYLlVwZGF0ZUhhc2h0YWdSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wdXQ8WC5VcGRhdGVIYXNodGFnUmVzcG9uc2U+KGAvaGFzaHRhZ3MvJHtoYXNodGFnSWR9YCwgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbn0iXX0=