/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * External Apps Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var ExternalAppsDomain = /** @class */ (function () {
    function ExternalAppsDomain(client) {
        this.client = client;
    }
    /**
     * Authorize a given external app token
     * -------------
     *
     * Can be called by the API Gateway in order to authorize every request using provided token. It must be used only for external app tokens, which are used by the external apps to make calls on behalf of a given user.
     */
    ExternalAppsDomain.prototype.authorizeExternalAppAuthToken = function () {
        return this.client
            .post('/external/auth_tokens/authorize/', {}, { authorizationRequired: false });
        // .pipe(filter(x => !_.isEmpty(x)));
    };
    /**
     * Read External App Configuration
     */
    ExternalAppsDomain.prototype.createExternalAppAuthToken = function (body) {
        return this.client
            .post('/external/auth_tokens/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Read External App configuration
     */
    ExternalAppsDomain.prototype.readExternalappconf = function (params) {
        return this.client.getDataState('/external/apps/', { params: params, authorizationRequired: true });
    };
    ExternalAppsDomain.prototype.readExternalappconf2 = function (params) {
        return this.client.get('/external/apps/', { params: params, authorizationRequired: true });
    };
    ExternalAppsDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExternalAppsDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return ExternalAppsDomain;
}());
export { ExternalAppsDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWxfYXBwcy5kb21haW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY29zcGhlcmUvY2xpZW50LyIsInNvdXJjZXMiOlsiZG9tYWlucy9leHRlcm5hbF9hcHBzL2V4dGVybmFsX2FwcHMuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksNEJBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOzs7OztPQUtHO0lBQ0ksMERBQTZCLEdBQXBDO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUEwQyxrQ0FBa0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ3hILHFDQUFxQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSx1REFBMEIsR0FBakMsVUFBa0MsSUFBc0M7UUFDcEUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUF1Qyx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUMzRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksZ0RBQW1CLEdBQTFCLFVBQTJCLE1BQWtDO1FBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBZ0MsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ILENBQUM7SUFFTSxpREFBb0IsR0FBM0IsVUFBNEIsTUFBa0M7UUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFnQyxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdEgsQ0FBQzs7Z0JBbENKLFVBQVU7Ozs7Z0JBTEYsYUFBYTs7SUF5Q3RCLHlCQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FuQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICogVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVELCBBTEwgTUFOVUFMIENIQU5HRVMgQ0FOIEJFXG4gICogT1ZFUldSSVRURU5cbiAgKi9cblxuLyoqXG4gKiBFeHRlcm5hbCBBcHBzIE1hbmFnZW1lbnQgRG9tYWluXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmltcG9ydCB7IENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuaW50ZXJmYWNlJztcblxuaW1wb3J0ICogYXMgWCBmcm9tICcuL2V4dGVybmFsX2FwcHMubW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV4dGVybmFsQXBwc0RvbWFpbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IENsaWVudFNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBBdXRob3JpemUgYSBnaXZlbiBleHRlcm5hbCBhcHAgdG9rZW5cbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBDYW4gYmUgY2FsbGVkIGJ5IHRoZSBBUEkgR2F0ZXdheSBpbiBvcmRlciB0byBhdXRob3JpemUgZXZlcnkgcmVxdWVzdCB1c2luZyBwcm92aWRlZCB0b2tlbi4gSXQgbXVzdCBiZSB1c2VkIG9ubHkgZm9yIGV4dGVybmFsIGFwcCB0b2tlbnMsIHdoaWNoIGFyZSB1c2VkIGJ5IHRoZSBleHRlcm5hbCBhcHBzIHRvIG1ha2UgY2FsbHMgb24gYmVoYWxmIG9mIGEgZ2l2ZW4gdXNlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXV0aG9yaXplRXh0ZXJuYWxBcHBBdXRoVG9rZW4oKTogT2JzZXJ2YWJsZTxYLkF1dGhvcml6ZUV4dGVybmFsQXBwQXV0aFRva2VuUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkF1dGhvcml6ZUV4dGVybmFsQXBwQXV0aFRva2VuUmVzcG9uc2U+KCcvZXh0ZXJuYWwvYXV0aF90b2tlbnMvYXV0aG9yaXplLycsIHt9LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogZmFsc2UgfSlcbiAgICAgICAgICAgIC8vIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIEV4dGVybmFsIEFwcCBDb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUV4dGVybmFsQXBwQXV0aFRva2VuKGJvZHk6IFguQ3JlYXRlRXh0ZXJuYWxBcHBBdXRoVG9rZW5Cb2R5KTogT2JzZXJ2YWJsZTxYLkNyZWF0ZUV4dGVybmFsQXBwQXV0aFRva2VuUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkNyZWF0ZUV4dGVybmFsQXBwQXV0aFRva2VuUmVzcG9uc2U+KCcvZXh0ZXJuYWwvYXV0aF90b2tlbnMvJywgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIEV4dGVybmFsIEFwcCBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRFeHRlcm5hbGFwcGNvbmYocGFyYW1zOiBYLlJlYWRFeHRlcm5hbGFwcGNvbmZRdWVyeSk6IERhdGFTdGF0ZTxYLlJlYWRFeHRlcm5hbGFwcGNvbmZSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguUmVhZEV4dGVybmFsYXBwY29uZlJlc3BvbnNlPignL2V4dGVybmFsL2FwcHMvJywgeyBwYXJhbXMsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHJlYWRFeHRlcm5hbGFwcGNvbmYyKHBhcmFtczogWC5SZWFkRXh0ZXJuYWxhcHBjb25mUXVlcnkpOiBPYnNlcnZhYmxlPFguUmVhZEV4dGVybmFsYXBwY29uZlJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5SZWFkRXh0ZXJuYWxhcHBjb25mUmVzcG9uc2U+KCcvZXh0ZXJuYWwvYXBwcy8nLCB7IHBhcmFtcywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxufSJdfQ==