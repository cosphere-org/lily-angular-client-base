/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Gossip Commands Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
var GossipDomain = /** @class */ (function () {
    function GossipDomain(client) {
        this.client = client;
    }
    /**
     * Bulk Read all supported spoken languages
     */
    GossipDomain.prototype.bulkReadSpeechLanguages = function () {
        return this.client.getDataState('/gossip/speech/languages/', { responseMap: 'data', authorizationRequired: true });
    };
    GossipDomain.prototype.bulkReadSpeechLanguages2 = function () {
        return this.client.get('/gossip/speech/languages/', { responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Bulk Read all supported voice languages
     */
    GossipDomain.prototype.bulkReadTextLanguages = function () {
        return this.client.getDataState('/gossip/text/languages/', { responseMap: 'data', authorizationRequired: true });
    };
    GossipDomain.prototype.bulkReadTextLanguages2 = function () {
        return this.client.get('/gossip/text/languages/', { responseMap: 'data', authorizationRequired: true });
    };
    /**
     * Detect spoken language
     */
    GossipDomain.prototype.detectSpeechLanguages = function (body) {
        return this.client
            .post('/gossip/speech/detect_languages/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    /**
     * Detect written language
     */
    GossipDomain.prototype.detectTextLanguages = function (body) {
        return this.client
            .post('/gossip/text/detect_languages/', body, { authorizationRequired: true })
            .pipe(filter(function (x) { return !_.isEmpty(x); }));
    };
    GossipDomain.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GossipDomain.ctorParameters = function () { return [
        { type: ClientService }
    ]; };
    return GossipDomain;
}());
export { GossipDomain };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29zc2lwLmRvbWFpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjb3NwaGVyZS9jbGllbnQvIiwic291cmNlcyI6WyJkb21haW5zL2dvc3NpcC9nb3NzaXAuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzlEO0lBRUksc0JBQW9CLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRTdDOztPQUVHO0lBQ0ksOENBQXVCLEdBQTlCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUE0QywyQkFBMkIsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsSyxDQUFDO0lBRU0sK0NBQXdCLEdBQS9CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUE0QywyQkFBMkIsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6SixDQUFDO0lBRUQ7O09BRUc7SUFDSSw0Q0FBcUIsR0FBNUI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQTBDLHlCQUF5QixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlKLENBQUM7SUFFTSw2Q0FBc0IsR0FBN0I7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQTBDLHlCQUF5QixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JKLENBQUM7SUFFRDs7T0FFRztJQUNJLDRDQUFxQixHQUE1QixVQUE2QixJQUFpQztRQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQWtDLGtDQUFrQyxFQUFFLElBQUksRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQ2hILElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSwwQ0FBbUIsR0FBMUIsVUFBMkIsSUFBK0I7UUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUFnQyxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1RyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBMUNKLFVBQVU7Ozs7Z0JBTEYsYUFBYTs7SUFpRHRCLG1CQUFDO0NBQUEsQUE1Q0QsSUE0Q0M7U0EzQ1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAqIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRCwgQUxMIE1BTlVBTCBDSEFOR0VTIENBTiBCRVxuICAqIE9WRVJXUklUVEVOXG4gICovXG5cbi8qKlxuICogR29zc2lwIENvbW1hbmRzIE1hbmFnZW1lbnQgRG9tYWluXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmltcG9ydCB7IENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuaW50ZXJmYWNlJztcblxuaW1wb3J0ICogYXMgWCBmcm9tICcuL2dvc3NpcC5tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR29zc2lwRG9tYWluIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogQ2xpZW50U2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgUmVhZCBhbGwgc3VwcG9ydGVkIHNwb2tlbiBsYW5ndWFnZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1JlYWRTcGVlY2hMYW5ndWFnZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRTcGVlY2hMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5CdWxrUmVhZFNwZWVjaExhbmd1YWdlc1Jlc3BvbnNlRW50aXR5W10+KCcvZ29zc2lwL3NwZWVjaC9sYW5ndWFnZXMvJywgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZFNwZWVjaExhbmd1YWdlczIoKTogT2JzZXJ2YWJsZTxYLkJ1bGtSZWFkU3BlZWNoTGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRTcGVlY2hMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPignL2dvc3NpcC9zcGVlY2gvbGFuZ3VhZ2VzLycsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgUmVhZCBhbGwgc3VwcG9ydGVkIHZvaWNlIGxhbmd1YWdlc1xuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZFRleHRMYW5ndWFnZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRUZXh0TGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRUZXh0TGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4oJy9nb3NzaXAvdGV4dC9sYW5ndWFnZXMvJywgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZFRleHRMYW5ndWFnZXMyKCk6IE9ic2VydmFibGU8WC5CdWxrUmVhZFRleHRMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZFRleHRMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPignL2dvc3NpcC90ZXh0L2xhbmd1YWdlcy8nLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3Qgc3Bva2VuIGxhbmd1YWdlXG4gICAgICovXG4gICAgcHVibGljIGRldGVjdFNwZWVjaExhbmd1YWdlcyhib2R5OiBYLkRldGVjdFNwZWVjaExhbmd1YWdlc0JvZHkpOiBPYnNlcnZhYmxlPFguRGV0ZWN0U3BlZWNoTGFuZ3VhZ2VzUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkRldGVjdFNwZWVjaExhbmd1YWdlc1Jlc3BvbnNlPignL2dvc3NpcC9zcGVlY2gvZGV0ZWN0X2xhbmd1YWdlcy8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVjdCB3cml0dGVuIGxhbmd1YWdlXG4gICAgICovXG4gICAgcHVibGljIGRldGVjdFRleHRMYW5ndWFnZXMoYm9keTogWC5EZXRlY3RUZXh0TGFuZ3VhZ2VzQm9keSk6IE9ic2VydmFibGU8WC5EZXRlY3RUZXh0TGFuZ3VhZ2VzUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkRldGVjdFRleHRMYW5ndWFnZXNSZXNwb25zZT4oJy9nb3NzaXAvdGV4dC9kZXRlY3RfbGFuZ3VhZ2VzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG59Il19