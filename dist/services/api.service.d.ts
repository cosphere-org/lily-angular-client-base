/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Facade API Service for all domains
 */
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { DataState } from './client.interface';
import * as X from '../domains/index';
export declare class APIService {
    private injector;
    constructor(injector: Injector);
    /**
     * Account Settings Management domain
     */
    private _account_settingsDomain;
    readonly account_settingsDomain: X.AccountSettingsDomain;
    readAccountsetting(): DataState<X.ReadAccountsettingResponse>;
    readAccountsetting2(): Observable<X.ReadAccountsettingResponse>;
    updateAccountsetting(body: X.UpdateAccountsettingBody): Observable<X.UpdateAccountsettingResponse>;
    /**
     * Accounts Management domain
     */
    private _accountsDomain;
    readonly accountsDomain: X.AccountsDomain;
    activateAccount(body: X.ActivateAccountBody): Observable<X.ActivateAccountResponse>;
    bulkReadAccounts(params: X.BulkReadAccountsQuery): DataState<X.BulkReadAccountsResponseEntity[]>;
    bulkReadAccounts2(params: X.BulkReadAccountsQuery): Observable<X.BulkReadAccountsResponseEntity[]>;
    changePassword(body: X.ChangePasswordBody): Observable<X.ChangePasswordResponse>;
    createAccount(body: X.CreateAccountBody): Observable<X.CreateAccountResponse>;
    readAccount(): DataState<X.ReadAccountResponse>;
    readAccount2(): Observable<X.ReadAccountResponse>;
    resetPassword(body: X.ResetPasswordBody): Observable<X.ResetPasswordResponse>;
    sendAccountActivationEmail(body: X.SendAccountActivationEmailBody): Observable<X.SendAccountActivationEmailResponse>;
    sendResetPasswordEmail(body: X.SendResetPasswordEmailBody): Observable<X.SendResetPasswordEmailResponse>;
    updateAccount(body: X.UpdateAccountBody): Observable<X.UpdateAccountResponse>;
    /**
     * Attempt Stats Management domain
     */
    private _attempt_statsDomain;
    readonly attempt_statsDomain: X.AttemptStatsDomain;
    bulkReadAttemptstats(params: X.BulkReadAttemptstatsQuery): DataState<X.BulkReadAttemptstatsResponse>;
    bulkReadAttemptstats2(params: X.BulkReadAttemptstatsQuery): Observable<X.BulkReadAttemptstatsResponse>;
    createAttemptstat(body: X.CreateAttemptstatBody): Observable<X.CreateAttemptstatResponse>;
    createExternalAttemptStat(body: X.CreateExternalAttemptStatBody): Observable<X.CreateExternalAttemptStatResponse>;
    /**
     * Attempts Management domain
     */
    private _attemptsDomain;
    readonly attemptsDomain: X.AttemptsDomain;
    bulkReadAttemptsByCards(cardId: any): DataState<X.BulkReadAttemptsByCardsResponseEntity[]>;
    bulkReadAttemptsByCards2(cardId: any): Observable<X.BulkReadAttemptsByCardsResponseEntity[]>;
    createAttempt(body: X.CreateAttemptBody): Observable<X.CreateAttemptResponse>;
    updateAttempt(attemptId: any, body: X.UpdateAttemptBody): Observable<X.UpdateAttemptResponse>;
    /**
     * Auth Tokens Management domain
     */
    private _auth_tokensDomain;
    readonly auth_tokensDomain: X.AuthTokensDomain;
    authorizeAuthToken(): Observable<X.AuthorizeAuthTokenResponse>;
    createAuthToken(body: X.CreateAuthTokenBody): Observable<X.CreateAuthTokenResponse>;
    createFacebookBasedAuthToken(body: X.CreateFacebookBasedAuthTokenBody): Observable<X.CreateFacebookBasedAuthTokenResponse>;
    createFacebookBasedMobileAuthToken(body: X.CreateFacebookBasedMobileAuthTokenBody): Observable<X.CreateFacebookBasedMobileAuthTokenResponse>;
    createGoogleBasedAuthToken(body: X.CreateGoogleBasedAuthTokenBody): Observable<X.CreateGoogleBasedAuthTokenResponse>;
    createGoogleBasedMobileAuthToken(body: X.CreateGoogleBasedMobileAuthTokenBody): Observable<X.CreateGoogleBasedMobileAuthTokenResponse>;
    updateAuthToken(): Observable<X.UpdateAuthTokenResponse>;
    /**
     * Bricks Management domain
     */
    private _bricksDomain;
    readonly bricksDomain: X.BricksDomain;
    bulkReadGameattempts(gameId: any): DataState<X.BulkReadGameattemptsResponseEntity[]>;
    bulkReadGameattempts2(gameId: any): Observable<X.BulkReadGameattemptsResponseEntity[]>;
    bulkReadGames(): DataState<X.BulkReadGamesResponseEntity[]>;
    bulkReadGames2(): Observable<X.BulkReadGamesResponseEntity[]>;
    createGame(body: X.CreateGameBody): Observable<X.CreateGameResponse>;
    createGameattempt(gameId: any, body: X.CreateGameattemptBody): Observable<X.CreateGameattemptResponse>;
    deleteGame(gameId: any): Observable<X.DeleteGameResponse>;
    readGame(gameId: any): DataState<X.ReadGameResponse>;
    readGame2(gameId: any): Observable<X.ReadGameResponse>;
    updateGame(gameId: any, body: X.UpdateGameBody): Observable<X.UpdateGameResponse>;
    /**
     * Cards Management domain
     */
    private _cardsDomain;
    readonly cardsDomain: X.CardsDomain;
    bulkDeleteCards(params: X.BulkDeleteCardsQuery): Observable<X.BulkDeleteCardsResponse>;
    bulkReadCards(params: X.BulkReadCardsQuery): DataState<X.BulkReadCardsResponseEntity[]>;
    bulkReadCards2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]>;
    createCard(body: X.CreateCardBody): Observable<X.CreateCardResponse>;
    readCard(cardId: any): DataState<X.ReadCardResponse>;
    readCard2(cardId: any): Observable<X.ReadCardResponse>;
    updateCard(cardId: any, body: X.UpdateCardBody): Observable<X.UpdateCardResponse>;
    /**
     * Categories Management domain
     */
    private _categoriesDomain;
    readonly categoriesDomain: X.CategoriesDomain;
    bulkReadCategories(): DataState<X.BulkReadCategoriesResponseEntity[]>;
    bulkReadCategories2(): Observable<X.BulkReadCategoriesResponseEntity[]>;
    /**
     * Contact Management domain
     */
    private _contactsDomain;
    readonly contactsDomain: X.ContactsDomain;
    createAnonymousContactAttempt(body: X.CreateAnonymousContactAttemptBody): Observable<X.CreateAnonymousContactAttemptResponse>;
    sendAuthenticatedContactMessage(body: X.SendAuthenticatedContactMessageBody): Observable<X.SendAuthenticatedContactMessageResponse>;
    verifyAnonymousContactAttempt(body: X.VerifyAnonymousContactAttemptBody): Observable<X.VerifyAnonymousContactAttemptResponse>;
    /**
     * Donations Management domain
     */
    private _donationsDomain;
    readonly donationsDomain: X.DonationsDomain;
    checkIfCanAttemptDonation(params: X.CheckIfCanAttemptDonationQuery): DataState<X.CheckIfCanAttemptDonationResponse>;
    checkIfCanAttemptDonation2(params: X.CheckIfCanAttemptDonationQuery): Observable<X.CheckIfCanAttemptDonationResponse>;
    createAnonymousDonation(body: X.CreateAnonymousDonationBody): Observable<X.CreateAnonymousDonationResponse>;
    createDonation(body: X.CreateDonationBody): Observable<X.CreateDonationResponse>;
    createDonationattempt(body: X.CreateDonationattemptBody): Observable<X.CreateDonationattemptResponse>;
    /**
     * External Apps Management domain
     */
    private _external_appsDomain;
    readonly external_appsDomain: X.ExternalAppsDomain;
    authorizeExternalAppAuthToken(): Observable<X.AuthorizeExternalAppAuthTokenResponse>;
    createExternalAppAuthToken(body: X.CreateExternalAppAuthTokenBody): Observable<X.CreateExternalAppAuthTokenResponse>;
    readExternalappconf(params: X.ReadExternalappconfQuery): DataState<X.ReadExternalappconfResponse>;
    readExternalappconf2(params: X.ReadExternalappconfQuery): Observable<X.ReadExternalappconfResponse>;
    /**
     * Focus Records Management domain
     */
    private _focus_recordsDomain;
    readonly focus_recordsDomain: X.FocusRecordsDomain;
    createFocusrecord(body: X.CreateFocusrecordBody): Observable<X.CreateFocusrecordResponse>;
    readFocusRecordSummary(): DataState<X.ReadFocusRecordSummaryResponse>;
    readFocusRecordSummary2(): Observable<X.ReadFocusRecordSummaryResponse>;
    /**
     * Fragment Hashtags Management domain
     */
    private _fragment_hashtagsDomain;
    readonly fragment_hashtagsDomain: X.FragmentHashtagsDomain;
    bulkReadFragmentHashtags(params: X.BulkReadFragmentHashtagsQuery): DataState<X.BulkReadFragmentHashtagsResponseEntity[]>;
    bulkReadFragmentHashtags2(params: X.BulkReadFragmentHashtagsQuery): Observable<X.BulkReadFragmentHashtagsResponseEntity[]>;
    bulkReadPublishedFragmentHashtags(params: X.BulkReadPublishedFragmentHashtagsQuery): DataState<X.BulkReadPublishedFragmentHashtagsResponseEntity[]>;
    bulkReadPublishedFragmentHashtags2(params: X.BulkReadPublishedFragmentHashtagsQuery): Observable<X.BulkReadPublishedFragmentHashtagsResponseEntity[]>;
    /**
     * Fragment Words Management domain
     */
    private _fragment_wordsDomain;
    readonly fragment_wordsDomain: X.FragmentWordsDomain;
    bulkReadFragmentWords(params: X.BulkReadFragmentWordsQuery): DataState<X.BulkReadFragmentWordsResponseEntity[]>;
    bulkReadFragmentWords2(params: X.BulkReadFragmentWordsQuery): Observable<X.BulkReadFragmentWordsResponseEntity[]>;
    bulkReadPublishedFragmentWords(params: X.BulkReadPublishedFragmentWordsQuery): DataState<X.BulkReadPublishedFragmentWordsResponseEntity[]>;
    bulkReadPublishedFragmentWords2(params: X.BulkReadPublishedFragmentWordsQuery): Observable<X.BulkReadPublishedFragmentWordsResponseEntity[]>;
    /**
     * Fragments Management domain
     */
    private _fragmentsDomain;
    readonly fragmentsDomain: X.FragmentsDomain;
    bulkReadFragments(params: X.BulkReadFragmentsQuery): DataState<X.BulkReadFragmentsResponseEntity[]>;
    bulkReadFragments2(params: X.BulkReadFragmentsQuery): Observable<X.BulkReadFragmentsResponseEntity[]>;
    bulkReadPublishedFragments(params: X.BulkReadPublishedFragmentsQuery): DataState<X.BulkReadPublishedFragmentsResponseEntity[]>;
    bulkReadPublishedFragments2(params: X.BulkReadPublishedFragmentsQuery): Observable<X.BulkReadPublishedFragmentsResponseEntity[]>;
    createFragment(): Observable<X.CreateFragmentResponse>;
    deleteFragment(fragmentId: any): Observable<X.DeleteFragmentResponse>;
    mergeFragment(fragmentId: any): Observable<X.MergeFragmentResponse>;
    publishFragment(fragmentId: any): Observable<X.PublishFragmentResponse>;
    readFragment(fragmentId: any): DataState<X.ReadFragmentResponse>;
    readFragment2(fragmentId: any): Observable<X.ReadFragmentResponse>;
    readFragmentDiff(fragmentId: any): DataState<X.ReadFragmentDiffResponse>;
    readFragmentDiff2(fragmentId: any): Observable<X.ReadFragmentDiffResponse>;
    readFragmentSample(fragmentId: any): DataState<X.ReadFragmentSampleResponse>;
    readFragmentSample2(fragmentId: any): Observable<X.ReadFragmentSampleResponse>;
    updateFragment(fragmentId: any, body: X.UpdateFragmentBody): Observable<X.UpdateFragmentResponse>;
    /**
     * Geometries Management domain
     */
    private _geometriesDomain;
    readonly geometriesDomain: X.GeometriesDomain;
    bulkReadGeometries(params: X.BulkReadGeometriesQuery): DataState<X.BulkReadGeometriesResponseEntity[]>;
    bulkReadGeometries2(params: X.BulkReadGeometriesQuery): Observable<X.BulkReadGeometriesResponseEntity[]>;
    bulkUpdateGeometries(body: X.BulkUpdateGeometriesBody): Observable<X.BulkUpdateGeometriesResponse>;
    readGeometryByCard(cardId: any): DataState<X.ReadGeometryByCardResponse>;
    readGeometryByCard2(cardId: any): Observable<X.ReadGeometryByCardResponse>;
    readGraph(params: X.ReadGraphQuery): DataState<X.ReadGraphResponse>;
    readGraph2(params: X.ReadGraphQuery): Observable<X.ReadGraphResponse>;
    /**
     * Gossip Commands Management domain
     */
    private _gossipDomain;
    readonly gossipDomain: X.GossipDomain;
    bulkReadSpeechLanguages(): DataState<X.BulkReadSpeechLanguagesResponseEntity[]>;
    bulkReadSpeechLanguages2(): Observable<X.BulkReadSpeechLanguagesResponseEntity[]>;
    bulkReadTextLanguages(): DataState<X.BulkReadTextLanguagesResponseEntity[]>;
    bulkReadTextLanguages2(): Observable<X.BulkReadTextLanguagesResponseEntity[]>;
    detectSpeechLanguages(body: X.DetectSpeechLanguagesBody): Observable<X.DetectSpeechLanguagesResponse>;
    detectTextLanguages(body: X.DetectTextLanguagesBody): Observable<X.DetectTextLanguagesResponse>;
    /**
     * Hashtags Management domain
     */
    private _hashtagsDomain;
    readonly hashtagsDomain: X.HashtagsDomain;
    bulkReadHashtags(params: X.BulkReadHashtagsQuery): DataState<X.BulkReadHashtagsResponseEntity[]>;
    bulkReadHashtags2(params: X.BulkReadHashtagsQuery): Observable<X.BulkReadHashtagsResponseEntity[]>;
    createHashtag(body: X.CreateHashtagBody): Observable<X.CreateHashtagResponse>;
    deleteHashtag(hashtagId: any, params: X.DeleteHashtagQuery): Observable<X.DeleteHashtagResponse>;
    readHashtagsToc(params: X.ReadHashtagsTocQuery): DataState<X.ReadHashtagsTocResponse>;
    readHashtagsToc2(params: X.ReadHashtagsTocQuery): Observable<X.ReadHashtagsTocResponse>;
    updateHashtag(hashtagId: any, body: X.UpdateHashtagBody): Observable<X.UpdateHashtagResponse>;
    /**
     * Invoice Management domain
     */
    private _invoicesDomain;
    readonly invoicesDomain: X.InvoicesDomain;
    bulkReadInvoices(): DataState<X.BulkReadInvoicesResponseEntity[]>;
    bulkReadInvoices2(): Observable<X.BulkReadInvoicesResponseEntity[]>;
    calculateDebt(): DataState<X.CalculateDebtResponse>;
    calculateDebt2(): Observable<X.CalculateDebtResponse>;
    /**
     * Links Management domain
     */
    private _linksDomain;
    readonly linksDomain: X.LinksDomain;
    deleteLink(fromCardId: any, toCardId: any): Observable<X.DeleteLinkResponse>;
    readOrCreateLink(body: X.ReadOrCreateLinkBody): Observable<X.ReadOrCreateLinkResponse>;
    /**
     * MediaItems Management domain
     */
    private _mediaitemsDomain;
    readonly mediaitemsDomain: X.MediaitemsDomain;
    bulkReadMediaitems(params: X.BulkReadMediaitemsQuery): DataState<X.BulkReadMediaitemsResponseEntity[]>;
    bulkReadMediaitems2(params: X.BulkReadMediaitemsQuery): Observable<X.BulkReadMediaitemsResponseEntity[]>;
    deleteMediaitem(mediaitemId: any, params: X.DeleteMediaitemQuery): Observable<X.DeleteMediaitemResponse>;
    readMediaitem(mediaitemId: any): DataState<X.ReadMediaitemResponse>;
    readMediaitem2(mediaitemId: any): Observable<X.ReadMediaitemResponse>;
    readMediaitemByProcessId(): DataState<X.ReadMediaitemByProcessIdResponse>;
    readMediaitemByProcessId2(): Observable<X.ReadMediaitemByProcessIdResponse>;
    readOrCreateMediaitem(body: X.ReadOrCreateMediaitemBody): Observable<X.ReadOrCreateMediaitemResponse>;
    updateMediaitem(mediaitemId: any, body: X.UpdateMediaitemBody): Observable<X.UpdateMediaitemResponse>;
    updateMediaitemRepresentation(mediaitemId: any, body: X.UpdateMediaitemRepresentationBody): Observable<X.UpdateMediaitemRepresentationResponse>;
    /**
     * Notification Management domain
     */
    private _notificationsDomain;
    readonly notificationsDomain: X.NotificationsDomain;
    acknowledgeNotification(notificationId: any): Observable<X.AcknowledgeNotificationResponse>;
    bulkReadNotifications(params: X.BulkReadNotificationsQuery): DataState<X.BulkReadNotificationsResponseEntity[]>;
    bulkReadNotifications2(params: X.BulkReadNotificationsQuery): Observable<X.BulkReadNotificationsResponseEntity[]>;
    /**
     * Nouns Management domain
     */
    private _nounsDomain;
    readonly nounsDomain: X.NounsDomain;
    bulkReadIcons(params: X.BulkReadIconsQuery): DataState<X.BulkReadIconsResponseEntity[]>;
    bulkReadIcons2(params: X.BulkReadIconsQuery): Observable<X.BulkReadIconsResponseEntity[]>;
    /**
     * Paths Management domain
     */
    private _pathsDomain;
    readonly pathsDomain: X.PathsDomain;
    bulkDeletePaths(params: X.BulkDeletePathsQuery): Observable<X.BulkDeletePathsResponse>;
    bulkReadPaths(params: X.BulkReadPathsQuery): DataState<X.BulkReadPathsResponseEntity[]>;
    bulkReadPaths2(params: X.BulkReadPathsQuery): Observable<X.BulkReadPathsResponseEntity[]>;
    createPath(body: X.CreatePathBody): Observable<X.CreatePathResponse>;
    readPath(pathId: any): DataState<X.ReadPathResponse>;
    readPath2(pathId: any): Observable<X.ReadPathResponse>;
    updatePath(pathId: any, body: X.UpdatePathBody): Observable<X.UpdatePathResponse>;
    /**
     * Payment Cards Management domain
     */
    private _payment_cardsDomain;
    readonly payment_cardsDomain: X.PaymentCardsDomain;
    asDefaultMarkPaymentcard(paymentCardId: any): Observable<X.AsDefaultMarkPaymentcardResponse>;
    bulkReadPaymentcards(): DataState<X.BulkReadPaymentcardsResponseEntity[]>;
    bulkReadPaymentcards2(): Observable<X.BulkReadPaymentcardsResponseEntity[]>;
    createPaymentcard(body: X.CreatePaymentcardBody): Observable<X.CreatePaymentcardResponse>;
    deletePaymentcard(paymentCardId: any): Observable<X.DeletePaymentcardResponse>;
    payWithDefaultPaymentCard(body: X.PayWithDefaultPaymentCardBody): Observable<X.PayWithDefaultPaymentCardResponse>;
    renderPaymentCardWidget(): DataState<X.RenderPaymentCardWidgetResponse>;
    renderPaymentCardWidget2(): Observable<X.RenderPaymentCardWidgetResponse>;
    /**
     * Payments Management domain
     */
    private _paymentsDomain;
    readonly paymentsDomain: X.PaymentsDomain;
    updatePaymentStatus(body: X.UpdatePaymentStatusBody): Observable<X.UpdatePaymentStatusResponse>;
    /**
     * Processes Management domain
     */
    private _processesDomain;
    readonly processesDomain: X.ProcessesDomain;
    createDeletionProcess(body: X.CreateDeletionProcessBody): Observable<X.CreateDeletionProcessResponse>;
    createDownloadProcess(body: X.CreateDownloadProcessBody): Observable<X.CreateDownloadProcessResponse>;
    createMediaLock(body: X.CreateMediaLockBody): Observable<X.CreateMediaLockResponse>;
    createUploadProcess(body: X.CreateUploadProcessBody): Observable<X.CreateUploadProcessResponse>;
    readInvariants(params: X.ReadInvariantsQuery): DataState<X.ReadInvariantsResponse>;
    readInvariants2(params: X.ReadInvariantsQuery): Observable<X.ReadInvariantsResponse>;
    readProcessState(params: X.ReadProcessStateQuery): DataState<X.ReadProcessStateResponse>;
    readProcessState2(params: X.ReadProcessStateQuery): Observable<X.ReadProcessStateResponse>;
    signProcess(params: X.SignProcessQuery): DataState<X.SignProcessResponse>;
    signProcess2(params: X.SignProcessQuery): Observable<X.SignProcessResponse>;
    watchConversionStatus(waiterId: any, params: X.WatchConversionStatusQuery): DataState<X.WatchConversionStatusResponse>;
    watchConversionStatus2(waiterId: any, params: X.WatchConversionStatusQuery): Observable<X.WatchConversionStatusResponse>;
    /**
     * Quizzer Entities Management domain
     */
    private _quizzerDomain;
    readonly quizzerDomain: X.QuizzerDomain;
    bulkReadQuizattempts(quizId: any): DataState<X.BulkReadQuizattemptsResponseEntity[]>;
    bulkReadQuizattempts2(quizId: any): Observable<X.BulkReadQuizattemptsResponseEntity[]>;
    bulkReadQuizzes(): DataState<X.BulkReadQuizzesResponseEntity[]>;
    bulkReadQuizzes2(): Observable<X.BulkReadQuizzesResponseEntity[]>;
    createQuiz(body: X.CreateQuizBody): Observable<X.CreateQuizResponse>;
    createQuizattempt(quizId: any, body: X.CreateQuizattemptBody): Observable<X.CreateQuizattemptResponse>;
    deleteQuiz(quizId: any): Observable<X.DeleteQuizResponse>;
    readQuiz(quizId: any): DataState<X.ReadQuizResponse>;
    readQuiz2(quizId: any): Observable<X.ReadQuizResponse>;
    updateQuiz(quizId: any, body: X.UpdateQuizBody): Observable<X.UpdateQuizResponse>;
    /**
     * Recall Management domain
     */
    private _recallDomain;
    readonly recallDomain: X.RecallDomain;
    createRecallSession(body: X.CreateRecallSessionBody): Observable<X.CreateRecallSessionResponse>;
    readRecallSummary(): DataState<X.ReadRecallSummaryResponse>;
    readRecallSummary2(): Observable<X.ReadRecallSummaryResponse>;
    /**
     * Subscription Management domain
     */
    private _subscriptionsDomain;
    readonly subscriptionsDomain: X.SubscriptionsDomain;
    changeSubscription(body: X.ChangeSubscriptionBody): Observable<X.ChangeSubscriptionResponse>;
    /**
     * Tasks Management domain
     */
    private _tasksDomain;
    readonly tasksDomain: X.TasksDomain;
    bulkReadTasks(params: X.BulkReadTasksQuery): DataState<X.BulkReadTasksResponseEntity[]>;
    bulkReadTasks2(params: X.BulkReadTasksQuery): Observable<X.BulkReadTasksResponseEntity[]>;
    bulkReadTaskBins(params: X.BulkReadTaskBinsQuery): DataState<X.BulkReadTaskBinsResponseEntity[]>;
    bulkReadTaskBins2(params: X.BulkReadTaskBinsQuery): Observable<X.BulkReadTaskBinsResponseEntity[]>;
    /**
     * Words Management domain
     */
    private _wordsDomain;
    readonly wordsDomain: X.WordsDomain;
    bulkReadWords(params: X.BulkReadWordsQuery): DataState<X.BulkReadWordsResponseEntity[]>;
    bulkReadWords2(params: X.BulkReadWordsQuery): Observable<X.BulkReadWordsResponseEntity[]>;
}
