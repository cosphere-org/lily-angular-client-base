{"version":3,"file":"cosphere-client.js.map","sources":["ng://@cosphere/client/services/client.service.ts","ng://@cosphere/client/domains/account_settings/account_settings.domain.ts","ng://@cosphere/client/domains/accounts/accounts.domain.ts","ng://@cosphere/client/domains/accounts/accounts.models.ts","ng://@cosphere/client/domains/attempt_stats/attempt_stats.domain.ts","ng://@cosphere/client/domains/attempts/attempts.domain.ts","ng://@cosphere/client/domains/auth_tokens/auth_tokens.domain.ts","ng://@cosphere/client/domains/cards/cards.domain.ts","ng://@cosphere/client/domains/categories/categories.domain.ts","ng://@cosphere/client/domains/categories/categories.models.ts","ng://@cosphere/client/domains/contacts/contacts.domain.ts","ng://@cosphere/client/domains/donations/donations.domain.ts","ng://@cosphere/client/domains/donations/donations.models.ts","ng://@cosphere/client/domains/external_apps/external_apps.domain.ts","ng://@cosphere/client/domains/focus_records/focus_records.domain.ts","ng://@cosphere/client/domains/fragment_hashtags/fragment_hashtags.domain.ts","ng://@cosphere/client/domains/fragment_words/fragment_words.domain.ts","ng://@cosphere/client/domains/fragments/fragments.domain.ts","ng://@cosphere/client/domains/geometries/geometries.domain.ts","ng://@cosphere/client/domains/hashtags/hashtags.domain.ts","ng://@cosphere/client/domains/internal/internal.domain.ts","ng://@cosphere/client/domains/invoices/invoices.domain.ts","ng://@cosphere/client/domains/invoices/invoices.models.ts","ng://@cosphere/client/domains/links/links.domain.ts","ng://@cosphere/client/domains/links/links.models.ts","ng://@cosphere/client/domains/mediaitems/mediaitems.domain.ts","ng://@cosphere/client/domains/notifications/notifications.domain.ts","ng://@cosphere/client/domains/notifications/notifications.models.ts","ng://@cosphere/client/domains/paths/paths.domain.ts","ng://@cosphere/client/domains/payment_cards/payment_cards.domain.ts","ng://@cosphere/client/domains/payment_cards/payment_cards.models.ts","ng://@cosphere/client/domains/payments/payments.domain.ts","ng://@cosphere/client/domains/recall/recall.domain.ts","ng://@cosphere/client/domains/subscriptions/subscriptions.domain.ts","ng://@cosphere/client/domains/subscriptions/subscriptions.models.ts","ng://@cosphere/client/domains/tasks/tasks.domain.ts","ng://@cosphere/client/domains/tasks/tasks.models.ts","ng://@cosphere/client/domains/words/words.domain.ts","ng://@cosphere/client/services/api.service.ts","ng://@cosphere/client/cosphere-client.module.ts","ng://@cosphere/client/cosphere-client.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpClient,\n  HttpParams,\n  HttpHeaders,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { BehaviorSubject, Subject, Observable, throwError } from 'rxjs';\nimport { catchError, retry, map } from 'rxjs/operators';\nimport * as _ from 'underscore';\n\nimport { Config } from './config.service';\nimport { Options, State, DataState, RequestState } from './client.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  /**\n   * State for all GET payloads\n   */\n  state = new Map<string, State<any>>();\n\n  readonly baseUrl: string;\n  readonly authToken: string;\n\n  private readonly defaultAuthToken: string = 'auth_token';\n\n  /**\n   * Cache time - every GET request is taken only if the last one\n   * was invoked not earlier then `cacheTime` mins ago.\n   * Only successful responses are cached (2xx)\n   */\n  private readonly cacheTime = 1000 * 60 * 60; // 60 mins\n\n  constructor(@Inject('config') private config: Config, private http: HttpClient) {\n    this.baseUrl = this.config.baseUrl;\n    this.authToken =\n      this.config.authToken || this.defaultAuthToken;\n  }\n\n  get<T>(endpoint: string, options?: Options): Observable<T> {\n    const url = this.getUrl(endpoint);\n    const httpOptions = this.getHttpOptions(options);\n    return this.http\n      .get(url, httpOptions)\n      .pipe(retry(3), catchError(this.handleError)) as Observable<T>;\n  }\n\n  post<T>(endpoint: string, body: any, options?: Options): Observable<T> {\n    const url = this.getUrl(endpoint);\n    const httpOptions = this.getHttpOptions(options);\n    return this.http\n      .post(url, body, httpOptions)\n      .pipe(retry(3), catchError(this.handleError)) as Observable<T>;\n  }\n\n  put<T>(endpoint: string, body: any, options?: Options): Observable<T> {\n    const url = this.getUrl(endpoint);\n    const httpOptions = this.getHttpOptions(options);\n    return this.http\n      .put(url, body, httpOptions)\n      .pipe(retry(3), catchError(this.handleError)) as Observable<T>;\n  }\n\n  delete<T>(endpoint: string, options?: Options): Observable<T> {\n    const url = this.getUrl(endpoint);\n    const httpOptions = this.getHttpOptions(options);\n    return this.http\n      .delete(url, httpOptions)\n      .pipe(retry(3), catchError(this.handleError)) as Observable<T>;\n  }\n\n  getDataState<T>(endpoint: string, options?: Options): DataState<T> {\n    const key = options && options.params ? `${endpoint}_${JSON.stringify(options.params)}` : endpoint;\n    this.initState(key, options);\n\n    let cache = true;\n    let params: HttpParams | { [param: string]: string | string[] };\n\n    if (_.has(options, 'cache')) {\n      cache = options.cache;\n    }\n\n    if (_.has(options, 'params')) {\n      params = options.params;\n    }\n\n    // Get the endpoint state\n    const state = this.state.get(key);\n\n    // Do not allow invoke the same GET request while one is pending\n    if (state.requestState.pending /*&& !_.isEmpty(params)*/) {\n      return state.dataState;\n    }\n\n    const currentTime = +new Date();\n    if (\n      currentTime - state.requestState.cachedAt > this.cacheTime ||\n      // !_.isEmpty(params) ||\n      !cache\n    ) {\n      state.requestState.pending = true;\n      this.get(endpoint, options)\n        .pipe(\n          map(data => (options.responseMap ? data[options.responseMap] : data))\n        )\n        .subscribe(\n          data => {\n            state.dataState.data$.next(data);\n            state.dataState.isData$.next(!_.isEmpty(data));\n            state.dataState.loading$.next(false);\n            state.requestState.pending = false;\n            state.requestState.cachedAt = currentTime;\n          },\n          err => {\n            state.dataState.isData$.next(false);\n            state.dataState.data$.error(null);\n            state.dataState.loading$.next(false);\n            state.requestState.pending = false;\n          }\n        );\n    } else {\n      state.dataState.loading$.next(false);\n    }\n\n    return state.dataState;\n  }\n\n  private initState(key: string, options?: Options): void {\n    if (!this.state.has(key)) {\n      this.state.set(key, {\n        dataState: {\n          loading$: new BehaviorSubject(true),\n          isData$: new BehaviorSubject(false),\n          data$: new BehaviorSubject(null)\n        },\n        requestState: {\n          cachedAt: 0,\n          pending: false\n        }\n      });\n    } else {\n      this.state.get(key).dataState.loading$.next(true);\n    }\n  }\n\n  private getHttpOptions(\n    options?: Options\n  ): {\n    params?: HttpParams | { [param: string]: string | string[] };\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n  } {\n    const authorizationRequired = _.has(options, 'authorizationRequired')\n      ? options.authorizationRequired\n      : true;\n    const etag = (options && options.etag) || undefined;\n\n    let httpOptions: {\n      params?: HttpParams | { [param: string]: string | string[] };\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      reportProgress?: boolean;\n    } = {\n      headers: this.getHeaders(authorizationRequired, etag)\n    };\n\n    if (_.has(options, 'headers')) {\n      // tslint:disable\n      for (let key in options.headers) {\n        httpOptions.headers[key] = (<any>options).headers[key];\n      }\n      // tslint:enable\n    }\n\n    if (_.has(options, 'params')) {\n      httpOptions.params = options.params;\n    }\n\n    if (_.has(options, 'reportProgress')) {\n      httpOptions.reportProgress = options.reportProgress;\n    }\n\n    return httpOptions;\n  }\n\n  private getHeaders(\n    authorizationRequired: boolean,\n    etag?: string\n  ): { [key: string]: string } {\n    let headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (authorizationRequired) {\n      headers['Authorization'] = `Bearer ${this.getToken()}`;\n    }\n\n    if (etag) {\n      headers['ETag'] = etag;\n    }\n\n    return headers;\n  }\n\n  private getUrl(endpoint: string): string {\n    return `${this.baseUrl}${endpoint}`;\n  }\n\n  private getToken(): string {\n    return localStorage.getItem(this.authToken);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\n      );\n    }\n\n    // return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  }\n}\n","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Account Settings Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './account_settings.models';\n\n@Injectable()\nexport class AccountSettingsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Read Account Settings\n     */\n    public readAccountsetting(): DataState<X.ReadAccountsettingResponse> {\n        return this.client.getDataState<X.ReadAccountsettingResponse>('/account/settings/', { authorizationRequired: true });\n    }\n    \n    public readAccountsetting2(): Observable<X.ReadAccountsettingResponse> {\n        return this.client.get<X.ReadAccountsettingResponse>('/account/settings/', { authorizationRequired: true });\n    }\n\n    /**\n     * Update Account Settings\n     */\n    public updateAccountsetting(body: X.UpdateAccountsettingBody): Observable<X.UpdateAccountsettingResponse> {\n        return this.client\n            .put<X.UpdateAccountsettingResponse>('/account/settings/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Accounts Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './accounts.models';\n\n@Injectable()\nexport class AccountsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Activate Account\n     * -------------\n     *\n     * Activate Account by decoding the `code` which contains the confirmation off the intent and was signed by the user itself.\n     */\n    public activateAccount(body: X.ActivateAccountBody): Observable<X.ActivateAccountResponse> {\n        return this.client\n            .post<X.ActivateAccountResponse>('/auth/activate/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Bulk Read Mentors' Account\n     * -------------\n     *\n     * Enable one to Read all available Mentor accounts\n     */\n    public bulkReadAccounts(params: X.BulkReadAccountsQuery): DataState<X.BulkReadAccountsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadAccountsResponseEntity[]>('/auth/accounts/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadAccounts2(params: X.BulkReadAccountsQuery): Observable<X.BulkReadAccountsResponseEntity[]> {\n        return this.client.get<X.BulkReadAccountsResponseEntity[]>('/auth/accounts/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * Change Password\n     * -------------\n     *\n     * Enables one to change one's password for an authenticated user.\n     */\n    public changePassword(body: X.ChangePasswordBody): Observable<X.ChangePasswordResponse> {\n        return this.client\n            .post<X.ChangePasswordResponse>('/auth/change_password/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create Account\n     * -------------\n     *\n     * Creates User and Account if provided data are valid.\n     */\n    public createAccount(body: X.CreateAccountBody): Observable<X.CreateAccountResponse> {\n        return this.client\n            .post<X.CreateAccountResponse>('/auth/accounts/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read My Account\n     * -------------\n     *\n     * Read my Account data.\n     */\n    public readAccount(): DataState<X.ReadAccountResponse> {\n        return this.client.getDataState<X.ReadAccountResponse>('/auth/accounts/me/', { authorizationRequired: true });\n    }\n    \n    public readAccount2(): Observable<X.ReadAccountResponse> {\n        return this.client.get<X.ReadAccountResponse>('/auth/accounts/me/', { authorizationRequired: true });\n    }\n\n    /**\n     * Reset Password\n     * -------------\n     *\n     * Enables one to reset her password in case the old one cannot be recalled.\n     */\n    public resetPassword(body: X.ResetPasswordBody): Observable<X.ResetPasswordResponse> {\n        return this.client\n            .post<X.ResetPasswordResponse>('/auth/reset_password/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Send Account Activation Email\n     * -------------\n     *\n     * Send an Email containing the confirmation link which when clicked kicks of the Account Activation. Even though the activation email is send automatically during the Sign Up phase one should have a way to send it again in case it was not delivered.\n     */\n    public sendAccountActivationEmail(body: X.SendAccountActivationEmailBody): Observable<X.SendAccountActivationEmailResponse> {\n        return this.client\n            .post<X.SendAccountActivationEmailResponse>('/auth/send_activation_email/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Send Reset Password Email\n     * -------------\n     *\n     * Send an Email containing the confirmation link which when clicked kicks of the real Reset Password operation.\n     */\n    public sendResetPasswordEmail(body: X.SendResetPasswordEmailBody): Observable<X.SendResetPasswordEmailResponse> {\n        return this.client\n            .post<X.SendResetPasswordEmailResponse>('/auth/send_reset_password_email/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Update My Account\n     * -------------\n     *\n     * Update my Account data.\n     */\n    public updateAccount(body: X.UpdateAccountBody): Observable<X.UpdateAccountResponse> {\n        return this.client\n            .put<X.UpdateAccountResponse>('/auth/accounts/me/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Accounts Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/activate_account.py/#lines-91\n */\n\nexport interface ActivateAccountBody {\n    code: string;\n    email: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface ActivateAccountResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/account.py/#lines-178\n */\n\nexport interface BulkReadAccountsQuery {\n    user_ids: number[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/serializers.py/#lines-23\n */\n\nexport enum BulkReadAccountsResponseAtype {\n    ADMIN = 'ADMIN',\n    FREE = 'FREE',\n    LEARNER = 'LEARNER',\n    MENTOR = 'MENTOR',\n    PARTNER = 'PARTNER',\n}\n\nexport interface BulkReadAccountsResponseEntity {\n    atype?: BulkReadAccountsResponseAtype;\n    avatar_uri?: string;\n    show_in_ranking?: boolean;\n    user_id?: any;\n    username?: string;\n}\n\nexport interface BulkReadAccountsResponse {\n    data: BulkReadAccountsResponseEntity[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/change_password.py/#lines-24\n */\n\nexport interface ChangePasswordBody {\n    password: string;\n    password_again: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface ChangePasswordResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/account.py/#lines-114\n */\n\nexport interface CreateAccountBody {\n    email: string;\n    password: string;\n    password_again: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface CreateAccountResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/serializers.py/#lines-8\n */\n\nexport enum ReadAccountResponseAtype {\n    ADMIN = 'ADMIN',\n    FREE = 'FREE',\n    LEARNER = 'LEARNER',\n    MENTOR = 'MENTOR',\n    PARTNER = 'PARTNER',\n}\n\nexport interface ReadAccountResponse {\n    atype?: ReadAccountResponseAtype;\n    avatar_uri?: string;\n    show_in_ranking?: boolean;\n    user_id?: any;\n    username?: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/reset_password.py/#lines-94\n */\n\nexport interface ResetPasswordBody {\n    code: string;\n    email: string;\n    password: string;\n    password_again: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/serializers.py/#lines-30\n */\n\nexport interface ResetPasswordResponse {\n    token: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/activate_account.py/#lines-46\n */\n\nexport interface SendAccountActivationEmailBody {\n    email: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface SendAccountActivationEmailResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/reset_password.py/#lines-31\n */\n\nexport interface SendResetPasswordEmailBody {\n    email: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface SendResetPasswordEmailResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/views/account.py/#lines-58\n */\n\nexport interface UpdateAccountBody {\n    avatar_uri?: string;\n    show_in_ranking?: boolean;\n    username?: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/account/serializers.py/#lines-8\n */\n\nexport enum UpdateAccountResponseAtype {\n    ADMIN = 'ADMIN',\n    FREE = 'FREE',\n    LEARNER = 'LEARNER',\n    MENTOR = 'MENTOR',\n    PARTNER = 'PARTNER',\n}\n\nexport interface UpdateAccountResponse {\n    atype?: UpdateAccountResponseAtype;\n    avatar_uri?: string;\n    show_in_ranking?: boolean;\n    user_id?: any;\n    username?: string;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Attempt Stats Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './attempt_stats.models';\n\n@Injectable()\nexport class AttemptStatsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Attempt Stats\n     * -------------\n     *\n     * List Attempt Stats by filtering existing ones.\n     */\n    public bulkReadAttemptstats(params: X.BulkReadAttemptstatsQuery): DataState<X.BulkReadAttemptstatsResponse> {\n        return this.client.getDataState<X.BulkReadAttemptstatsResponse>('/recall/attempt_stats/', { params, authorizationRequired: true });\n    }\n    \n    public bulkReadAttemptstats2(params: X.BulkReadAttemptstatsQuery): Observable<X.BulkReadAttemptstatsResponse> {\n        return this.client.get<X.BulkReadAttemptstatsResponse>('/recall/attempt_stats/', { params, authorizationRequired: true });\n    }\n\n    /**\n     * Create Attempt Stat\n     * -------------\n     *\n     * Create Attempt Stat which stores information about basis statistics of a particular recall attempt.\n     */\n    public createAttemptstat(body: X.CreateAttemptstatBody): Observable<X.CreateAttemptstatResponse> {\n        return this.client\n            .post<X.CreateAttemptstatResponse>('/recall/attempt_stats/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create External Attempt Stat\n     * -------------\n     *\n     * Create External Attempt Stat meaning one which was rendered elsewhere in any of the multiple CoSphere apps.\n     */\n    public createExternalAttemptStat(body: X.CreateExternalAttemptStatBody): Observable<X.CreateExternalAttemptStatResponse> {\n        return this.client\n            .post<X.CreateExternalAttemptStatResponse>('/recall/attempt_stats/external/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Attempts Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './attempts.models';\n\n@Injectable()\nexport class AttemptsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Attempts By Card\n     * -------------\n     *\n     * List Attempts for a specific Card given by its Id.\n     */\n    public bulkReadAttemptsByCards(cardId: any): DataState<X.BulkReadAttemptsByCardsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadAttemptsByCardsResponseEntity[]>(`/recall/attempts/by_card/${cardId}`, { responseMap: 'attempts', authorizationRequired: true });\n    }\n    \n    public bulkReadAttemptsByCards2(cardId: any): Observable<X.BulkReadAttemptsByCardsResponseEntity[]> {\n        return this.client.get<X.BulkReadAttemptsByCardsResponseEntity[]>(`/recall/attempts/by_card/${cardId}`, { responseMap: 'attempts', authorizationRequired: true });\n    }\n\n    /**\n     * Create Attempt\n     * -------------\n     *\n     * Create Attempt which is a reflection of someone's knowledge regarding a given Card.\n     */\n    public createAttempt(body: X.CreateAttemptBody): Observable<X.CreateAttemptResponse> {\n        return this.client\n            .post<X.CreateAttemptResponse>('/recall/attempts/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Update Attempt\n     * -------------\n     *\n     * Update existing Attempt with new cells and / or style.\n     */\n    public updateAttempt(attemptId: any, body: X.UpdateAttemptBody): Observable<X.UpdateAttemptResponse> {\n        return this.client\n            .put<X.UpdateAttemptResponse>(`/recall/attempts/${attemptId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Auth Tokens Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './auth_tokens.models';\n\n@Injectable()\nexport class AuthTokensDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Authorize a given token\n     * -------------\n     *\n     * Can be called by the API Gateway in order to authorize every request using provided token.\n     */\n    public authorizeAuthToken(): Observable<X.AuthorizeAuthTokenResponse> {\n        return this.client\n            .post<X.AuthorizeAuthTokenResponse>('/auth/auth_tokens/authorize/', {}, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Sign In\n     * -------------\n     *\n     * Validates data provided on the input and if successful returns auth token.\n     */\n    public createAuthToken(body: X.CreateAuthTokenBody): Observable<X.CreateAuthTokenResponse> {\n        return this.client\n            .post<X.CreateAuthTokenResponse>('/auth/auth_tokens/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create Facebook Auth Token\n     */\n    public createFacebookBasedAuthToken(body: X.CreateFacebookBasedAuthTokenBody): Observable<X.CreateFacebookBasedAuthTokenResponse> {\n        return this.client\n            .post<X.CreateFacebookBasedAuthTokenResponse>('/auth/auth_tokens/facebook/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create Mobile Facebook Auth Token\n     */\n    public createFacebookBasedMobileAuthToken(body: X.CreateFacebookBasedMobileAuthTokenBody): Observable<X.CreateFacebookBasedMobileAuthTokenResponse> {\n        return this.client\n            .post<X.CreateFacebookBasedMobileAuthTokenResponse>('/auth/auth_tokens/facebook/mobile/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create Google Auth Token\n     */\n    public createGoogleBasedAuthToken(body: X.CreateGoogleBasedAuthTokenBody): Observable<X.CreateGoogleBasedAuthTokenResponse> {\n        return this.client\n            .post<X.CreateGoogleBasedAuthTokenResponse>('/auth/auth_tokens/google/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create Mobile Google Auth Token\n     */\n    public createGoogleBasedMobileAuthToken(body: X.CreateGoogleBasedMobileAuthTokenBody): Observable<X.CreateGoogleBasedMobileAuthTokenResponse> {\n        return this.client\n            .post<X.CreateGoogleBasedMobileAuthTokenResponse>('/auth/auth_tokens/google/mobile/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Refresh JWT token\n     * -------------\n     *\n     * Should be used whenever token is close to expiry or if one is requested to refresh the token because for example account type was changed and new token should be requested to reflect that change.\n     */\n    public updateAuthToken(): Observable<X.UpdateAuthTokenResponse> {\n        return this.client\n            .put<X.UpdateAuthTokenResponse>('/auth/auth_tokens/', {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Cards Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './cards.models';\n\n@Injectable()\nexport class CardsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Remove Card\n     * -------------\n     *\n     * Remove list of Cards specified by their ids.\n     */\n    public bulkDeleteCards(params: X.BulkDeleteCardsQuery): Observable<X.BulkDeleteCardsResponse> {\n        return this.client\n            .delete<X.BulkDeleteCardsResponse>('/cards/', { params, authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Bulk Read Multiple Cards\n     * -------------\n     *\n     * List subset of Cards depending on various filtering flags.\n     */\n    public bulkReadCards(params: X.BulkReadCardsQuery): DataState<X.BulkReadCardsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });\n    }\n    \n    public bulkReadCards2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]> {\n        return this.client.get<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });\n    }\n    \n    public bulkReadGeometriesOnly2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]> {\n        return this.client.get<X.BulkReadCardsResponseEntity[]>('/cards/', { params, responseMap: 'cards', authorizationRequired: true });\n    }\n\n    /**\n     * Creating a single Card\n     * -------------\n     *\n     * Enables one to create a single Card instance.\n     */\n    public createCard(body: X.CreateCardBody): Observable<X.CreateCardResponse> {\n        return this.client\n            .post<X.CreateCardResponse>('/cards/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Card by Id\n     * -------------\n     *\n     * Read Card by `id`.\n     */\n    public readCard(cardId: any): DataState<X.ReadCardResponse> {\n        return this.client.getDataState<X.ReadCardResponse>(`/cards/${cardId}`, { authorizationRequired: true });\n    }\n    \n    public readCard2(cardId: any, params?: any): Observable<X.ReadCardResponse> {\n        return this.client.get<X.ReadCardResponse>(`/cards/${cardId}`, { params, authorizationRequired: true });\n    }\n\n    /**\n     * Creating a single Card\n     * -------------\n     *\n     * Enables one to create a single Card instance.\n     */\n    public updateCard(cardId: any, body: X.UpdateCardBody): Observable<X.UpdateCardResponse> {\n        return this.client\n            .put<X.UpdateCardResponse>(`/cards/${cardId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Categories Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './categories.models';\n\n@Injectable()\nexport class CategoriesDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Categories\n     * -------------\n     *\n     * List Categories.\n     */\n    public bulkReadCategories(): DataState<X.BulkReadCategoriesResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadCategoriesResponseEntity[]>('/categories/', { responseMap: 'categories', authorizationRequired: true });\n    }\n    \n    public bulkReadCategories2(): Observable<X.BulkReadCategoriesResponseEntity[]> {\n        return this.client.get<X.BulkReadCategoriesResponseEntity[]>('/categories/', { responseMap: 'categories', authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Categories Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/category/serializers.py/#lines-27\n */\n\nexport enum BulkReadCategoriesResponseText {\n    FORGOTTEN = 'FORGOTTEN',\n    HOT = 'HOT',\n    NOT_RECALLED = 'NOT_RECALLED',\n    PROBLEMATIC = 'PROBLEMATIC',\n    RECENTLY_ADDED = 'RECENTLY_ADDED',\n}\n\nexport interface BulkReadCategoriesResponseEntity {\n    count: number;\n    id?: number;\n    text: BulkReadCategoriesResponseText;\n}\n\nexport interface BulkReadCategoriesResponse {\n    data: BulkReadCategoriesResponseEntity[];\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Contact Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './contacts.models';\n\n@Injectable()\nexport class ContactsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Create Anonymous Contact Attempt\n     * -------------\n     *\n     * Enables one to send messages to CoSphere's support even if the sender is not authenticated.\n     */\n    public createAnonymousContactAttempt(body: X.CreateAnonymousContactAttemptBody): Observable<X.CreateAnonymousContactAttemptResponse> {\n        return this.client\n            .post<X.CreateAnonymousContactAttemptResponse>('/contacts/anonymous/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Send Authenticated Contact Message\n     * -------------\n     *\n     * Send the Contact Message immediately since it's already for an existing and authenticated user.\n     */\n    public sendAuthenticatedContactMessage(body: X.SendAuthenticatedContactMessageBody): Observable<X.SendAuthenticatedContactMessageResponse> {\n        return this.client\n            .post<X.SendAuthenticatedContactMessageResponse>('/contacts/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Verify the contact attempt\n     * -------------\n     *\n     * Verify the correctness of provided verification code and send the message to the CoSphere's support. This mechanism is used for anonymous users only.\n     */\n    public verifyAnonymousContactAttempt(body: X.VerifyAnonymousContactAttemptBody): Observable<X.VerifyAnonymousContactAttemptResponse> {\n        return this.client\n            .post<X.VerifyAnonymousContactAttemptResponse>('/contacts/anonymous/verify/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Donations Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './donations.models';\n\n@Injectable()\nexport class DonationsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Check if one can attempt a request displaying donation\n     * -------------\n     *\n     * Since we don't want to overflow user with unnecessary requests for him donating we do it in a smarter way using set of heuristics that together help us to answer the following question: \"Is it the best moment to ask for the donation?\". Currently we use the following heuristics: - is account old enough? - whether user recently donated - whether we attempted recently to request donation from the user - if the user in a good mood (after doing some successful recalls)\n     */\n    public checkIfCanAttemptDonation(params: X.CheckIfCanAttemptDonationQuery): DataState<X.CheckIfCanAttemptDonationResponse> {\n        return this.client.getDataState<X.CheckIfCanAttemptDonationResponse>('/payments/donations/can_attempt/', { params, authorizationRequired: true });\n    }\n    \n    public checkIfCanAttemptDonation2(params: X.CheckIfCanAttemptDonationQuery): Observable<X.CheckIfCanAttemptDonationResponse> {\n        return this.client.get<X.CheckIfCanAttemptDonationResponse>('/payments/donations/can_attempt/', { params, authorizationRequired: true });\n    }\n\n    /**\n     * Register anonymous donation\n     * -------------\n     *\n     * One can perform a donation payment even if not being an authenticated user. Even in that case we cannot allow full anonymity and we must require at least email address to send information regarding the status of the payment.\n     */\n    public createAnonymousDonation(body: X.CreateAnonymousDonationBody): Observable<X.CreateAnonymousDonationResponse> {\n        return this.client\n            .post<X.CreateAnonymousDonationResponse>('/payments/donations/register_anonymous/', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Register donation from authenticated user\n     * -------------\n     *\n     * One can perform a donation payment even as an authenticated user.\n     */\n    public createDonation(body: X.CreateDonationBody): Observable<X.CreateDonationResponse> {\n        return this.client\n            .post<X.CreateDonationResponse>('/payments/donations/register/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create donation attempt for authenticated user\n     * -------------\n     *\n     * Each Donation Attempt should be followed by creation of Donation Attempt model instance to reflect that fact. It allows one to track how many times we asked a certain user about the donation in order not to overflow that user with them and not to be too aggressive.\n     */\n    public createDonationattempt(body: X.CreateDonationattemptBody): Observable<X.CreateDonationattemptResponse> {\n        return this.client\n            .post<X.CreateDonationattemptResponse>('/payments/donations/attempts/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Donations Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/donation.py/#lines-30\n */\n\nexport enum CheckIfCanAttemptDonationQueryEvent {\n    CLOSE = 'CLOSE',\n    RECALL = 'RECALL',\n    START = 'START',\n}\n\nexport interface CheckIfCanAttemptDonationQuery {\n    event: CheckIfCanAttemptDonationQueryEvent;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/donation.py/#lines-34\n */\n\nexport interface CheckIfCanAttemptDonationResponse {\n    can_attempt: boolean;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/donation.py/#lines-184\n */\n\nexport interface CreateAnonymousDonationBody {\n    amount: number;\n    email: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/payment.py/#lines-9\n */\n\nexport enum CreateAnonymousDonationResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum CreateAnonymousDonationResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport enum CreateAnonymousDonationResponseStatus {\n    CANCELED = 'CANCELED',\n    COMPLETED = 'COMPLETED',\n    NEW = 'NEW',\n    PENDING = 'PENDING',\n    REJECTED = 'REJECTED',\n}\n\nexport interface CreateAnonymousDonationResponse {\n    amount: string;\n    created_timestamp: number;\n    display_amount: string;\n    product: {\n        currency?: CreateAnonymousDonationResponseCurrency;\n        display_price: string;\n        name: string;\n        price?: string;\n        product_type: CreateAnonymousDonationResponseProductType;\n    };\n    status?: CreateAnonymousDonationResponseStatus;\n    status_ledger?: Object;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/donation.py/#lines-184\n */\n\nexport interface CreateDonationBody {\n    amount: number;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/payment.py/#lines-9\n */\n\nexport enum CreateDonationResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum CreateDonationResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport enum CreateDonationResponseStatus {\n    CANCELED = 'CANCELED',\n    COMPLETED = 'COMPLETED',\n    NEW = 'NEW',\n    PENDING = 'PENDING',\n    REJECTED = 'REJECTED',\n}\n\nexport interface CreateDonationResponse {\n    amount: string;\n    created_timestamp: number;\n    display_amount: string;\n    product: {\n        currency?: CreateDonationResponseCurrency;\n        display_price: string;\n        name: string;\n        price?: string;\n        product_type: CreateDonationResponseProductType;\n    };\n    status?: CreateDonationResponseStatus;\n    status_ledger?: Object;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/donation.py/#lines-184\n */\n\nexport enum CreateDonationattemptBodyEvent {\n    CLOSE = 'CLOSE',\n    RECALL = 'RECALL',\n    START = 'START',\n}\n\nexport interface CreateDonationattemptBody {\n    event: CreateDonationattemptBodyEvent;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/donation.py/#lines-8\n */\n\nexport enum CreateDonationattemptResponseEvent {\n    CLOSE = 'CLOSE',\n    RECALL = 'RECALL',\n    START = 'START',\n}\n\nexport interface CreateDonationattemptResponse {\n    created_timestamp: number;\n    event: CreateDonationattemptResponseEvent;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * External Apps Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './external_apps.models';\n\n@Injectable()\nexport class ExternalAppsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Authorize a given external app token\n     * -------------\n     *\n     * Can be called by the API Gateway in order to authorize every request using provided token. It must be used only for external app tokens, which are used by the external apps to make calls on behalf of a given user.\n     */\n    public authorizeExternalAppAuthToken(): Observable<X.AuthorizeExternalAppAuthTokenResponse> {\n        return this.client\n            .post<X.AuthorizeExternalAppAuthTokenResponse>('/external/auth_tokens/authorize/', {}, { authorizationRequired: false })\n            // .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read External App Configuration\n     */\n    public createExternalAppAuthToken(body: X.CreateExternalAppAuthTokenBody): Observable<X.CreateExternalAppAuthTokenResponse> {\n        return this.client\n            .post<X.CreateExternalAppAuthTokenResponse>('/external/auth_tokens/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read External App configuration\n     */\n    public readExternalappconf(params: X.ReadExternalappconfQuery): DataState<X.ReadExternalappconfResponse> {\n        return this.client.getDataState<X.ReadExternalappconfResponse>('/external/apps/', { params, authorizationRequired: true });\n    }\n    \n    public readExternalappconf2(params: X.ReadExternalappconfQuery): Observable<X.ReadExternalappconfResponse> {\n        return this.client.get<X.ReadExternalappconfResponse>('/external/apps/', { params, authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Focus Records Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './focus_records.models';\n\n@Injectable()\nexport class FocusRecordsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Create Focus Record\n     */\n    public createFocusrecord(body: X.CreateFocusrecordBody): Observable<X.CreateFocusrecordResponse> {\n        return this.client\n            .post<X.CreateFocusrecordResponse>('/focus_records/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Focus Record Summary\n     */\n    public readFocusRecordSummary(): DataState<X.ReadFocusRecordSummaryResponse> {\n        return this.client.getDataState<X.ReadFocusRecordSummaryResponse>('/focus_records/summary/', { authorizationRequired: true });\n    }\n    \n    public readFocusRecordSummary2(): Observable<X.ReadFocusRecordSummaryResponse> {\n        return this.client.get<X.ReadFocusRecordSummaryResponse>('/focus_records/summary/', { authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Fragment Hashtags Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './fragment_hashtags.models';\n\n@Injectable()\nexport class FragmentHashtagsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Hashtags\n     * -------------\n     *\n     * List Hashtags\n     */\n    public bulkReadFragmentHashtags(params: X.BulkReadFragmentHashtagsQuery): DataState<X.BulkReadFragmentHashtagsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadFragmentHashtagsResponseEntity[]>('/fragments/hashtags/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadFragmentHashtags2(params: X.BulkReadFragmentHashtagsQuery): Observable<X.BulkReadFragmentHashtagsResponseEntity[]> {\n        return this.client.get<X.BulkReadFragmentHashtagsResponseEntity[]>('/fragments/hashtags/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * List Published Hashtags\n     * -------------\n     *\n     * List Published Hashtags\n     */\n    public bulkReadPublishedFragmentHashtags(params: X.BulkReadPublishedFragmentHashtagsQuery): DataState<X.BulkReadPublishedFragmentHashtagsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadPublishedFragmentHashtagsResponseEntity[]>('/fragments/hashtags/published/', { params, responseMap: 'data', authorizationRequired: false });\n    }\n    \n    public bulkReadPublishedFragmentHashtags2(params: X.BulkReadPublishedFragmentHashtagsQuery): Observable<X.BulkReadPublishedFragmentHashtagsResponseEntity[]> {\n        return this.client.get<X.BulkReadPublishedFragmentHashtagsResponseEntity[]>('/fragments/hashtags/published/', { params, responseMap: 'data', authorizationRequired: false });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Fragment Words Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './fragment_words.models';\n\n@Injectable()\nexport class FragmentWordsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Words\n     * -------------\n     *\n     * List Words\n     */\n    public bulkReadFragmentWords(params: X.BulkReadFragmentWordsQuery): DataState<X.BulkReadFragmentWordsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadFragmentWordsResponseEntity[]>('/fragments/words/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadFragmentWords2(params: X.BulkReadFragmentWordsQuery): Observable<X.BulkReadFragmentWordsResponseEntity[]> {\n        return this.client.get<X.BulkReadFragmentWordsResponseEntity[]>('/fragments/words/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * List Published Words\n     * -------------\n     *\n     * List Published Words\n     */\n    public bulkReadPublishedFragmentWords(params: X.BulkReadPublishedFragmentWordsQuery): DataState<X.BulkReadPublishedFragmentWordsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadPublishedFragmentWordsResponseEntity[]>('/fragments/words/published/', { params, responseMap: 'data', authorizationRequired: false });\n    }\n    \n    public bulkReadPublishedFragmentWords2(params: X.BulkReadPublishedFragmentWordsQuery): Observable<X.BulkReadPublishedFragmentWordsResponseEntity[]> {\n        return this.client.get<X.BulkReadPublishedFragmentWordsResponseEntity[]>('/fragments/words/published/', { params, responseMap: 'data', authorizationRequired: false });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Fragments Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './fragments.models';\n\n@Injectable()\nexport class FragmentsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Remote Fragments\n     * -------------\n     *\n     * List Remote Fragments\n     */\n    public bulkReadFragments(params: X.BulkReadFragmentsQuery): DataState<X.BulkReadFragmentsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadFragmentsResponseEntity[]>('/fragments/', { params, responseMap: 'fragments', authorizationRequired: true });\n    }\n    \n    public bulkReadFragments2(params: X.BulkReadFragmentsQuery): Observable<X.BulkReadFragmentsResponseEntity[]> {\n        return this.client.get<X.BulkReadFragmentsResponseEntity[]>('/fragments/', { params, responseMap: 'fragments', authorizationRequired: true });\n    }\n\n    /**\n     * List Published Remote Fragments\n     * -------------\n     *\n     * List Published Remote Fragments\n     */\n    public bulkReadPublishedFragments(params: X.BulkReadPublishedFragmentsQuery): DataState<X.BulkReadPublishedFragmentsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadPublishedFragmentsResponseEntity[]>('/fragments/published/', { params, responseMap: 'fragments', authorizationRequired: false });\n    }\n    \n    public bulkReadPublishedFragments2(params: X.BulkReadPublishedFragmentsQuery): Observable<X.BulkReadPublishedFragmentsResponseEntity[]> {\n        return this.client.get<X.BulkReadPublishedFragmentsResponseEntity[]>('/fragments/published/', { params, responseMap: 'fragments', authorizationRequired: false });\n    }\n\n    /**\n     * Create Remote Fragment\n     * -------------\n     *\n     * Create Remote Fragment\n     */\n    public createFragment(): Observable<X.CreateFragmentResponse> {\n        return this.client\n            .post<X.CreateFragmentResponse>('/fragments/', {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Delete Remote Fragment\n     * -------------\n     *\n     * Delete Remote Fragment\n     */\n    public deleteFragment(fragmentId: any): Observable<X.DeleteFragmentResponse> {\n        return this.client\n            .delete<X.DeleteFragmentResponse>(`/fragments/${fragmentId}`, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Merge Remote Fragment\n     * -------------\n     *\n     * Merge Remote Fragment\n     */\n    public mergeFragment(fragmentId: any): Observable<X.MergeFragmentResponse> {\n        return this.client\n            .post<X.MergeFragmentResponse>(`/fragments/${fragmentId}/merge/`, {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Publish Remote Fragment\n     * -------------\n     *\n     * Publish Remote Fragment\n     */\n    public publishFragment(fragmentId: any): Observable<X.PublishFragmentResponse> {\n        return this.client\n            .put<X.PublishFragmentResponse>(`/fragments/${fragmentId}/publish/`, {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Remote Fragment\n     * -------------\n     *\n     * Read Remote Fragment\n     */\n    public readFragment(fragmentId: any): DataState<X.ReadFragmentResponse> {\n        return this.client.getDataState<X.ReadFragmentResponse>(`/fragments/${fragmentId}`, { authorizationRequired: true });\n    }\n    \n    public readFragment2(fragmentId: any): Observable<X.ReadFragmentResponse> {\n        return this.client.get<X.ReadFragmentResponse>(`/fragments/${fragmentId}`, { authorizationRequired: true });\n    }\n\n    /**\n     * Read Fragment Diff\n     * -------------\n     *\n     * Read Fragment Diff\n     */\n    public readFragmentDiff(fragmentId: any): DataState<X.ReadFragmentDiffResponse> {\n        return this.client.getDataState<X.ReadFragmentDiffResponse>(`/fragments/${fragmentId}/diff/`, { authorizationRequired: true });\n    }\n    \n    public readFragmentDiff2(fragmentId: any): Observable<X.ReadFragmentDiffResponse> {\n        return this.client.get<X.ReadFragmentDiffResponse>(`/fragments/${fragmentId}/diff/`, { authorizationRequired: true });\n    }\n\n    /**\n     * Read Fragment Sample\n     * -------------\n     *\n     * Read Fragment Sample\n     */\n    public readFragmentSample(fragmentId: any): DataState<X.ReadFragmentSampleResponse> {\n        return this.client.getDataState<X.ReadFragmentSampleResponse>(`/fragments/${fragmentId}/sample/`, { authorizationRequired: false });\n    }\n    \n    public readFragmentSample2(fragmentId: any): Observable<X.ReadFragmentSampleResponse> {\n        return this.client.get<X.ReadFragmentSampleResponse>(`/fragments/${fragmentId}/sample/`, { authorizationRequired: false });\n    }\n\n    /**\n     * Update Remote Fragment\n     * -------------\n     *\n     * Update Remote Fragment\n     */\n    public updateFragment(fragmentId: any, body: X.UpdateFragmentBody): Observable<X.UpdateFragmentResponse> {\n        return this.client\n            .put<X.UpdateFragmentResponse>(`/fragments/${fragmentId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Geometries Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './geometries.models';\n\n@Injectable()\nexport class GeometriesDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Geometries\n     * -------------\n     *\n     * List Geometries.\n     */\n    public bulkReadGeometries(params: X.BulkReadGeometriesQuery): DataState<X.BulkReadGeometriesResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadGeometriesResponseEntity[]>('/grid/geometries/', { params, responseMap: 'geometries', authorizationRequired: true });\n    }\n    \n    public bulkReadGeometries2(params: X.BulkReadGeometriesQuery): Observable<X.BulkReadGeometriesResponseEntity[]> {\n        return this.client.get<X.BulkReadGeometriesResponseEntity[]>('/grid/geometries/', { params, responseMap: 'geometries', authorizationRequired: true });\n    }\n\n    /**\n     * Bulk Update Geometries\n     * -------------\n     *\n     * Update in a Bulk list of Geometries.\n     */\n    public bulkUpdateGeometries(body: X.BulkUpdateGeometriesBody): Observable<X.BulkUpdateGeometriesResponse> {\n        return this.client\n            .put<X.BulkUpdateGeometriesResponse>('/grid/geometries/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Geometry by Card\n     * -------------\n     *\n     * Read a Geometry entity given the id of Card which is the parent of the Geometry entity.\n     */\n    public readGeometryByCard(cardId: any): DataState<X.ReadGeometryByCardResponse> {\n        return this.client.getDataState<X.ReadGeometryByCardResponse>(`/grid/geometries/by_card/${cardId}`, { authorizationRequired: true });\n    }\n    \n    public readGeometryByCard2(cardId: any): Observable<X.ReadGeometryByCardResponse> {\n        return this.client.get<X.ReadGeometryByCardResponse>(`/grid/geometries/by_card/${cardId}`, { authorizationRequired: true });\n    }\n\n    /**\n     * Read Graph\n     * -------------\n     *\n     * Render and read Graph made out of all Cards and Links belonging to a given user.\n     */\n    public readGraph(params: X.ReadGraphQuery): DataState<X.ReadGraphResponse> {\n        return this.client.getDataState<X.ReadGraphResponse>('/grid/graphs/', { params, authorizationRequired: true });\n    }\n    \n    public readGraph2(params: X.ReadGraphQuery): Observable<X.ReadGraphResponse> {\n        return this.client.get<X.ReadGraphResponse>('/grid/graphs/', { params, authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Hashtags Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './hashtags.models';\n\n@Injectable()\nexport class HashtagsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Hashtags\n     * -------------\n     *\n     * Enables one to list a series of Hashtag instances. It accepts various query parameters such as: - `limit` - `offset` - `first_character`\n     */\n    public bulkReadHashtags(params: X.BulkReadHashtagsQuery): DataState<X.BulkReadHashtagsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadHashtagsResponseEntity[]>('/hashtags/', { params, responseMap: 'hashtags', authorizationRequired: true });\n    }\n    \n    public bulkReadHashtags2(params: X.BulkReadHashtagsQuery): Observable<X.BulkReadHashtagsResponseEntity[]> {\n        return this.client.get<X.BulkReadHashtagsResponseEntity[]>('/hashtags/', { params, responseMap: 'hashtags', authorizationRequired: true });\n    }\n\n    /**\n     * Creating a single Hashtag\n     * -------------\n     *\n     * Enables one to create a single Hashtag instance.\n     */\n    public createHashtag(body: X.CreateHashtagBody): Observable<X.CreateHashtagResponse> {\n        return this.client\n            .post<X.CreateHashtagResponse>('/hashtags/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Removing a single Hashtag\n     * -------------\n     *\n     * Enables one to detach a single Hashtag instance from a list cards given by `card_ids`.\n     */\n    public deleteHashtag(hashtagId: any, params: X.DeleteHashtagQuery): Observable<X.DeleteHashtagResponse> {\n        return this.client\n            .delete<X.DeleteHashtagResponse>(`/hashtags/${hashtagId}`, { params, authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * List Hashtags TOC\n     * -------------\n     *\n     * Enables one to list Hashtags Table of Contents made out of Hashtags. Note: Currently this endpoint returns only a flat list of hashtags with the count of Cards with which they're attached to. In the future though one could propose a mechanism which could calculate hierarchy between those hashtags (parent - child relationships) and ordering based on the knowledge grid topology. It accepts various query parameters such as: - `limit` - `offset`\n     */\n    public readHashtagsToc(params: X.ReadHashtagsTocQuery): DataState<X.ReadHashtagsTocResponse> {\n        return this.client.getDataState<X.ReadHashtagsTocResponse>('/hashtags/toc', { params, authorizationRequired: true });\n    }\n    \n    public readHashtagsToc2(params: X.ReadHashtagsTocQuery): Observable<X.ReadHashtagsTocResponse> {\n        return this.client.get<X.ReadHashtagsTocResponse>('/hashtags/toc', { params, authorizationRequired: true });\n    }\n\n    /**\n     * Updating a single Hashtag\n     * -------------\n     *\n     * Enables one to update a single Hashtag instance with a list of `card_ids` to which it should get attached to.\n     */\n    public updateHashtag(hashtagId: any, body: X.UpdateHashtagBody): Observable<X.UpdateHashtagResponse> {\n        return this.client\n            .put<X.UpdateHashtagResponse>(`/hashtags/${hashtagId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Internal Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './internal.models';\n\n@Injectable()\nexport class InternalDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Clear all Entries for a given User\n     * -------------\n     *\n     * Internal view enabling one to clean up all database entries for a specific `user_id`. It must be of the utmost importance that this endpoint would not be available on the production system.\n     */\n    public deleteEntriesForUser(userId: any): Observable<X.DeleteEntriesForUserResponse> {\n        return this.client\n            .delete<X.DeleteEntriesForUserResponse>(`/reset/${userId}`, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Invoice Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './invoices.models';\n\n@Injectable()\nexport class InvoicesDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List all Invoices belonging to a given user\n     * -------------\n     *\n     * Enables the the User to list all of the Invoices which were generated for his Donations or Subscription payments.\n     */\n    public bulkReadInvoices(): DataState<X.BulkReadInvoicesResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadInvoicesResponseEntity[]>('/payments/invoices/', { responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadInvoices2(): Observable<X.BulkReadInvoicesResponseEntity[]> {\n        return this.client.get<X.BulkReadInvoicesResponseEntity[]>('/payments/invoices/', { responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * Calculate debt for a given user\n     * -------------\n     *\n     * Calculate debt for a given user by searching for the latest unpaid invoice. It returns payment token which can be used in the PAID_WITH_DEFAULT_PAYMENT_CARD command\n     */\n    public calculateDebt(): DataState<X.CalculateDebtResponse> {\n        return this.client.getDataState<X.CalculateDebtResponse>('/payments/invoices/debt/', { authorizationRequired: true });\n    }\n    \n    public calculateDebt2(): Observable<X.CalculateDebtResponse> {\n        return this.client.get<X.CalculateDebtResponse>('/payments/invoices/debt/', { authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Invoice Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/invoice.py/#lines-53\n */\n\nexport enum BulkReadInvoicesResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum BulkReadInvoicesResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport interface BulkReadInvoicesResponseEntity {\n    amount: string;\n    created_timestamp: number;\n    currency?: string;\n    display_amount: string;\n    id?: number;\n    is_extension?: boolean;\n    paid_till_timestamp: number;\n    product: {\n        currency?: BulkReadInvoicesResponseCurrency;\n        display_price: string;\n        name: string;\n        price?: string;\n        product_type: BulkReadInvoicesResponseProductType;\n    };\n    surplus_amount?: string;\n    surplus_currency?: string;\n    valid_till_timestamp: number;\n}\n\nexport interface BulkReadInvoicesResponse {\n    data: BulkReadInvoicesResponseEntity[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/invoice.py/#lines-51\n */\n\nexport interface CalculateDebtResponse {\n    at__commands: Object;\n    currency: string;\n    display_owes: string;\n    owes: number;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Links Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './links.models';\n\n@Injectable()\nexport class LinksDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Remove Link\n     * -------------\n     *\n     * Remove a Link between two cards.\n     */\n    public deleteLink(fromCardId: any, toCardId: any): Observable<X.DeleteLinkResponse> {\n        return this.client\n            .delete<X.DeleteLinkResponse>(`/grid/links/${fromCardId}/${toCardId}`, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read or Create Link\n     * -------------\n     *\n     * Read or Create a Link between two cards.\n     */\n    public readOrCreateLink(body: X.ReadOrCreateLinkBody): Observable<X.ReadOrCreateLinkResponse> {\n        return this.client\n            .post<X.ReadOrCreateLinkResponse>('/grid/links/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Links Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface DeleteLinkResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/grid/views.py/#lines-47\n */\n\nexport interface ReadOrCreateLinkBody {\n    from_card_id: number;\n    to_card_id: number;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/grid/serializers.py/#lines-8\n */\n\nexport enum ReadOrCreateLinkResponseKind {\n    CARD = 'CARD',\n    FRAGMENT = 'FRAGMENT',\n    HASHTAG = 'HASHTAG',\n    PATH = 'PATH',\n    TERM = 'TERM',\n}\n\nexport interface ReadOrCreateLinkResponse {\n    author_id?: any;\n    created_timestamp: number;\n    from_card_id?: any;\n    id?: number;\n    kind: ReadOrCreateLinkResponseKind;\n    reference_id: number;\n    to_card_id?: any;\n    value: number;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * MediaItems Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './mediaitems.models';\n\n@Injectable()\nexport class MediaitemsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List MediaItems\n     * -------------\n     *\n     * List MediaItems\n     */\n    public bulkReadMediaitems(params: X.BulkReadMediaitemsQuery): DataState<X.BulkReadMediaitemsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadMediaitemsResponseEntity[]>('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadMediaitems2(params: X.BulkReadMediaitemsQuery): Observable<X.BulkReadMediaitemsResponseEntity[]> {\n        return this.client.get<X.BulkReadMediaitemsResponseEntity[]>('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * Remove MediaItem\n     * -------------\n     *\n     * Remove MediaItem instance.\n     */\n    public deleteMediaitem(mediaitemId: any, params: X.DeleteMediaitemQuery): Observable<X.DeleteMediaitemResponse> {\n        return this.client\n            .delete<X.DeleteMediaitemResponse>(`/mediaitems/${mediaitemId}`, { params, authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read MediaItem\n     * -------------\n     *\n     * Read MediaItem\n     */\n    public readMediaitem(mediaitemId: any): DataState<X.ReadMediaitemResponse> {\n        return this.client.getDataState<X.ReadMediaitemResponse>(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });\n    }\n    \n    public readMediaitem2(mediaitemId: any): Observable<X.ReadMediaitemResponse> {\n        return this.client.get<X.ReadMediaitemResponse>(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });\n    }\n\n    /**\n     * Read By Process Id\n     * -------------\n     *\n     * Read MediaItem by Process Id\n     */\n    public readMediaitemByProcessId(processId: any): DataState<X.ReadMediaitemByProcessIdResponse> {\n        return this.client.getDataState<X.ReadMediaitemByProcessIdResponse>(`/mediaitems/by_process/${processId}`, { authorizationRequired: true });\n    }\n    \n    public readMediaitemByProcessId2(processId: any): Observable<X.ReadMediaitemByProcessIdResponse> {\n        return this.client.get<X.ReadMediaitemByProcessIdResponse>(`/mediaitems/by_process/${processId}`, { authorizationRequired: true });\n    }\n\n    /**\n     * Read or Create MediaItem\n     * -------------\n     *\n     * Read or Create MediaItem instance.\n     */\n    public readOrCreateMediaitem(body: X.ReadOrCreateMediaitemBody): Observable<X.ReadOrCreateMediaitemResponse> {\n        return this.client\n            .post<X.ReadOrCreateMediaitemResponse>('/mediaitems/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Update MediaItem\n     * -------------\n     *\n     * Update MediaItem instance.\n     */\n    public updateMediaitem(mediaitemId: any, body: X.UpdateMediaitemBody): Observable<X.UpdateMediaitemResponse> {\n        return this.client\n            .put<X.UpdateMediaitemResponse>(`/mediaitems/${mediaitemId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Update MediaItem Representation\n     * -------------\n     *\n     * Update given MediaItem with only the fields which are decided externally (using external services). Fields like: - `web_representations` - `thumbnail_uri` - `meta` - `text` All of those fields are computed in smarter way in order to make the MediaItem way better in a semantic sense. Those fields are perceived as the `representation` of a given MediaItem since they contains information about how to display a given MediaItem, how to understand it etc. It goes beyond the simple abstract data oriented representation (uri, extension etc.).\n     */\n    public updateMediaitemRepresentation(mediaitemId: any, body: X.UpdateMediaitemRepresentationBody): Observable<X.UpdateMediaitemRepresentationResponse> {\n        return this.client\n            .put<X.UpdateMediaitemRepresentationResponse>(`/mediaitems/${mediaitemId}/representation/`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Notification Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './notifications.models';\n\n@Injectable()\nexport class NotificationsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Acknowledge Notification\n     * -------------\n     *\n     * Acknowledge Notification\n     */\n    public acknowledgeNotification(notificationId: any): Observable<X.AcknowledgeNotificationResponse> {\n        return this.client\n            .put<X.AcknowledgeNotificationResponse>(`/notifications/${notificationId}/acknowledge/`, {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * List Notifications\n     * -------------\n     *\n     * List Notifications\n     */\n    public bulkReadNotifications(params: X.BulkReadNotificationsQuery): DataState<X.BulkReadNotificationsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadNotificationsResponseEntity[]>('/notifications/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadNotifications2(params: X.BulkReadNotificationsQuery): Observable<X.BulkReadNotificationsResponseEntity[]> {\n        return this.client.get<X.BulkReadNotificationsResponseEntity[]>('/notifications/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Notification Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-fragment-service/src/b023ad5da15027683028609c140260b0a1808452/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface AcknowledgeNotificationResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-fragment-service/src/b023ad5da15027683028609c140260b0a1808452/cosphere_fragment_service/notification/views.py/#lines-77\n */\n\nexport interface BulkReadNotificationsQuery {\n    acknowledged?: boolean;\n    created_timestamp__gt?: number;\n    limit?: number;\n    offset?: number;\n    updated_timestamp__gt?: number;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-fragment-service/src/b023ad5da15027683028609c140260b0a1808452/cosphere_fragment_service/notification/serializers.py/#lines-46\n */\n\nexport enum BulkReadNotificationsResponseKind {\n    FRAGMENT_UPDATE = 'FRAGMENT_UPDATE',\n}\n\nexport interface BulkReadNotificationsResponseEntity {\n    acknowledged: boolean;\n    created_timestamp: number;\n    id?: number;\n    kind: BulkReadNotificationsResponseKind;\n    payload: Object;\n    updated_timestamp: number;\n}\n\nexport interface BulkReadNotificationsResponse {\n    data: BulkReadNotificationsResponseEntity[];\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Paths Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './paths.models';\n\n@Injectable()\nexport class PathsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Delete Paths\n     * -------------\n     *\n     * Endpoint for Deleting multiple Paths.\n     */\n    public bulkDeletePaths(params: X.BulkDeletePathsQuery): Observable<X.BulkDeletePathsResponse> {\n        return this.client\n            .delete<X.BulkDeletePathsResponse>('/paths/', { params, authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * List Paths\n     * -------------\n     *\n     * List all user's Paths\n     */\n    public bulkReadPaths(params: X.BulkReadPathsQuery): DataState<X.BulkReadPathsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadPathsResponseEntity[]>('/paths/', { params, responseMap: 'paths', authorizationRequired: true });\n    }\n    \n    public bulkReadPaths2(params: X.BulkReadPathsQuery): Observable<X.BulkReadPathsResponseEntity[]> {\n        return this.client.get<X.BulkReadPathsResponseEntity[]>('/paths/', { params, responseMap: 'paths', authorizationRequired: true });\n    }\n\n    /**\n     * Create Path\n     * -------------\n     *\n     * Endpoint for Creating Path.\n     */\n    public createPath(body: X.CreatePathBody): Observable<X.CreatePathResponse> {\n        return this.client\n            .post<X.CreatePathResponse>('/paths/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Path\n     * -------------\n     *\n     * Read single Path\n     */\n    public readPath(pathId: any): DataState<X.ReadPathResponse> {\n        return this.client.getDataState<X.ReadPathResponse>(`/paths/${pathId}`, { authorizationRequired: true });\n    }\n    \n    public readPath2(pathId: any): Observable<X.ReadPathResponse> {\n        return this.client.get<X.ReadPathResponse>(`/paths/${pathId}`, { authorizationRequired: true });\n    }\n\n    /**\n     * Update Path\n     * -------------\n     *\n     * Endpoint for Updating Path.\n     */\n    public updatePath(pathId: any, body: X.UpdatePathBody): Observable<X.UpdatePathResponse> {\n        return this.client\n            .put<X.UpdatePathResponse>(`/paths/${pathId}`, body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Payment Cards Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './payment_cards.models';\n\n@Injectable()\nexport class PaymentCardsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Mark a given Payment Card as a default one\n     * -------------\n     *\n     * Enables the the User to mark a specific Payment Card as a default one, meaning that it will be used for all upcoming payments. Marking Payment Card as a default one automatically leads to the unmarking of any Payment Card which was default one before the invocation of the command.\n     */\n    public asDefaultMarkPaymentcard(paymentCardId: any): Observable<X.AsDefaultMarkPaymentcardResponse> {\n        return this.client\n            .put<X.AsDefaultMarkPaymentcardResponse>(`/payments/payment_cards/${paymentCardId}/mark_as_default/`, {}, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * List all Payment Cards belonging to a given user\n     * -------------\n     *\n     * Enables the the User to list all of the Payment Cards which were added by him / her. Among all returned Payment Cards there must be one and only one which is marked as **default**.\n     */\n    public bulkReadPaymentcards(): DataState<X.BulkReadPaymentcardsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadPaymentcardsResponseEntity[]>('/payments/payment_cards/', { responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadPaymentcards2(): Observable<X.BulkReadPaymentcardsResponseEntity[]> {\n        return this.client.get<X.BulkReadPaymentcardsResponseEntity[]>('/payments/payment_cards/', { responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * Create a Payment Card\n     * -------------\n     *\n     * Enables the the User to add new Payment Card, which could be needed in cases when the User would like to replace existing Payment Card because: - it expired - is empty - the User prefers another one to be used from now on. Using the optional `mark_as_default` field one can mark just created Payment Card as the default one.\n     */\n    public createPaymentcard(body: X.CreatePaymentcardBody): Observable<X.CreatePaymentcardResponse> {\n        return this.client\n            .post<X.CreatePaymentcardResponse>('/payments/payment_cards/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Remove a given Payment Card belonging to a given user\n     * -------------\n     *\n     * Enables the the User to remove a specific Payment Card which were added by him / her. Payment Card can be removed only if it's not a default one.\n     */\n    public deletePaymentcard(paymentCardId: any): Observable<X.DeletePaymentcardResponse> {\n        return this.client\n            .delete<X.DeletePaymentcardResponse>(`/payments/payment_cards/${paymentCardId}`, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Pay using the default Payment Card\n     * -------------\n     *\n     * User is allowed only to perform payments against her default Payment Card. In other words on order to use a given Payment Card one has to mark is as default. Also one is not allowed to perform such payments freely and therefore we expect to get a `payment_token` inside which another piece of our system encoded allowed sum to be paid.\n     */\n    public payWithDefaultPaymentCard(body: X.PayWithDefaultPaymentCardBody): Observable<X.PayWithDefaultPaymentCardResponse> {\n        return this.client\n            .post<X.PayWithDefaultPaymentCardResponse>('/payments/payment_cards/pay_with_default/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Create a Payment Card\n     * -------------\n     *\n     * Enables the the User to add new Payment Card, which could be needed in cases when the User would like to replace existing Payment Card because: - it expired - is empty - the User prefers another one to be used from now on\n     */\n    public renderPaymentCardWidget(): DataState<X.RenderPaymentCardWidgetResponse> {\n        return this.client.getDataState<X.RenderPaymentCardWidgetResponse>('/payments/payment_cards/widget/', { authorizationRequired: true });\n    }\n    \n    public renderPaymentCardWidget2(): Observable<X.RenderPaymentCardWidgetResponse> {\n        return this.client.get<X.RenderPaymentCardWidgetResponse>('/payments/payment_cards/widget/', { authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Payment Cards Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface AsDefaultMarkPaymentcardResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/payment_card.py/#lines-75\n */\n\nexport enum BulkReadPaymentcardsResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum BulkReadPaymentcardsResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport enum BulkReadPaymentcardsResponseStatus {\n    CANCELED = 'CANCELED',\n    COMPLETED = 'COMPLETED',\n    NEW = 'NEW',\n    PENDING = 'PENDING',\n    REJECTED = 'REJECTED',\n}\n\nexport interface BulkReadPaymentcardsResponseEntity {\n    expiration_month?: number;\n    expiration_year?: number;\n    expired: boolean;\n    id?: number;\n    is_default?: boolean;\n    is_fully_defined: boolean;\n    masked_number: string;\n    payments: {\n        amount: string;\n        created_timestamp: number;\n        display_amount: string;\n        product: {\n            currency?: BulkReadPaymentcardsResponseCurrency;\n            display_price: string;\n            name: string;\n            price?: string;\n            product_type: BulkReadPaymentcardsResponseProductType;\n        };\n        status?: BulkReadPaymentcardsResponseStatus;\n        status_ledger?: Object;\n    }[];\n}\n\nexport interface BulkReadPaymentcardsResponse {\n    data: BulkReadPaymentcardsResponseEntity[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/payment_card.py/#lines-52\n */\n\nexport interface CreatePaymentcardBody {\n    expiration_month: number;\n    expiration_year: number;\n    mark_as_default?: boolean;\n    masked_number: string;\n    token: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/payment_card.py/#lines-9\n */\n\nexport enum CreatePaymentcardResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum CreatePaymentcardResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport enum CreatePaymentcardResponseStatus {\n    CANCELED = 'CANCELED',\n    COMPLETED = 'COMPLETED',\n    NEW = 'NEW',\n    PENDING = 'PENDING',\n    REJECTED = 'REJECTED',\n}\n\nexport interface CreatePaymentcardResponse {\n    expiration_month?: number;\n    expiration_year?: number;\n    expired: boolean;\n    id?: number;\n    is_default?: boolean;\n    is_fully_defined: boolean;\n    masked_number: string;\n    payments: {\n        amount: string;\n        created_timestamp: number;\n        display_amount: string;\n        product: {\n            currency?: CreatePaymentcardResponseCurrency;\n            display_price: string;\n            name: string;\n            price?: string;\n            product_type: CreatePaymentcardResponseProductType;\n        };\n        status?: CreatePaymentcardResponseStatus;\n        status_ledger?: Object;\n    }[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/.venv/src/lily/lily/base/serializers.py/#lines-158\n */\n\nexport interface DeletePaymentcardResponse {}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/payment_card.py/#lines-204\n */\n\nexport interface PayWithDefaultPaymentCardBody {\n    payment_token: string;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/serializers/payment.py/#lines-9\n */\n\nexport enum PayWithDefaultPaymentCardResponseCurrency {\n    PLN = 'PLN',\n}\n\nexport enum PayWithDefaultPaymentCardResponseProductType {\n    DONATION = 'DONATION',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport enum PayWithDefaultPaymentCardResponseStatus {\n    CANCELED = 'CANCELED',\n    COMPLETED = 'COMPLETED',\n    NEW = 'NEW',\n    PENDING = 'PENDING',\n    REJECTED = 'REJECTED',\n}\n\nexport interface PayWithDefaultPaymentCardResponse {\n    amount: string;\n    created_timestamp: number;\n    display_amount: string;\n    product: {\n        currency?: PayWithDefaultPaymentCardResponseCurrency;\n        display_price: string;\n        name: string;\n        price?: string;\n        product_type: PayWithDefaultPaymentCardResponseProductType;\n    };\n    status?: PayWithDefaultPaymentCardResponseStatus;\n    status_ledger?: Object;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/models/payu.py/#lines-313\n */\n\nexport interface RenderPaymentCardWidgetResponse {\n    currency_code: string;\n    customer_email?: string;\n    customer_language: string;\n    merchant_pos_id: string;\n    recurring_payment: boolean;\n    shop_name: string;\n    sig: string;\n    store_card: boolean;\n    total_amount: string;\n    widget_mode?: string;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Payments Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './payments.models';\n\n@Injectable()\nexport class PaymentsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Update the status of a given Payment\n     * -------------\n     *\n     * Update the Payment instance identified by the `session_id`. This command is for external use only therefore it doesn't expose internal ids of the payments but rather session id.\n     */\n    public updatePaymentStatus(body: X.UpdatePaymentStatusBody): Observable<X.UpdatePaymentStatusResponse> {\n        return this.client\n            .post<X.UpdatePaymentStatusResponse>('/payments/(?P<session_id>[\\w\\-]+)', body, { authorizationRequired: false })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Recall Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './recall.models';\n\n@Injectable()\nexport class RecallDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Create Recall Session\n     * -------------\n     *\n     * Render Recall Session composed out of the sequence of Cards that should be recalled in a given order. Based on the RecallAttempt stats recommend another Card to recall in order to maximize the recall speed and success rate.\n     */\n    public createRecallSession(body: X.CreateRecallSessionBody): Observable<X.CreateRecallSessionResponse> {\n        return this.client\n            .post<X.CreateRecallSessionResponse>('/recall/sessions/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n    /**\n     * Read Recall Summary\n     * -------------\n     *\n     * Read summary stats for cards and their recall_score for a given User.\n     */\n    public readRecallSummary(): DataState<X.ReadRecallSummaryResponse> {\n        return this.client.getDataState<X.ReadRecallSummaryResponse>('/recall/summary/', { authorizationRequired: true });\n    }\n    \n    public readRecallSummary2(): Observable<X.ReadRecallSummaryResponse> {\n        return this.client.get<X.ReadRecallSummaryResponse>('/recall/summary/', { authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Subscription Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './subscriptions.models';\n\n@Injectable()\nexport class SubscriptionsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * Request a subscription change\n     * -------------\n     *\n     * Whenever the user wants to change her subscription it must happen through this endpoint. It's still possible that the subscription will change without user asking for it, but that can happen when downgrading due to missing payment.\n     */\n    public changeSubscription(body: X.ChangeSubscriptionBody): Observable<X.ChangeSubscriptionResponse> {\n        return this.client\n            .put<X.ChangeSubscriptionResponse>('/payments/subscription/', body, { authorizationRequired: true })\n            .pipe(filter(x => !_.isEmpty(x)));\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Subscription Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/subscription.py/#lines-28\n */\n\nexport enum ChangeSubscriptionBodySubscriptionType {\n    FREE = 'FREE',\n    SUBSCRIPTION_LEARNER_MONTHLY = 'SUBSCRIPTION_LEARNER_MONTHLY',\n    SUBSCRIPTION_LEARNER_YEARLY = 'SUBSCRIPTION_LEARNER_YEARLY',\n    SUBSCRIPTION_MENTOR_MONTHLY = 'SUBSCRIPTION_MENTOR_MONTHLY',\n    SUBSCRIPTION_MENTOR_YEARLY = 'SUBSCRIPTION_MENTOR_YEARLY',\n}\n\nexport interface ChangeSubscriptionBody {\n    subscription_type: ChangeSubscriptionBodySubscriptionType;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-auth-service/src/09d74e1c1f6871739268cd74315b4f114592af2c/cosphere_auth_service/payment/views/subscription.py/#lines-39\n */\n\nexport interface ChangeSubscriptionResponse {\n    at__process: Object;\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Tasks Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './tasks.models';\n\n@Injectable()\nexport class TasksDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Tasks\n     * -------------\n     *\n     * List tasks\n     */\n    public bulkReadTasks(params: X.BulkReadTasksQuery): DataState<X.BulkReadTasksResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadTasksResponseEntity[]>('/tasks/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadTasks2(params: X.BulkReadTasksQuery): Observable<X.BulkReadTasksResponseEntity[]> {\n        return this.client.get<X.BulkReadTasksResponseEntity[]>('/tasks/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n    /**\n     * List Task Bins\n     * -------------\n     *\n     * List Tasks Bins\n     */\n    public bulkReadTaskBins(params: X.BulkReadTaskBinsQuery): DataState<X.BulkReadTaskBinsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadTaskBinsResponseEntity[]>('/tasks/bins/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadTaskBins2(params: X.BulkReadTaskBinsQuery): Observable<X.BulkReadTaskBinsResponseEntity[]> {\n        return this.client.get<X.BulkReadTaskBinsResponseEntity[]>('/tasks/bins/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Tasks Management Domain Models\n */\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/task/views.py/#lines-33\n */\n\nexport enum BulkReadTasksQueryQueueType {\n    DN = 'DN',\n    HP = 'HP',\n    OT = 'OT',\n    PR = 'PR',\n}\n\nexport interface BulkReadTasksQuery {\n    ascending?: boolean;\n    limit?: number;\n    offset?: number;\n    queue_type?: BulkReadTasksQueryQueueType;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/task/serializers.py/#lines-55\n */\n\nexport enum BulkReadTasksResponseQueueType {\n    DN = 'DN',\n    HP = 'HP',\n    OT = 'OT',\n    PR = 'PR',\n}\n\nexport interface BulkReadTasksResponseEntity {\n    archived?: boolean;\n    content?: Object;\n    created_timestamp: number;\n    done_date: string;\n    done_timestamp: number;\n    id?: number;\n    order_number?: number;\n    queue_type?: BulkReadTasksResponseQueueType;\n    total_time?: number;\n}\n\nexport interface BulkReadTasksResponse {\n    data: BulkReadTasksResponseEntity[];\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/task/views.py/#lines-33\n */\n\nexport enum BulkReadTaskBinsQueryQueueType {\n    DN = 'DN',\n    HP = 'HP',\n    OT = 'OT',\n    PR = 'PR',\n}\n\nexport interface BulkReadTaskBinsQuery {\n    ascending?: boolean;\n    limit?: number;\n    offset?: number;\n    queue_type?: BulkReadTaskBinsQueryQueueType;\n}\n\n/**\n * https://bitbucket.org/goodai/cosphere-entity-service/src/b8dec3cf13d1897109220787f995546558de477d/cosphere_entity_service/task/serializers.py/#lines-71\n */\n\nexport enum BulkReadTaskBinsResponseQueueType {\n    DN = 'DN',\n    HP = 'HP',\n    OT = 'OT',\n    PR = 'PR',\n}\n\nexport interface BulkReadTaskBinsResponseEntity {\n    done_date: string;\n    tasks: {\n        archived?: boolean;\n        content?: Object;\n        created_timestamp: number;\n        done_date: string;\n        done_timestamp: number;\n        id?: number;\n        order_number?: number;\n        queue_type?: BulkReadTaskBinsResponseQueueType;\n        total_time?: number;\n    }[];\n}\n\nexport interface BulkReadTaskBinsResponse {\n    data: BulkReadTaskBinsResponseEntity[];\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Words Management Domain\n */\nimport { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport * as _ from 'underscore';\n\nimport { ClientService } from '../../services/client.service';\nimport { DataState } from '../../services/client.interface';\n\nimport * as X from './words.models';\n\n@Injectable()\nexport class WordsDomain {\n    constructor(private client: ClientService) {}\n\n    /**\n     * List Words\n     * -------------\n     *\n     * List Words by first character. It allows one to fetch list of words by first character.\n     */\n    public bulkReadWords(params: X.BulkReadWordsQuery): DataState<X.BulkReadWordsResponseEntity[]> {\n        return this.client.getDataState<X.BulkReadWordsResponseEntity[]>('/words/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n    \n    public bulkReadWords2(params: X.BulkReadWordsQuery): Observable<X.BulkReadWordsResponseEntity[]> {\n        return this.client.get<X.BulkReadWordsResponseEntity[]>('/words/', { params, responseMap: 'data', authorizationRequired: true });\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\n/**\n * Facade API Service for all domains\n */\nimport { Injectable, Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DataState, Options } from './client.interface';\n\nimport * as X from '../domains/index';\n\n@Injectable()\nexport class APIService {\n\n    constructor(private injector: Injector) {}\n\n    /**\n     * Account Settings Management domain\n     */\n    private _account_settingsDomain: X.AccountSettingsDomain;\n    \n    public get account_settingsDomain(): X.AccountSettingsDomain {\n        if (!this._account_settingsDomain) {\n            this._account_settingsDomain = this.injector.get(X.AccountSettingsDomain);\n        }\n    \n        return this._account_settingsDomain;\n    }\n\n    readAccountsetting(): DataState<X.ReadAccountsettingResponse> {\n        return this.account_settingsDomain.readAccountsetting();\n    }\n    \n    readAccountsetting2(): Observable<X.ReadAccountsettingResponse> {\n        return this.account_settingsDomain.readAccountsetting2();\n    }\n\n    updateAccountsetting(body: X.UpdateAccountsettingBody): Observable<X.UpdateAccountsettingResponse> {\n        return this.account_settingsDomain.updateAccountsetting(body);\n    }\n\n    /**\n     * Accounts Management domain\n     */\n    private _accountsDomain: X.AccountsDomain;\n    \n    public get accountsDomain(): X.AccountsDomain {\n        if (!this._accountsDomain) {\n            this._accountsDomain = this.injector.get(X.AccountsDomain);\n        }\n    \n        return this._accountsDomain;\n    }\n\n    activateAccount(body: X.ActivateAccountBody): Observable<X.ActivateAccountResponse> {\n        return this.accountsDomain.activateAccount(body);\n    }\n\n    bulkReadAccounts(params: X.BulkReadAccountsQuery): DataState<X.BulkReadAccountsResponseEntity[]> {\n        return this.accountsDomain.bulkReadAccounts(params);\n    }\n    \n    bulkReadAccounts2(params: X.BulkReadAccountsQuery): Observable<X.BulkReadAccountsResponseEntity[]> {\n        return this.accountsDomain.bulkReadAccounts2(params);\n    }\n\n    changePassword(body: X.ChangePasswordBody): Observable<X.ChangePasswordResponse> {\n        return this.accountsDomain.changePassword(body);\n    }\n\n    createAccount(body: X.CreateAccountBody): Observable<X.CreateAccountResponse> {\n        return this.accountsDomain.createAccount(body);\n    }\n\n    readAccount(): DataState<X.ReadAccountResponse> {\n        return this.accountsDomain.readAccount();\n    }\n    \n    readAccount2(): Observable<X.ReadAccountResponse> {\n        return this.accountsDomain.readAccount2();\n    }\n\n    resetPassword(body: X.ResetPasswordBody): Observable<X.ResetPasswordResponse> {\n        return this.accountsDomain.resetPassword(body);\n    }\n\n    sendAccountActivationEmail(body: X.SendAccountActivationEmailBody): Observable<X.SendAccountActivationEmailResponse> {\n        return this.accountsDomain.sendAccountActivationEmail(body);\n    }\n\n    sendResetPasswordEmail(body: X.SendResetPasswordEmailBody): Observable<X.SendResetPasswordEmailResponse> {\n        return this.accountsDomain.sendResetPasswordEmail(body);\n    }\n\n    updateAccount(body: X.UpdateAccountBody): Observable<X.UpdateAccountResponse> {\n        return this.accountsDomain.updateAccount(body);\n    }\n\n    /**\n     * Attempt Stats Management domain\n     */\n    private _attempt_statsDomain: X.AttemptStatsDomain;\n    \n    public get attempt_statsDomain(): X.AttemptStatsDomain {\n        if (!this._attempt_statsDomain) {\n            this._attempt_statsDomain = this.injector.get(X.AttemptStatsDomain);\n        }\n    \n        return this._attempt_statsDomain;\n    }\n\n    bulkReadAttemptstats(params: X.BulkReadAttemptstatsQuery): DataState<X.BulkReadAttemptstatsResponse> {\n        return this.attempt_statsDomain.bulkReadAttemptstats(params);\n    }\n    \n    bulkReadAttemptstats2(params: X.BulkReadAttemptstatsQuery): Observable<X.BulkReadAttemptstatsResponse> {\n        return this.attempt_statsDomain.bulkReadAttemptstats2(params);\n    }\n\n    createAttemptstat(body: X.CreateAttemptstatBody): Observable<X.CreateAttemptstatResponse> {\n        return this.attempt_statsDomain.createAttemptstat(body);\n    }\n\n    createExternalAttemptStat(body: X.CreateExternalAttemptStatBody): Observable<X.CreateExternalAttemptStatResponse> {\n        return this.attempt_statsDomain.createExternalAttemptStat(body);\n    }\n\n    /**\n     * Attempts Management domain\n     */\n    private _attemptsDomain: X.AttemptsDomain;\n    \n    public get attemptsDomain(): X.AttemptsDomain {\n        if (!this._attemptsDomain) {\n            this._attemptsDomain = this.injector.get(X.AttemptsDomain);\n        }\n    \n        return this._attemptsDomain;\n    }\n\n    bulkReadAttemptsByCards(cardId: any): DataState<X.BulkReadAttemptsByCardsResponseEntity[]> {\n        return this.attemptsDomain.bulkReadAttemptsByCards(cardId);\n    }\n    \n    bulkReadAttemptsByCards2(cardId: any): Observable<X.BulkReadAttemptsByCardsResponseEntity[]> {\n        return this.attemptsDomain.bulkReadAttemptsByCards2(cardId);\n    }\n\n    createAttempt(body: X.CreateAttemptBody): Observable<X.CreateAttemptResponse> {\n        return this.attemptsDomain.createAttempt(body);\n    }\n\n    updateAttempt(attemptId: any, body: X.UpdateAttemptBody): Observable<X.UpdateAttemptResponse> {\n        return this.attemptsDomain.updateAttempt(attemptId, body);\n    }\n\n    /**\n     * Auth Tokens Management domain\n     */\n    private _auth_tokensDomain: X.AuthTokensDomain;\n    \n    public get auth_tokensDomain(): X.AuthTokensDomain {\n        if (!this._auth_tokensDomain) {\n            this._auth_tokensDomain = this.injector.get(X.AuthTokensDomain);\n        }\n    \n        return this._auth_tokensDomain;\n    }\n\n    authorizeAuthToken(): Observable<X.AuthorizeAuthTokenResponse> {\n        return this.auth_tokensDomain.authorizeAuthToken();\n    }\n\n    createAuthToken(body: X.CreateAuthTokenBody): Observable<X.CreateAuthTokenResponse> {\n        return this.auth_tokensDomain.createAuthToken(body);\n    }\n\n    createFacebookBasedAuthToken(body: X.CreateFacebookBasedAuthTokenBody): Observable<X.CreateFacebookBasedAuthTokenResponse> {\n        return this.auth_tokensDomain.createFacebookBasedAuthToken(body);\n    }\n\n    createFacebookBasedMobileAuthToken(body: X.CreateFacebookBasedMobileAuthTokenBody): Observable<X.CreateFacebookBasedMobileAuthTokenResponse> {\n        return this.auth_tokensDomain.createFacebookBasedMobileAuthToken(body);\n    }\n\n    createGoogleBasedAuthToken(body: X.CreateGoogleBasedAuthTokenBody): Observable<X.CreateGoogleBasedAuthTokenResponse> {\n        return this.auth_tokensDomain.createGoogleBasedAuthToken(body);\n    }\n\n    createGoogleBasedMobileAuthToken(body: X.CreateGoogleBasedMobileAuthTokenBody): Observable<X.CreateGoogleBasedMobileAuthTokenResponse> {\n        return this.auth_tokensDomain.createGoogleBasedMobileAuthToken(body);\n    }\n\n    updateAuthToken(): Observable<X.UpdateAuthTokenResponse> {\n        return this.auth_tokensDomain.updateAuthToken();\n    }\n\n    /**\n     * Cards Management domain\n     */\n    private _cardsDomain: X.CardsDomain;\n    \n    public get cardsDomain(): X.CardsDomain {\n        if (!this._cardsDomain) {\n            this._cardsDomain = this.injector.get(X.CardsDomain);\n        }\n    \n        return this._cardsDomain;\n    }\n\n    bulkDeleteCards(params: X.BulkDeleteCardsQuery): Observable<X.BulkDeleteCardsResponse> {\n        return this.cardsDomain.bulkDeleteCards(params);\n    }\n\n    bulkReadCards(params: X.BulkReadCardsQuery): DataState<X.BulkReadCardsResponseEntity[]> {\n        return this.cardsDomain.bulkReadCards(params);\n    }\n    \n    bulkReadCards2(params: X.BulkReadCardsQuery): Observable<X.BulkReadCardsResponseEntity[]> {\n        return this.cardsDomain.bulkReadCards2(params);\n    }\n\n    createCard(body: X.CreateCardBody): Observable<X.CreateCardResponse> {\n        return this.cardsDomain.createCard(body);\n    }\n\n    readCard(cardId: any): DataState<X.ReadCardResponse> {\n        return this.cardsDomain.readCard(cardId);\n    }\n    \n    readCard2(cardId: any, params?: any): Observable<X.ReadCardResponse> {\n        return this.cardsDomain.readCard2(cardId, params);\n    }\n\n    bulkReadGeometriesOnly2(params: any): Observable<any> {\n        return this.cardsDomain.bulkReadGeometriesOnly2(params);\n    }\n\n    updateCard(cardId: any, body: X.UpdateCardBody): Observable<X.UpdateCardResponse> {\n        return this.cardsDomain.updateCard(cardId, body);\n    }\n\n    /**\n     * Categories Management domain\n     */\n    private _categoriesDomain: X.CategoriesDomain;\n    \n    public get categoriesDomain(): X.CategoriesDomain {\n        if (!this._categoriesDomain) {\n            this._categoriesDomain = this.injector.get(X.CategoriesDomain);\n        }\n    \n        return this._categoriesDomain;\n    }\n\n    bulkReadCategories(): DataState<X.BulkReadCategoriesResponseEntity[]> {\n        return this.categoriesDomain.bulkReadCategories();\n    }\n    \n    bulkReadCategories2(): Observable<X.BulkReadCategoriesResponseEntity[]> {\n        return this.categoriesDomain.bulkReadCategories2();\n    }\n\n    /**\n     * Contact Management domain\n     */\n    private _contactsDomain: X.ContactsDomain;\n    \n    public get contactsDomain(): X.ContactsDomain {\n        if (!this._contactsDomain) {\n            this._contactsDomain = this.injector.get(X.ContactsDomain);\n        }\n    \n        return this._contactsDomain;\n    }\n\n    createAnonymousContactAttempt(body: X.CreateAnonymousContactAttemptBody): Observable<X.CreateAnonymousContactAttemptResponse> {\n        return this.contactsDomain.createAnonymousContactAttempt(body);\n    }\n\n    sendAuthenticatedContactMessage(body: X.SendAuthenticatedContactMessageBody): Observable<X.SendAuthenticatedContactMessageResponse> {\n        return this.contactsDomain.sendAuthenticatedContactMessage(body);\n    }\n\n    verifyAnonymousContactAttempt(body: X.VerifyAnonymousContactAttemptBody): Observable<X.VerifyAnonymousContactAttemptResponse> {\n        return this.contactsDomain.verifyAnonymousContactAttempt(body);\n    }\n\n    /**\n     * Donations Management domain\n     */\n    private _donationsDomain: X.DonationsDomain;\n    \n    public get donationsDomain(): X.DonationsDomain {\n        if (!this._donationsDomain) {\n            this._donationsDomain = this.injector.get(X.DonationsDomain);\n        }\n    \n        return this._donationsDomain;\n    }\n\n    checkIfCanAttemptDonation(params: X.CheckIfCanAttemptDonationQuery): DataState<X.CheckIfCanAttemptDonationResponse> {\n        return this.donationsDomain.checkIfCanAttemptDonation(params);\n    }\n    \n    checkIfCanAttemptDonation2(params: X.CheckIfCanAttemptDonationQuery): Observable<X.CheckIfCanAttemptDonationResponse> {\n        return this.donationsDomain.checkIfCanAttemptDonation2(params);\n    }\n\n    createAnonymousDonation(body: X.CreateAnonymousDonationBody): Observable<X.CreateAnonymousDonationResponse> {\n        return this.donationsDomain.createAnonymousDonation(body);\n    }\n\n    createDonation(body: X.CreateDonationBody): Observable<X.CreateDonationResponse> {\n        return this.donationsDomain.createDonation(body);\n    }\n\n    createDonationattempt(body: X.CreateDonationattemptBody): Observable<X.CreateDonationattemptResponse> {\n        return this.donationsDomain.createDonationattempt(body);\n    }\n\n    /**\n     * External Apps Management domain\n     */\n    private _external_appsDomain: X.ExternalAppsDomain;\n    \n    public get external_appsDomain(): X.ExternalAppsDomain {\n        if (!this._external_appsDomain) {\n            this._external_appsDomain = this.injector.get(X.ExternalAppsDomain);\n        }\n    \n        return this._external_appsDomain;\n    }\n\n    authorizeExternalAppAuthToken(): Observable<X.AuthorizeExternalAppAuthTokenResponse> {\n        return this.external_appsDomain.authorizeExternalAppAuthToken();\n    }\n\n    createExternalAppAuthToken(body: X.CreateExternalAppAuthTokenBody): Observable<X.CreateExternalAppAuthTokenResponse> {\n        return this.external_appsDomain.createExternalAppAuthToken(body);\n    }\n\n    readExternalappconf(params: X.ReadExternalappconfQuery): DataState<X.ReadExternalappconfResponse> {\n        return this.external_appsDomain.readExternalappconf(params);\n    }\n    \n    readExternalappconf2(params: X.ReadExternalappconfQuery): Observable<X.ReadExternalappconfResponse> {\n        return this.external_appsDomain.readExternalappconf2(params);\n    }\n\n    /**\n     * Focus Records Management domain\n     */\n    private _focus_recordsDomain: X.FocusRecordsDomain;\n    \n    public get focus_recordsDomain(): X.FocusRecordsDomain {\n        if (!this._focus_recordsDomain) {\n            this._focus_recordsDomain = this.injector.get(X.FocusRecordsDomain);\n        }\n    \n        return this._focus_recordsDomain;\n    }\n\n    createFocusrecord(body: X.CreateFocusrecordBody): Observable<X.CreateFocusrecordResponse> {\n        return this.focus_recordsDomain.createFocusrecord(body);\n    }\n\n    readFocusRecordSummary(): DataState<X.ReadFocusRecordSummaryResponse> {\n        return this.focus_recordsDomain.readFocusRecordSummary();\n    }\n    \n    readFocusRecordSummary2(): Observable<X.ReadFocusRecordSummaryResponse> {\n        return this.focus_recordsDomain.readFocusRecordSummary2();\n    }\n\n    /**\n     * Fragment Hashtags Management domain\n     */\n    private _fragment_hashtagsDomain: X.FragmentHashtagsDomain;\n    \n    public get fragment_hashtagsDomain(): X.FragmentHashtagsDomain {\n        if (!this._fragment_hashtagsDomain) {\n            this._fragment_hashtagsDomain = this.injector.get(X.FragmentHashtagsDomain);\n        }\n    \n        return this._fragment_hashtagsDomain;\n    }\n\n    bulkReadFragmentHashtags(params: X.BulkReadFragmentHashtagsQuery): DataState<X.BulkReadFragmentHashtagsResponseEntity[]> {\n        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags(params);\n    }\n    \n    bulkReadFragmentHashtags2(params: X.BulkReadFragmentHashtagsQuery): Observable<X.BulkReadFragmentHashtagsResponseEntity[]> {\n        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags2(params);\n    }\n\n    bulkReadPublishedFragmentHashtags(params: X.BulkReadPublishedFragmentHashtagsQuery): DataState<X.BulkReadPublishedFragmentHashtagsResponseEntity[]> {\n        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags(params);\n    }\n    \n    bulkReadPublishedFragmentHashtags2(params: X.BulkReadPublishedFragmentHashtagsQuery): Observable<X.BulkReadPublishedFragmentHashtagsResponseEntity[]> {\n        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags2(params);\n    }\n\n    /**\n     * Fragment Words Management domain\n     */\n    private _fragment_wordsDomain: X.FragmentWordsDomain;\n    \n    public get fragment_wordsDomain(): X.FragmentWordsDomain {\n        if (!this._fragment_wordsDomain) {\n            this._fragment_wordsDomain = this.injector.get(X.FragmentWordsDomain);\n        }\n    \n        return this._fragment_wordsDomain;\n    }\n\n    bulkReadFragmentWords(params: X.BulkReadFragmentWordsQuery): DataState<X.BulkReadFragmentWordsResponseEntity[]> {\n        return this.fragment_wordsDomain.bulkReadFragmentWords(params);\n    }\n    \n    bulkReadFragmentWords2(params: X.BulkReadFragmentWordsQuery): Observable<X.BulkReadFragmentWordsResponseEntity[]> {\n        return this.fragment_wordsDomain.bulkReadFragmentWords2(params);\n    }\n\n    bulkReadPublishedFragmentWords(params: X.BulkReadPublishedFragmentWordsQuery): DataState<X.BulkReadPublishedFragmentWordsResponseEntity[]> {\n        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords(params);\n    }\n    \n    bulkReadPublishedFragmentWords2(params: X.BulkReadPublishedFragmentWordsQuery): Observable<X.BulkReadPublishedFragmentWordsResponseEntity[]> {\n        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords2(params);\n    }\n\n    /**\n     * Fragments Management domain\n     */\n    private _fragmentsDomain: X.FragmentsDomain;\n    \n    public get fragmentsDomain(): X.FragmentsDomain {\n        if (!this._fragmentsDomain) {\n            this._fragmentsDomain = this.injector.get(X.FragmentsDomain);\n        }\n    \n        return this._fragmentsDomain;\n    }\n\n    bulkReadFragments(params: X.BulkReadFragmentsQuery): DataState<X.BulkReadFragmentsResponseEntity[]> {\n        return this.fragmentsDomain.bulkReadFragments(params);\n    }\n    \n    bulkReadFragments2(params: X.BulkReadFragmentsQuery): Observable<X.BulkReadFragmentsResponseEntity[]> {\n        return this.fragmentsDomain.bulkReadFragments2(params);\n    }\n\n    bulkReadPublishedFragments(params: X.BulkReadPublishedFragmentsQuery): DataState<X.BulkReadPublishedFragmentsResponseEntity[]> {\n        return this.fragmentsDomain.bulkReadPublishedFragments(params);\n    }\n    \n    bulkReadPublishedFragments2(params: X.BulkReadPublishedFragmentsQuery): Observable<X.BulkReadPublishedFragmentsResponseEntity[]> {\n        return this.fragmentsDomain.bulkReadPublishedFragments2(params);\n    }\n\n    createFragment(): Observable<X.CreateFragmentResponse> {\n        return this.fragmentsDomain.createFragment();\n    }\n\n    deleteFragment(fragmentId: any): Observable<X.DeleteFragmentResponse> {\n        return this.fragmentsDomain.deleteFragment(fragmentId);\n    }\n\n    mergeFragment(fragmentId: any): Observable<X.MergeFragmentResponse> {\n        return this.fragmentsDomain.mergeFragment(fragmentId);\n    }\n\n    publishFragment(fragmentId: any): Observable<X.PublishFragmentResponse> {\n        return this.fragmentsDomain.publishFragment(fragmentId);\n    }\n\n    readFragment(fragmentId: any): DataState<X.ReadFragmentResponse> {\n        return this.fragmentsDomain.readFragment(fragmentId);\n    }\n    \n    readFragment2(fragmentId: any): Observable<X.ReadFragmentResponse> {\n        return this.fragmentsDomain.readFragment2(fragmentId);\n    }\n\n    readFragmentDiff(fragmentId: any): DataState<X.ReadFragmentDiffResponse> {\n        return this.fragmentsDomain.readFragmentDiff(fragmentId);\n    }\n    \n    readFragmentDiff2(fragmentId: any): Observable<X.ReadFragmentDiffResponse> {\n        return this.fragmentsDomain.readFragmentDiff2(fragmentId);\n    }\n\n    readFragmentSample(fragmentId: any): DataState<X.ReadFragmentSampleResponse> {\n        return this.fragmentsDomain.readFragmentSample(fragmentId);\n    }\n    \n    readFragmentSample2(fragmentId: any): Observable<X.ReadFragmentSampleResponse> {\n        return this.fragmentsDomain.readFragmentSample2(fragmentId);\n    }\n\n    updateFragment(fragmentId: any, body: X.UpdateFragmentBody): Observable<X.UpdateFragmentResponse> {\n        return this.fragmentsDomain.updateFragment(fragmentId, body);\n    }\n\n    /**\n     * Geometries Management domain\n     */\n    private _geometriesDomain: X.GeometriesDomain;\n    \n    public get geometriesDomain(): X.GeometriesDomain {\n        if (!this._geometriesDomain) {\n            this._geometriesDomain = this.injector.get(X.GeometriesDomain);\n        }\n    \n        return this._geometriesDomain;\n    }\n\n    bulkReadGeometries(params: X.BulkReadGeometriesQuery): DataState<X.BulkReadGeometriesResponseEntity[]> {\n        return this.geometriesDomain.bulkReadGeometries(params);\n    }\n    \n    bulkReadGeometries2(params: X.BulkReadGeometriesQuery): Observable<X.BulkReadGeometriesResponseEntity[]> {\n        return this.geometriesDomain.bulkReadGeometries2(params);\n    }\n\n    bulkUpdateGeometries(body: X.BulkUpdateGeometriesBody): Observable<X.BulkUpdateGeometriesResponse> {\n        return this.geometriesDomain.bulkUpdateGeometries(body);\n    }\n\n    readGeometryByCard(cardId: any): DataState<X.ReadGeometryByCardResponse> {\n        return this.geometriesDomain.readGeometryByCard(cardId);\n    }\n    \n    readGeometryByCard2(cardId: any): Observable<X.ReadGeometryByCardResponse> {\n        return this.geometriesDomain.readGeometryByCard2(cardId);\n    }\n\n    readGraph(params: X.ReadGraphQuery): DataState<X.ReadGraphResponse> {\n        return this.geometriesDomain.readGraph(params);\n    }\n    \n    readGraph2(params: X.ReadGraphQuery): Observable<X.ReadGraphResponse> {\n        return this.geometriesDomain.readGraph2(params);\n    }\n\n    /**\n     * Hashtags Management domain\n     */\n    private _hashtagsDomain: X.HashtagsDomain;\n    \n    public get hashtagsDomain(): X.HashtagsDomain {\n        if (!this._hashtagsDomain) {\n            this._hashtagsDomain = this.injector.get(X.HashtagsDomain);\n        }\n    \n        return this._hashtagsDomain;\n    }\n\n    bulkReadHashtags(params: X.BulkReadHashtagsQuery): DataState<X.BulkReadHashtagsResponseEntity[]> {\n        return this.hashtagsDomain.bulkReadHashtags(params);\n    }\n    \n    bulkReadHashtags2(params: X.BulkReadHashtagsQuery): Observable<X.BulkReadHashtagsResponseEntity[]> {\n        return this.hashtagsDomain.bulkReadHashtags2(params);\n    }\n\n    createHashtag(body: X.CreateHashtagBody): Observable<X.CreateHashtagResponse> {\n        return this.hashtagsDomain.createHashtag(body);\n    }\n\n    deleteHashtag(hashtagId: any, params: X.DeleteHashtagQuery): Observable<X.DeleteHashtagResponse> {\n        return this.hashtagsDomain.deleteHashtag(hashtagId, params);\n    }\n\n    readHashtagsToc(params: X.ReadHashtagsTocQuery): DataState<X.ReadHashtagsTocResponse> {\n        return this.hashtagsDomain.readHashtagsToc(params);\n    }\n    \n    readHashtagsToc2(params: X.ReadHashtagsTocQuery): Observable<X.ReadHashtagsTocResponse> {\n        return this.hashtagsDomain.readHashtagsToc2(params);\n    }\n\n    updateHashtag(hashtagId: any, body: X.UpdateHashtagBody): Observable<X.UpdateHashtagResponse> {\n        return this.hashtagsDomain.updateHashtag(hashtagId, body);\n    }\n\n    /**\n     * Internal Management domain\n     */\n    private _internalDomain: X.InternalDomain;\n    \n    public get internalDomain(): X.InternalDomain {\n        if (!this._internalDomain) {\n            this._internalDomain = this.injector.get(X.InternalDomain);\n        }\n    \n        return this._internalDomain;\n    }\n\n    deleteEntriesForUser(userId: any): Observable<X.DeleteEntriesForUserResponse> {\n        return this.internalDomain.deleteEntriesForUser(userId);\n    }\n\n    /**\n     * Invoice Management domain\n     */\n    private _invoicesDomain: X.InvoicesDomain;\n    \n    public get invoicesDomain(): X.InvoicesDomain {\n        if (!this._invoicesDomain) {\n            this._invoicesDomain = this.injector.get(X.InvoicesDomain);\n        }\n    \n        return this._invoicesDomain;\n    }\n\n    bulkReadInvoices(): DataState<X.BulkReadInvoicesResponseEntity[]> {\n        return this.invoicesDomain.bulkReadInvoices();\n    }\n    \n    bulkReadInvoices2(): Observable<X.BulkReadInvoicesResponseEntity[]> {\n        return this.invoicesDomain.bulkReadInvoices2();\n    }\n\n    calculateDebt(): DataState<X.CalculateDebtResponse> {\n        return this.invoicesDomain.calculateDebt();\n    }\n    \n    calculateDebt2(): Observable<X.CalculateDebtResponse> {\n        return this.invoicesDomain.calculateDebt2();\n    }\n\n    /**\n     * Links Management domain\n     */\n    private _linksDomain: X.LinksDomain;\n    \n    public get linksDomain(): X.LinksDomain {\n        if (!this._linksDomain) {\n            this._linksDomain = this.injector.get(X.LinksDomain);\n        }\n    \n        return this._linksDomain;\n    }\n\n    deleteLink(fromCardId: any, toCardId: any): Observable<X.DeleteLinkResponse> {\n        return this.linksDomain.deleteLink(fromCardId, toCardId);\n    }\n\n    readOrCreateLink(body: X.ReadOrCreateLinkBody): Observable<X.ReadOrCreateLinkResponse> {\n        return this.linksDomain.readOrCreateLink(body);\n    }\n\n    /**\n     * MediaItems Management domain\n     */\n    private _mediaitemsDomain: X.MediaitemsDomain;\n    \n    public get mediaitemsDomain(): X.MediaitemsDomain {\n        if (!this._mediaitemsDomain) {\n            this._mediaitemsDomain = this.injector.get(X.MediaitemsDomain);\n        }\n    \n        return this._mediaitemsDomain;\n    }\n\n    bulkReadMediaitems(params: X.BulkReadMediaitemsQuery): DataState<X.BulkReadMediaitemsResponseEntity[]> {\n        return this.mediaitemsDomain.bulkReadMediaitems(params);\n    }\n    \n    bulkReadMediaitems2(params: X.BulkReadMediaitemsQuery): Observable<X.BulkReadMediaitemsResponseEntity[]> {\n        return this.mediaitemsDomain.bulkReadMediaitems2(params);\n    }\n\n    deleteMediaitem(mediaitemId: any, params: X.DeleteMediaitemQuery): Observable<X.DeleteMediaitemResponse> {\n        return this.mediaitemsDomain.deleteMediaitem(mediaitemId, params);\n    }\n\n    readMediaitem(mediaitemId: any): DataState<X.ReadMediaitemResponse> {\n        return this.mediaitemsDomain.readMediaitem(mediaitemId);\n    }\n    \n    readMediaitem2(mediaitemId: any): Observable<X.ReadMediaitemResponse> {\n        return this.mediaitemsDomain.readMediaitem2(mediaitemId);\n    }\n\n    readMediaitemByProcessId(processId: any): DataState<X.ReadMediaitemByProcessIdResponse> {\n        return this.mediaitemsDomain.readMediaitemByProcessId(processId);\n    }\n    \n    readMediaitemByProcessId2(processId: any): Observable<X.ReadMediaitemByProcessIdResponse> {\n        return this.mediaitemsDomain.readMediaitemByProcessId2(processId);\n    }\n\n    readOrCreateMediaitem(body: X.ReadOrCreateMediaitemBody): Observable<X.ReadOrCreateMediaitemResponse> {\n        return this.mediaitemsDomain.readOrCreateMediaitem(body);\n    }\n\n    updateMediaitem(mediaitemId: any, body: X.UpdateMediaitemBody): Observable<X.UpdateMediaitemResponse> {\n        return this.mediaitemsDomain.updateMediaitem(mediaitemId, body);\n    }\n\n    updateMediaitemRepresentation(mediaitemId: any, body: X.UpdateMediaitemRepresentationBody): Observable<X.UpdateMediaitemRepresentationResponse> {\n        return this.mediaitemsDomain.updateMediaitemRepresentation(mediaitemId, body);\n    }\n\n    /**\n     * Notification Management domain\n     */\n    private _notificationsDomain: X.NotificationsDomain;\n    \n    public get notificationsDomain(): X.NotificationsDomain {\n        if (!this._notificationsDomain) {\n            this._notificationsDomain = this.injector.get(X.NotificationsDomain);\n        }\n    \n        return this._notificationsDomain;\n    }\n\n    acknowledgeNotification(notificationId: any): Observable<X.AcknowledgeNotificationResponse> {\n        return this.notificationsDomain.acknowledgeNotification(notificationId);\n    }\n\n    bulkReadNotifications(params: X.BulkReadNotificationsQuery): DataState<X.BulkReadNotificationsResponseEntity[]> {\n        return this.notificationsDomain.bulkReadNotifications(params);\n    }\n    \n    bulkReadNotifications2(params: X.BulkReadNotificationsQuery): Observable<X.BulkReadNotificationsResponseEntity[]> {\n        return this.notificationsDomain.bulkReadNotifications2(params);\n    }\n\n    /**\n     * Paths Management domain\n     */\n    private _pathsDomain: X.PathsDomain;\n    \n    public get pathsDomain(): X.PathsDomain {\n        if (!this._pathsDomain) {\n            this._pathsDomain = this.injector.get(X.PathsDomain);\n        }\n    \n        return this._pathsDomain;\n    }\n\n    bulkDeletePaths(params: X.BulkDeletePathsQuery): Observable<X.BulkDeletePathsResponse> {\n        return this.pathsDomain.bulkDeletePaths(params);\n    }\n\n    bulkReadPaths(params: X.BulkReadPathsQuery): DataState<X.BulkReadPathsResponseEntity[]> {\n        return this.pathsDomain.bulkReadPaths(params);\n    }\n    \n    bulkReadPaths2(params: X.BulkReadPathsQuery): Observable<X.BulkReadPathsResponseEntity[]> {\n        return this.pathsDomain.bulkReadPaths2(params);\n    }\n\n    createPath(body: X.CreatePathBody): Observable<X.CreatePathResponse> {\n        return this.pathsDomain.createPath(body);\n    }\n\n    readPath(pathId: any): DataState<X.ReadPathResponse> {\n        return this.pathsDomain.readPath(pathId);\n    }\n    \n    readPath2(pathId: any): Observable<X.ReadPathResponse> {\n        return this.pathsDomain.readPath2(pathId);\n    }\n\n    updatePath(pathId: any, body: X.UpdatePathBody): Observable<X.UpdatePathResponse> {\n        return this.pathsDomain.updatePath(pathId, body);\n    }\n\n    /**\n     * Payment Cards Management domain\n     */\n    private _payment_cardsDomain: X.PaymentCardsDomain;\n    \n    public get payment_cardsDomain(): X.PaymentCardsDomain {\n        if (!this._payment_cardsDomain) {\n            this._payment_cardsDomain = this.injector.get(X.PaymentCardsDomain);\n        }\n    \n        return this._payment_cardsDomain;\n    }\n\n    asDefaultMarkPaymentcard(paymentCardId: any): Observable<X.AsDefaultMarkPaymentcardResponse> {\n        return this.payment_cardsDomain.asDefaultMarkPaymentcard(paymentCardId);\n    }\n\n    bulkReadPaymentcards(): DataState<X.BulkReadPaymentcardsResponseEntity[]> {\n        return this.payment_cardsDomain.bulkReadPaymentcards();\n    }\n    \n    bulkReadPaymentcards2(): Observable<X.BulkReadPaymentcardsResponseEntity[]> {\n        return this.payment_cardsDomain.bulkReadPaymentcards2();\n    }\n\n    createPaymentcard(body: X.CreatePaymentcardBody): Observable<X.CreatePaymentcardResponse> {\n        return this.payment_cardsDomain.createPaymentcard(body);\n    }\n\n    deletePaymentcard(paymentCardId: any): Observable<X.DeletePaymentcardResponse> {\n        return this.payment_cardsDomain.deletePaymentcard(paymentCardId);\n    }\n\n    payWithDefaultPaymentCard(body: X.PayWithDefaultPaymentCardBody): Observable<X.PayWithDefaultPaymentCardResponse> {\n        return this.payment_cardsDomain.payWithDefaultPaymentCard(body);\n    }\n\n    renderPaymentCardWidget(): DataState<X.RenderPaymentCardWidgetResponse> {\n        return this.payment_cardsDomain.renderPaymentCardWidget();\n    }\n    \n    renderPaymentCardWidget2(): Observable<X.RenderPaymentCardWidgetResponse> {\n        return this.payment_cardsDomain.renderPaymentCardWidget2();\n    }\n\n    /**\n     * Payments Management domain\n     */\n    private _paymentsDomain: X.PaymentsDomain;\n    \n    public get paymentsDomain(): X.PaymentsDomain {\n        if (!this._paymentsDomain) {\n            this._paymentsDomain = this.injector.get(X.PaymentsDomain);\n        }\n    \n        return this._paymentsDomain;\n    }\n\n    updatePaymentStatus(body: X.UpdatePaymentStatusBody): Observable<X.UpdatePaymentStatusResponse> {\n        return this.paymentsDomain.updatePaymentStatus(body);\n    }\n\n    /**\n     * Recall Management domain\n     */\n    private _recallDomain: X.RecallDomain;\n    \n    public get recallDomain(): X.RecallDomain {\n        if (!this._recallDomain) {\n            this._recallDomain = this.injector.get(X.RecallDomain);\n        }\n    \n        return this._recallDomain;\n    }\n\n    createRecallSession(body: X.CreateRecallSessionBody): Observable<X.CreateRecallSessionResponse> {\n        return this.recallDomain.createRecallSession(body);\n    }\n\n    readRecallSummary(): DataState<X.ReadRecallSummaryResponse> {\n        return this.recallDomain.readRecallSummary();\n    }\n    \n    readRecallSummary2(): Observable<X.ReadRecallSummaryResponse> {\n        return this.recallDomain.readRecallSummary2();\n    }\n\n    /**\n     * Subscription Management domain\n     */\n    private _subscriptionsDomain: X.SubscriptionsDomain;\n    \n    public get subscriptionsDomain(): X.SubscriptionsDomain {\n        if (!this._subscriptionsDomain) {\n            this._subscriptionsDomain = this.injector.get(X.SubscriptionsDomain);\n        }\n    \n        return this._subscriptionsDomain;\n    }\n\n    changeSubscription(body: X.ChangeSubscriptionBody): Observable<X.ChangeSubscriptionResponse> {\n        return this.subscriptionsDomain.changeSubscription(body);\n    }\n\n    /**\n     * Tasks Management domain\n     */\n    private _tasksDomain: X.TasksDomain;\n    \n    public get tasksDomain(): X.TasksDomain {\n        if (!this._tasksDomain) {\n            this._tasksDomain = this.injector.get(X.TasksDomain);\n        }\n    \n        return this._tasksDomain;\n    }\n\n    bulkReadTasks(params: X.BulkReadTasksQuery): DataState<X.BulkReadTasksResponseEntity[]> {\n        return this.tasksDomain.bulkReadTasks(params);\n    }\n    \n    bulkReadTasks2(params: X.BulkReadTasksQuery): Observable<X.BulkReadTasksResponseEntity[]> {\n        return this.tasksDomain.bulkReadTasks2(params);\n    }\n\n    bulkReadTaskBins(params: X.BulkReadTaskBinsQuery): DataState<X.BulkReadTaskBinsResponseEntity[]> {\n        return this.tasksDomain.bulkReadTaskBins(params);\n    }\n    \n    bulkReadTaskBins2(params: X.BulkReadTaskBinsQuery): Observable<X.BulkReadTaskBinsResponseEntity[]> {\n        return this.tasksDomain.bulkReadTaskBins2(params);\n    }\n\n    /**\n     * Words Management domain\n     */\n    private _wordsDomain: X.WordsDomain;\n    \n    public get wordsDomain(): X.WordsDomain {\n        if (!this._wordsDomain) {\n            this._wordsDomain = this.injector.get(X.WordsDomain);\n        }\n    \n        return this._wordsDomain;\n    }\n\n    bulkReadWords(params: X.BulkReadWordsQuery): DataState<X.BulkReadWordsResponseEntity[]> {\n        return this.wordsDomain.bulkReadWords(params);\n    }\n    \n    bulkReadWords2(params: X.BulkReadWordsQuery): Observable<X.BulkReadWordsResponseEntity[]> {\n        return this.wordsDomain.bulkReadWords2(params);\n    }\n\n}","/**\n  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE\n  * OVERWRITTEN\n  */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\n/** Domains */\nimport { AccountSettingsDomain } from './domains/account_settings/index';\nimport { AccountsDomain } from './domains/accounts/index';\nimport { AttemptStatsDomain } from './domains/attempt_stats/index';\nimport { AttemptsDomain } from './domains/attempts/index';\nimport { AuthTokensDomain } from './domains/auth_tokens/index';\nimport { CardsDomain } from './domains/cards/index';\nimport { CategoriesDomain } from './domains/categories/index';\nimport { ContactsDomain } from './domains/contacts/index';\nimport { DonationsDomain } from './domains/donations/index';\nimport { ExternalAppsDomain } from './domains/external_apps/index';\nimport { FocusRecordsDomain } from './domains/focus_records/index';\nimport { FragmentHashtagsDomain } from './domains/fragment_hashtags/index';\nimport { FragmentWordsDomain } from './domains/fragment_words/index';\nimport { FragmentsDomain } from './domains/fragments/index';\nimport { GeometriesDomain } from './domains/geometries/index';\nimport { HashtagsDomain } from './domains/hashtags/index';\nimport { InternalDomain } from './domains/internal/index';\nimport { InvoicesDomain } from './domains/invoices/index';\nimport { LinksDomain } from './domains/links/index';\nimport { MediaitemsDomain } from './domains/mediaitems/index';\nimport { NotificationsDomain } from './domains/notifications/index';\nimport { PathsDomain } from './domains/paths/index';\nimport { PaymentCardsDomain } from './domains/payment_cards/index';\nimport { PaymentsDomain } from './domains/payments/index';\nimport { RecallDomain } from './domains/recall/index';\nimport { SubscriptionsDomain } from './domains/subscriptions/index';\nimport { TasksDomain } from './domains/tasks/index';\nimport { WordsDomain } from './domains/words/index';\n\n/** Services */\nimport { ClientService } from './services/client.service';\nimport { APIService } from './services/api.service';\nimport { Config } from './services/config.service';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [\n    ClientService,\n\n    // Domains\n    AccountSettingsDomain,\n    AccountsDomain,\n    AttemptStatsDomain,\n    AttemptsDomain,\n    AuthTokensDomain,\n    CardsDomain,\n    CategoriesDomain,\n    ContactsDomain,\n    DonationsDomain,\n    ExternalAppsDomain,\n    FocusRecordsDomain,\n    FragmentHashtagsDomain,\n    FragmentWordsDomain,\n    FragmentsDomain,\n    GeometriesDomain,\n    HashtagsDomain,\n    InternalDomain,\n    InvoicesDomain,\n    LinksDomain,\n    MediaitemsDomain,\n    NotificationsDomain,\n    PathsDomain,\n    PaymentCardsDomain,\n    PaymentsDomain,\n    RecallDomain,\n    SubscriptionsDomain,\n    TasksDomain,\n    WordsDomain,\n\n    // Facade\n    APIService,\n  ]\n})\nexport class CoSphereClientModule {\n    static forRoot(config: Config): ModuleWithProviders {\n        return {\n            ngModule: CoSphereClientModule,\n            providers: [\n                {provide: 'config', useValue: config}\n            ]\n        };\n    }\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {Config as Éµa} from './services/config.service';"],"names":["_.has","_.isEmpty","X.AccountSettingsDomain","X.AccountsDomain","X.AttemptStatsDomain","X.AttemptsDomain","X.AuthTokensDomain","X.CardsDomain","X.CategoriesDomain","X.ContactsDomain","X.DonationsDomain","X.ExternalAppsDomain","X.FocusRecordsDomain","X.FragmentHashtagsDomain","X.FragmentWordsDomain","X.FragmentsDomain","X.GeometriesDomain","X.HashtagsDomain","X.InternalDomain","X.InvoicesDomain","X.LinksDomain","X.MediaitemsDomain","X.NotificationsDomain","X.PathsDomain","X.PaymentCardsDomain","X.PaymentsDomain","X.RecallDomain","X.SubscriptionsDomain","X.TasksDomain","X.WordsDomain"],"mappings":"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"}
