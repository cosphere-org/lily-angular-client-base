/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Fragments Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class FragmentsDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * List Remote Fragments
     * -------------
     *
     * List Remote Fragments
     */
    bulkReadFragments(params) {
        return this.client.getDataState('/fragments/', { params, responseMap: 'fragments', authorizationRequired: true });
    }
    bulkReadFragments2(params) {
        return this.client.get('/fragments/', { params, responseMap: 'fragments', authorizationRequired: true });
    }
    /**
     * List Published Remote Fragments
     * -------------
     *
     * List Published Remote Fragments
     */
    bulkReadPublishedFragments(params) {
        return this.client.getDataState('/fragments/published/', { params, responseMap: 'fragments', authorizationRequired: false });
    }
    bulkReadPublishedFragments2(params) {
        return this.client.get('/fragments/published/', { params, responseMap: 'fragments', authorizationRequired: false });
    }
    /**
     * Create Remote Fragment
     * -------------
     *
     * Create Remote Fragment
     */
    createFragment() {
        return this.client
            .post('/fragments/', {}, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Delete Remote Fragment
     * -------------
     *
     * Delete Remote Fragment
     */
    deleteFragment(fragmentId) {
        return this.client
            .delete(`/fragments/${fragmentId}`, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Merge Remote Fragment
     * -------------
     *
     * Merge Remote Fragment
     */
    mergeFragment(fragmentId) {
        return this.client
            .post(`/fragments/${fragmentId}/merge/`, {}, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Publish Remote Fragment
     * -------------
     *
     * Publish Remote Fragment
     */
    publishFragment(fragmentId) {
        return this.client
            .put(`/fragments/${fragmentId}/publish/`, {}, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Read Remote Fragment
     * -------------
     *
     * Read Remote Fragment
     */
    readFragment(fragmentId) {
        return this.client.getDataState(`/fragments/${fragmentId}`, { authorizationRequired: true });
    }
    readFragment2(fragmentId) {
        return this.client.get(`/fragments/${fragmentId}`, { authorizationRequired: true });
    }
    /**
     * Read Fragment Diff
     * -------------
     *
     * Read Fragment Diff
     */
    readFragmentDiff(fragmentId) {
        return this.client.getDataState(`/fragments/${fragmentId}/diff/`, { authorizationRequired: true });
    }
    readFragmentDiff2(fragmentId) {
        return this.client.get(`/fragments/${fragmentId}/diff/`, { authorizationRequired: true });
    }
    /**
     * Read Fragment Sample
     * -------------
     *
     * Read Fragment Sample
     */
    readFragmentSample(fragmentId) {
        return this.client.getDataState(`/fragments/${fragmentId}/sample/`, { authorizationRequired: false });
    }
    readFragmentSample2(fragmentId) {
        return this.client.get(`/fragments/${fragmentId}/sample/`, { authorizationRequired: false });
    }
    /**
     * Update Remote Fragment
     * -------------
     *
     * Update Remote Fragment
     */
    updateFragment(fragmentId, body) {
        return this.client
            .put(`/fragments/${fragmentId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
FragmentsDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FragmentsDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,