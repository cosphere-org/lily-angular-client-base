/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Bricks Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class BricksDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * Bulk Read Bricks Game Attempts
     */
    bulkReadGameattempts(gameId) {
        return this.client.getDataState(`/games/${gameId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadGameattempts2(gameId) {
        return this.client.get(`/games/${gameId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Bulk Read Game
     */
    bulkReadGames() {
        return this.client.getDataState('/games/', { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadGames2() {
        return this.client.get('/games/', { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Create Game
     */
    createGame(body) {
        return this.client
            .post('/games/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Create Bricks Game Attempt
     */
    createGameattempt(gameId, body) {
        return this.client
            .post(`/games/${gameId}/attempts/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Delete Game
     */
    deleteGame(gameId) {
        return this.client
            .delete(`/games/${gameId}`, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Read Game
     */
    readGame(gameId) {
        return this.client.getDataState(`/games/${gameId}`, { authorizationRequired: true });
    }
    readGame2(gameId) {
        return this.client.get(`/games/${gameId}`, { authorizationRequired: true });
    }
    /**
     * Update Game
     */
    updateGame(gameId, body) {
        return this.client
            .put(`/games/${gameId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
BricksDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BricksDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpY2tzLmRvbWFpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjb3NwaGVyZS9jbGllbnQvIiwic291cmNlcyI6WyJkb21haW5zL2JyaWNrcy9icmlja3MuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTTlELE1BQU07SUFDRixZQUFvQixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUU3Qzs7T0FFRztJQUNJLG9CQUFvQixDQUFDLE1BQVc7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUF5QyxVQUFVLE1BQU0sWUFBWSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hLLENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxNQUFXO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBeUMsVUFBVSxNQUFNLFlBQVksRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2SixDQUFDO0lBRUQ7O09BRUc7SUFDSSxhQUFhO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBa0MsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RJLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBa0MsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzdILENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVUsQ0FBQyxJQUFzQjtRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQXVCLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1RSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQkFBaUIsQ0FBQyxNQUFXLEVBQUUsSUFBNkI7UUFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUE4QixVQUFVLE1BQU0sWUFBWSxFQUFFLElBQUksRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQ3RHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVUsQ0FBQyxNQUFXO1FBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLE1BQU0sQ0FBdUIsVUFBVSxNQUFNLEVBQUUsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQ2pGLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVEsQ0FBQyxNQUFXO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBcUIsVUFBVSxNQUFNLEVBQUUsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVNLFNBQVMsQ0FBQyxNQUFXO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBcUIsVUFBVSxNQUFNLEVBQUUsRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEcsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLE1BQVcsRUFBRSxJQUFzQjtRQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixHQUFHLENBQXVCLFVBQVUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDcEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O1lBdkVKLFVBQVU7Ozs7WUFMRixhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICogVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVELCBBTEwgTUFOVUFMIENIQU5HRVMgQ0FOIEJFXG4gICogT1ZFUldSSVRURU5cbiAgKi9cblxuLyoqXG4gKiBCcmlja3MgTWFuYWdlbWVudCBEb21haW5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuaW1wb3J0IHsgQ2xpZW50U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFTdGF0ZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgKiBhcyBYIGZyb20gJy4vYnJpY2tzLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCcmlja3NEb21haW4ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xpZW50OiBDbGllbnRTZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogQnVsayBSZWFkIEJyaWNrcyBHYW1lIEF0dGVtcHRzXG4gICAgICovXG4gICAgcHVibGljIGJ1bGtSZWFkR2FtZWF0dGVtcHRzKGdhbWVJZDogYW55KTogRGF0YVN0YXRlPFguQnVsa1JlYWRHYW1lYXR0ZW1wdHNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5CdWxrUmVhZEdhbWVhdHRlbXB0c1Jlc3BvbnNlRW50aXR5W10+KGAvZ2FtZXMvJHtnYW1lSWR9L2F0dGVtcHRzL2AsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgYnVsa1JlYWRHYW1lYXR0ZW1wdHMyKGdhbWVJZDogYW55KTogT2JzZXJ2YWJsZTxYLkJ1bGtSZWFkR2FtZWF0dGVtcHRzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRHYW1lYXR0ZW1wdHNSZXNwb25zZUVudGl0eVtdPihgL2dhbWVzLyR7Z2FtZUlkfS9hdHRlbXB0cy9gLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWxrIFJlYWQgR2FtZVxuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZEdhbWVzKCk6IERhdGFTdGF0ZTxYLkJ1bGtSZWFkR2FtZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5CdWxrUmVhZEdhbWVzUmVzcG9uc2VFbnRpdHlbXT4oJy9nYW1lcy8nLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGJ1bGtSZWFkR2FtZXMyKCk6IE9ic2VydmFibGU8WC5CdWxrUmVhZEdhbWVzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRHYW1lc1Jlc3BvbnNlRW50aXR5W10+KCcvZ2FtZXMvJywgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlR2FtZShib2R5OiBYLkNyZWF0ZUdhbWVCb2R5KTogT2JzZXJ2YWJsZTxYLkNyZWF0ZUdhbWVSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguQ3JlYXRlR2FtZVJlc3BvbnNlPignL2dhbWVzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEJyaWNrcyBHYW1lIEF0dGVtcHRcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlR2FtZWF0dGVtcHQoZ2FtZUlkOiBhbnksIGJvZHk6IFguQ3JlYXRlR2FtZWF0dGVtcHRCb2R5KTogT2JzZXJ2YWJsZTxYLkNyZWF0ZUdhbWVhdHRlbXB0UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkNyZWF0ZUdhbWVhdHRlbXB0UmVzcG9uc2U+KGAvZ2FtZXMvJHtnYW1lSWR9L2F0dGVtcHRzL2AsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIEdhbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlR2FtZShnYW1lSWQ6IGFueSk6IE9ic2VydmFibGU8WC5EZWxldGVHYW1lUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAuZGVsZXRlPFguRGVsZXRlR2FtZVJlc3BvbnNlPihgL2dhbWVzLyR7Z2FtZUlkfWAsIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBHYW1lXG4gICAgICovXG4gICAgcHVibGljIHJlYWRHYW1lKGdhbWVJZDogYW55KTogRGF0YVN0YXRlPFguUmVhZEdhbWVSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguUmVhZEdhbWVSZXNwb25zZT4oYC9nYW1lcy8ke2dhbWVJZH1gLCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHJlYWRHYW1lMihnYW1lSWQ6IGFueSk6IE9ic2VydmFibGU8WC5SZWFkR2FtZVJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5SZWFkR2FtZVJlc3BvbnNlPihgL2dhbWVzLyR7Z2FtZUlkfWAsIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBHYW1lXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUdhbWUoZ2FtZUlkOiBhbnksIGJvZHk6IFguVXBkYXRlR2FtZUJvZHkpOiBPYnNlcnZhYmxlPFguVXBkYXRlR2FtZVJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLnB1dDxYLlVwZGF0ZUdhbWVSZXNwb25zZT4oYC9nYW1lcy8ke2dhbWVJZH1gLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxufSJdfQ==