/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Hashtags Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class HashtagsDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * List Hashtags
     * -------------
     *
     * Enables one to list a series of Hashtag instances. It accepts various query parameters such as: - `limit` - `offset` - `first_character`
     */
    bulkReadHashtags(params) {
        return this.client.getDataState('/hashtags/', { params, responseMap: 'hashtags', authorizationRequired: true });
    }
    bulkReadHashtags2(params) {
        return this.client.get('/hashtags/', { params, responseMap: 'hashtags', authorizationRequired: true });
    }
    /**
     * Creating a single Hashtag
     * -------------
     *
     * Enables one to create a single Hashtag instance.
     */
    createHashtag(body) {
        return this.client
            .post('/hashtags/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Removing a single Hashtag
     * -------------
     *
     * Enables one to detach a single Hashtag instance from a list cards given by `card_ids`.
     */
    deleteHashtag(hashtagId, params) {
        return this.client
            .delete(`/hashtags/${hashtagId}`, { params, authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * List Hashtags TOC
     * -------------
     *
     * Enables one to list Hashtags Table of Contents made out of Hashtags. Note: Currently this endpoint returns only a flat list of hashtags with the count of Cards with which they're attached to. In the future though one could propose a mechanism which could calculate hierarchy between those hashtags (parent - child relationships) and ordering based on the knowledge grid topology. It accepts various query parameters such as: - `limit` - `offset`
     */
    readHashtagsToc(params) {
        return this.client.getDataState('/hashtags/toc', { params, authorizationRequired: true });
    }
    readHashtagsToc2(params) {
        return this.client.get('/hashtags/toc', { params, authorizationRequired: true });
    }
    /**
     * Updating a single Hashtag
     * -------------
     *
     * Enables one to update a single Hashtag instance with a list of `card_ids` to which it should get attached to.
     */
    updateHashtag(hashtagId, body) {
        return this.client
            .put(`/hashtags/${hashtagId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
HashtagsDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HashtagsDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaHRhZ3MuZG9tYWluLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNvc3BoZXJlL2NsaWVudC8iLCJzb3VyY2VzIjpbImRvbWFpbnMvaGFzaHRhZ3MvaGFzaHRhZ3MuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTTlELE1BQU07SUFDRixZQUFvQixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUU3Qzs7Ozs7T0FLRztJQUNJLGdCQUFnQixDQUFDLE1BQStCO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBcUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4SixDQUFDO0lBRU0saUJBQWlCLENBQUMsTUFBK0I7UUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFxQyxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9JLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGFBQWEsQ0FBQyxJQUF5QjtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQTBCLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUNsRixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxhQUFhLENBQUMsU0FBYyxFQUFFLE1BQTRCO1FBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLE1BQU0sQ0FBMEIsYUFBYSxTQUFTLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUNsRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxlQUFlLENBQUMsTUFBOEI7UUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUE0QixlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6SCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsTUFBOEI7UUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUE0QixlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxhQUFhLENBQUMsU0FBYyxFQUFFLElBQXlCO1FBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLEdBQUcsQ0FBMEIsYUFBYSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM3RixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7WUFsRUosVUFBVTs7OztZQUxGLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgKiBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURUQsIEFMTCBNQU5VQUwgQ0hBTkdFUyBDQU4gQkVcbiAgKiBPVkVSV1JJVFRFTlxuICAqL1xuXG4vKipcbiAqIEhhc2h0YWdzIE1hbmFnZW1lbnQgRG9tYWluXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmltcG9ydCB7IENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuaW50ZXJmYWNlJztcblxuaW1wb3J0ICogYXMgWCBmcm9tICcuL2hhc2h0YWdzLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIYXNodGFnc0RvbWFpbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IENsaWVudFNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IEhhc2h0YWdzXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gbGlzdCBhIHNlcmllcyBvZiBIYXNodGFnIGluc3RhbmNlcy4gSXQgYWNjZXB0cyB2YXJpb3VzIHF1ZXJ5IHBhcmFtZXRlcnMgc3VjaCBhczogLSBgbGltaXRgIC0gYG9mZnNldGAgLSBgZmlyc3RfY2hhcmFjdGVyYFxuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZEhhc2h0YWdzKHBhcmFtczogWC5CdWxrUmVhZEhhc2h0YWdzUXVlcnkpOiBEYXRhU3RhdGU8WC5CdWxrUmVhZEhhc2h0YWdzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRIYXNodGFnc1Jlc3BvbnNlRW50aXR5W10+KCcvaGFzaHRhZ3MvJywgeyBwYXJhbXMsIHJlc3BvbnNlTWFwOiAnaGFzaHRhZ3MnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZEhhc2h0YWdzMihwYXJhbXM6IFguQnVsa1JlYWRIYXNodGFnc1F1ZXJ5KTogT2JzZXJ2YWJsZTxYLkJ1bGtSZWFkSGFzaHRhZ3NSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZEhhc2h0YWdzUmVzcG9uc2VFbnRpdHlbXT4oJy9oYXNodGFncy8nLCB7IHBhcmFtcywgcmVzcG9uc2VNYXA6ICdoYXNodGFncycsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGluZyBhIHNpbmdsZSBIYXNodGFnXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gY3JlYXRlIGEgc2luZ2xlIEhhc2h0YWcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUhhc2h0YWcoYm9keTogWC5DcmVhdGVIYXNodGFnQm9keSk6IE9ic2VydmFibGU8WC5DcmVhdGVIYXNodGFnUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkNyZWF0ZUhhc2h0YWdSZXNwb25zZT4oJy9oYXNodGFncy8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92aW5nIGEgc2luZ2xlIEhhc2h0YWdcbiAgICAgKiAtLS0tLS0tLS0tLS0tXG4gICAgICpcbiAgICAgKiBFbmFibGVzIG9uZSB0byBkZXRhY2ggYSBzaW5nbGUgSGFzaHRhZyBpbnN0YW5jZSBmcm9tIGEgbGlzdCBjYXJkcyBnaXZlbiBieSBgY2FyZF9pZHNgLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVIYXNodGFnKGhhc2h0YWdJZDogYW55LCBwYXJhbXM6IFguRGVsZXRlSGFzaHRhZ1F1ZXJ5KTogT2JzZXJ2YWJsZTxYLkRlbGV0ZUhhc2h0YWdSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5kZWxldGU8WC5EZWxldGVIYXNodGFnUmVzcG9uc2U+KGAvaGFzaHRhZ3MvJHtoYXNodGFnSWR9YCwgeyBwYXJhbXMsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgSGFzaHRhZ3MgVE9DXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gbGlzdCBIYXNodGFncyBUYWJsZSBvZiBDb250ZW50cyBtYWRlIG91dCBvZiBIYXNodGFncy4gTm90ZTogQ3VycmVudGx5IHRoaXMgZW5kcG9pbnQgcmV0dXJucyBvbmx5IGEgZmxhdCBsaXN0IG9mIGhhc2h0YWdzIHdpdGggdGhlIGNvdW50IG9mIENhcmRzIHdpdGggd2hpY2ggdGhleSdyZSBhdHRhY2hlZCB0by4gSW4gdGhlIGZ1dHVyZSB0aG91Z2ggb25lIGNvdWxkIHByb3Bvc2UgYSBtZWNoYW5pc20gd2hpY2ggY291bGQgY2FsY3VsYXRlIGhpZXJhcmNoeSBiZXR3ZWVuIHRob3NlIGhhc2h0YWdzIChwYXJlbnQgLSBjaGlsZCByZWxhdGlvbnNoaXBzKSBhbmQgb3JkZXJpbmcgYmFzZWQgb24gdGhlIGtub3dsZWRnZSBncmlkIHRvcG9sb2d5LiBJdCBhY2NlcHRzIHZhcmlvdXMgcXVlcnkgcGFyYW1ldGVycyBzdWNoIGFzOiAtIGBsaW1pdGAgLSBgb2Zmc2V0YFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkSGFzaHRhZ3NUb2MocGFyYW1zOiBYLlJlYWRIYXNodGFnc1RvY1F1ZXJ5KTogRGF0YVN0YXRlPFguUmVhZEhhc2h0YWdzVG9jUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldERhdGFTdGF0ZTxYLlJlYWRIYXNodGFnc1RvY1Jlc3BvbnNlPignL2hhc2h0YWdzL3RvYycsIHsgcGFyYW1zLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyByZWFkSGFzaHRhZ3NUb2MyKHBhcmFtczogWC5SZWFkSGFzaHRhZ3NUb2NRdWVyeSk6IE9ic2VydmFibGU8WC5SZWFkSGFzaHRhZ3NUb2NSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguUmVhZEhhc2h0YWdzVG9jUmVzcG9uc2U+KCcvaGFzaHRhZ3MvdG9jJywgeyBwYXJhbXMsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGluZyBhIHNpbmdsZSBIYXNodGFnXG4gICAgICogLS0tLS0tLS0tLS0tLVxuICAgICAqXG4gICAgICogRW5hYmxlcyBvbmUgdG8gdXBkYXRlIGEgc2luZ2xlIEhhc2h0YWcgaW5zdGFuY2Ugd2l0aCBhIGxpc3Qgb2YgYGNhcmRfaWRzYCB0byB3aGljaCBpdCBzaG91bGQgZ2V0IGF0dGFjaGVkIHRvLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVIYXNodGFnKGhhc2h0YWdJZDogYW55LCBib2R5OiBYLlVwZGF0ZUhhc2h0YWdCb2R5KTogT2JzZXJ2YWJsZTxYLlVwZGF0ZUhhc2h0YWdSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wdXQ8WC5VcGRhdGVIYXNodGFnUmVzcG9uc2U+KGAvaGFzaHRhZ3MvJHtoYXNodGFnSWR9YCwgYm9keSwgeyBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSlcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcih4ID0+ICFfLmlzRW1wdHkoeCkpKTtcbiAgICB9XG5cbn0iXX0=