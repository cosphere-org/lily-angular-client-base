/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Quizzer Entities Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class QuizzerDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * Build Read Quiz Attempts
     */
    bulkReadQuizattempts(quizId) {
        return this.client.getDataState(`/quizzes/${quizId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadQuizattempts2(quizId) {
        return this.client.get(`/quizzes/${quizId}/attempts/`, { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Bulk Read Quizzes
     */
    bulkReadQuizzes() {
        return this.client.getDataState('/quizzes/', { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadQuizzes2() {
        return this.client.get('/quizzes/', { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Create Quiz
     */
    createQuiz(body) {
        return this.client
            .post('/quizzes/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Create Quiz Attempt
     */
    createQuizattempt(quizId, body) {
        return this.client
            .post(`/quizzes/${quizId}/attempts/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Delete Quiz
     */
    deleteQuiz(quizId) {
        return this.client
            .delete(`/quizzes/${quizId}`, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Read Quiz
     */
    readQuiz(quizId) {
        return this.client.getDataState(`/quizzes/${quizId}`, { authorizationRequired: true });
    }
    readQuiz2(quizId) {
        return this.client.get(`/quizzes/${quizId}`, { authorizationRequired: true });
    }
    /**
     * Update Quiz
     */
    updateQuiz(quizId, body) {
        return this.client
            .put(`/quizzes/${quizId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
QuizzerDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuizzerDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpenplci5kb21haW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY29zcGhlcmUvY2xpZW50LyIsInNvdXJjZXMiOlsiZG9tYWlucy9xdWl6emVyL3F1aXp6ZXIuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTTlELE1BQU07SUFDRixZQUFvQixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUU3Qzs7T0FFRztJQUNJLG9CQUFvQixDQUFDLE1BQVc7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUF5QyxZQUFZLE1BQU0sWUFBWSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xLLENBQUM7SUFFTSxxQkFBcUIsQ0FBQyxNQUFXO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBeUMsWUFBWSxNQUFNLFlBQVksRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6SixDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBb0MsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFJLENBQUM7SUFFTSxnQkFBZ0I7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFvQyxXQUFXLEVBQUUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakksQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLElBQXNCO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLElBQUksQ0FBdUIsV0FBVyxFQUFFLElBQUksRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQzlFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQixDQUFDLE1BQVcsRUFBRSxJQUE2QjtRQUMvRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQThCLFlBQVksTUFBTSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDeEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLE1BQVc7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsTUFBTSxDQUF1QixZQUFZLE1BQU0sRUFBRSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDbkYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUSxDQUFDLE1BQVc7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFxQixZQUFZLE1BQU0sRUFBRSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvRyxDQUFDO0lBRU0sU0FBUyxDQUFDLE1BQVc7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFxQixZQUFZLE1BQU0sRUFBRSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQXNCO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTthQUNiLEdBQUcsQ0FBdUIsWUFBWSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUN0RixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7WUF2RUosVUFBVTs7OztZQUxGLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgKiBUSElTIEZJTEUgV0FTIEFVVE9HRU5FUkFURUQsIEFMTCBNQU5VQUwgQ0hBTkdFUyBDQU4gQkVcbiAgKiBPVkVSV1JJVFRFTlxuICAqL1xuXG4vKipcbiAqIFF1aXp6ZXIgRW50aXRpZXMgTWFuYWdlbWVudCBEb21haW5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuaW1wb3J0IHsgQ2xpZW50U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFTdGF0ZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsaWVudC5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgKiBhcyBYIGZyb20gJy4vcXVpenplci5tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUXVpenplckRvbWFpbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IENsaWVudFNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBSZWFkIFF1aXogQXR0ZW1wdHNcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1JlYWRRdWl6YXR0ZW1wdHMocXVpeklkOiBhbnkpOiBEYXRhU3RhdGU8WC5CdWxrUmVhZFF1aXphdHRlbXB0c1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldERhdGFTdGF0ZTxYLkJ1bGtSZWFkUXVpemF0dGVtcHRzUmVzcG9uc2VFbnRpdHlbXT4oYC9xdWl6emVzLyR7cXVpeklkfS9hdHRlbXB0cy9gLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGJ1bGtSZWFkUXVpemF0dGVtcHRzMihxdWl6SWQ6IGFueSk6IE9ic2VydmFibGU8WC5CdWxrUmVhZFF1aXphdHRlbXB0c1Jlc3BvbnNlRW50aXR5W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLkJ1bGtSZWFkUXVpemF0dGVtcHRzUmVzcG9uc2VFbnRpdHlbXT4oYC9xdWl6emVzLyR7cXVpeklkfS9hdHRlbXB0cy9gLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWxrIFJlYWQgUXVpenplc1xuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZFF1aXp6ZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRRdWl6emVzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRRdWl6emVzUmVzcG9uc2VFbnRpdHlbXT4oJy9xdWl6emVzLycsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgYnVsa1JlYWRRdWl6emVzMigpOiBPYnNlcnZhYmxlPFguQnVsa1JlYWRRdWl6emVzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRRdWl6emVzUmVzcG9uc2VFbnRpdHlbXT4oJy9xdWl6emVzLycsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBRdWl6XG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVF1aXooYm9keTogWC5DcmVhdGVRdWl6Qm9keSk6IE9ic2VydmFibGU8WC5DcmVhdGVRdWl6UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkNyZWF0ZVF1aXpSZXNwb25zZT4oJy9xdWl6emVzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIFF1aXogQXR0ZW1wdFxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVRdWl6YXR0ZW1wdChxdWl6SWQ6IGFueSwgYm9keTogWC5DcmVhdGVRdWl6YXR0ZW1wdEJvZHkpOiBPYnNlcnZhYmxlPFguQ3JlYXRlUXVpemF0dGVtcHRSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFguQ3JlYXRlUXVpemF0dGVtcHRSZXNwb25zZT4oYC9xdWl6emVzLyR7cXVpeklkfS9hdHRlbXB0cy9gLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBRdWl6XG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZVF1aXoocXVpeklkOiBhbnkpOiBPYnNlcnZhYmxlPFguRGVsZXRlUXVpelJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgICAgICAgLmRlbGV0ZTxYLkRlbGV0ZVF1aXpSZXNwb25zZT4oYC9xdWl6emVzLyR7cXVpeklkfWAsIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBRdWl6XG4gICAgICovXG4gICAgcHVibGljIHJlYWRRdWl6KHF1aXpJZDogYW55KTogRGF0YVN0YXRlPFguUmVhZFF1aXpSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguUmVhZFF1aXpSZXNwb25zZT4oYC9xdWl6emVzLyR7cXVpeklkfWAsIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgcmVhZFF1aXoyKHF1aXpJZDogYW55KTogT2JzZXJ2YWJsZTxYLlJlYWRRdWl6UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldDxYLlJlYWRRdWl6UmVzcG9uc2U+KGAvcXVpenplcy8ke3F1aXpJZH1gLCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgUXVpelxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVRdWl6KHF1aXpJZDogYW55LCBib2R5OiBYLlVwZGF0ZVF1aXpCb2R5KTogT2JzZXJ2YWJsZTxYLlVwZGF0ZVF1aXpSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgICAgICAgIC5wdXQ8WC5VcGRhdGVRdWl6UmVzcG9uc2U+KGAvcXVpenplcy8ke3F1aXpJZH1gLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxufSJdfQ==