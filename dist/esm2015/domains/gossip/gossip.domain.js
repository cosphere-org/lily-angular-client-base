/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Gossip Commands Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class GossipDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * Bulk Read all supported spoken languages
     */
    bulkReadSpeechLanguages() {
        return this.client.getDataState('/gossip/speech/languages/', { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadSpeechLanguages2() {
        return this.client.get('/gossip/speech/languages/', { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Bulk Read all supported voice languages
     */
    bulkReadTextLanguages() {
        return this.client.getDataState('/gossip/text/languages/', { responseMap: 'data', authorizationRequired: true });
    }
    bulkReadTextLanguages2() {
        return this.client.get('/gossip/text/languages/', { responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Detect spoken language
     */
    detectSpeechLanguages(body) {
        return this.client
            .post('/gossip/speech/detect_languages/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Detect written language
     */
    detectTextLanguages(body) {
        return this.client
            .post('/gossip/text/detect_languages/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
GossipDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GossipDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29zc2lwLmRvbWFpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjb3NwaGVyZS9jbGllbnQvIiwic291cmNlcyI6WyJkb21haW5zL2dvc3NpcC9nb3NzaXAuZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7SUFHSTtBQUVKOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTTlELE1BQU07SUFDRixZQUFvQixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUU3Qzs7T0FFRztJQUNJLHVCQUF1QjtRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQTRDLDJCQUEyQixFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xLLENBQUM7SUFFTSx3QkFBd0I7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUE0QywyQkFBMkIsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6SixDQUFDO0lBRUQ7O09BRUc7SUFDSSxxQkFBcUI7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUEwQyx5QkFBeUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5SixDQUFDO0lBRU0sc0JBQXNCO1FBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBMEMseUJBQXlCLEVBQUUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckosQ0FBQztJQUVEOztPQUVHO0lBQ0kscUJBQXFCLENBQUMsSUFBaUM7UUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ2IsSUFBSSxDQUFrQyxrQ0FBa0MsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUNoSCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQkFBbUIsQ0FBQyxJQUErQjtRQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQWdDLGdDQUFnQyxFQUFFLElBQUksRUFBRSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDO2FBQzVHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7OztZQTFDSixVQUFVOzs7O1lBTEYsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAqIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRCwgQUxMIE1BTlVBTCBDSEFOR0VTIENBTiBCRVxuICAqIE9WRVJXUklUVEVOXG4gICovXG5cbi8qKlxuICogR29zc2lwIENvbW1hbmRzIE1hbmFnZW1lbnQgRG9tYWluXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmltcG9ydCB7IENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGllbnQuaW50ZXJmYWNlJztcblxuaW1wb3J0ICogYXMgWCBmcm9tICcuL2dvc3NpcC5tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR29zc2lwRG9tYWluIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogQ2xpZW50U2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgUmVhZCBhbGwgc3VwcG9ydGVkIHNwb2tlbiBsYW5ndWFnZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVsa1JlYWRTcGVlY2hMYW5ndWFnZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRTcGVlY2hMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXREYXRhU3RhdGU8WC5CdWxrUmVhZFNwZWVjaExhbmd1YWdlc1Jlc3BvbnNlRW50aXR5W10+KCcvZ29zc2lwL3NwZWVjaC9sYW5ndWFnZXMvJywgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZFNwZWVjaExhbmd1YWdlczIoKTogT2JzZXJ2YWJsZTxYLkJ1bGtSZWFkU3BlZWNoTGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0PFguQnVsa1JlYWRTcGVlY2hMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPignL2dvc3NpcC9zcGVlY2gvbGFuZ3VhZ2VzLycsIHsgcmVzcG9uc2VNYXA6ICdkYXRhJywgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1bGsgUmVhZCBhbGwgc3VwcG9ydGVkIHZvaWNlIGxhbmd1YWdlc1xuICAgICAqL1xuICAgIHB1YmxpYyBidWxrUmVhZFRleHRMYW5ndWFnZXMoKTogRGF0YVN0YXRlPFguQnVsa1JlYWRUZXh0TGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0RGF0YVN0YXRlPFguQnVsa1JlYWRUZXh0TGFuZ3VhZ2VzUmVzcG9uc2VFbnRpdHlbXT4oJy9nb3NzaXAvdGV4dC9sYW5ndWFnZXMvJywgeyByZXNwb25zZU1hcDogJ2RhdGEnLCBhdXRob3JpemF0aW9uUmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBidWxrUmVhZFRleHRMYW5ndWFnZXMyKCk6IE9ic2VydmFibGU8WC5CdWxrUmVhZFRleHRMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQ8WC5CdWxrUmVhZFRleHRMYW5ndWFnZXNSZXNwb25zZUVudGl0eVtdPignL2dvc3NpcC90ZXh0L2xhbmd1YWdlcy8nLCB7IHJlc3BvbnNlTWFwOiAnZGF0YScsIGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3Qgc3Bva2VuIGxhbmd1YWdlXG4gICAgICovXG4gICAgcHVibGljIGRldGVjdFNwZWVjaExhbmd1YWdlcyhib2R5OiBYLkRldGVjdFNwZWVjaExhbmd1YWdlc0JvZHkpOiBPYnNlcnZhYmxlPFguRGV0ZWN0U3BlZWNoTGFuZ3VhZ2VzUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkRldGVjdFNwZWVjaExhbmd1YWdlc1Jlc3BvbnNlPignL2dvc3NpcC9zcGVlY2gvZGV0ZWN0X2xhbmd1YWdlcy8nLCBib2R5LCB7IGF1dGhvcml6YXRpb25SZXF1aXJlZDogdHJ1ZSB9KVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKHggPT4gIV8uaXNFbXB0eSh4KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVjdCB3cml0dGVuIGxhbmd1YWdlXG4gICAgICovXG4gICAgcHVibGljIGRldGVjdFRleHRMYW5ndWFnZXMoYm9keTogWC5EZXRlY3RUZXh0TGFuZ3VhZ2VzQm9keSk6IE9ic2VydmFibGU8WC5EZXRlY3RUZXh0TGFuZ3VhZ2VzUmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAgICAgICAucG9zdDxYLkRldGVjdFRleHRMYW5ndWFnZXNSZXNwb25zZT4oJy9nb3NzaXAvdGV4dC9kZXRlY3RfbGFuZ3VhZ2VzLycsIGJvZHksIHsgYXV0aG9yaXphdGlvblJlcXVpcmVkOiB0cnVlIH0pXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoeCA9PiAhXy5pc0VtcHR5KHgpKSk7XG4gICAgfVxuXG59Il19