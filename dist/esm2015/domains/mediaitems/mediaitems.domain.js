/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * MediaItems Management Domain
 */
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as _ from 'underscore';
import { ClientService } from '../../services/client.service';
export class MediaitemsDomain {
    constructor(client) {
        this.client = client;
    }
    /**
     * List MediaItems
     * -------------
     *
     * List MediaItems
     */
    bulkReadMediaitems(params) {
        return this.client.getDataState('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });
    }
    bulkReadMediaitems2(params) {
        return this.client.get('/mediaitems/', { params, responseMap: 'data', authorizationRequired: true });
    }
    /**
     * Remove MediaItem
     * -------------
     *
     * Remove MediaItem instance.
     */
    deleteMediaitem(mediaitemId, params) {
        return this.client
            .delete(`/mediaitems/${mediaitemId}`, { params, authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Read MediaItem
     * -------------
     *
     * Read MediaItem
     */
    readMediaitem(mediaitemId) {
        return this.client.getDataState(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });
    }
    readMediaitem2(mediaitemId) {
        return this.client.get(`/mediaitems/${mediaitemId}`, { authorizationRequired: true });
    }
    /**
     * Read By Process Id
     * -------------
     *
     * Read MediaItem by Process Id
     */
    readMediaitemByProcessId() {
        return this.client.getDataState('/mediaitems/by_process/(?P<process_id>[\w+\=]+)', { authorizationRequired: true });
    }
    readMediaitemByProcessId2() {
        return this.client.get('/mediaitems/by_process/(?P<process_id>[\w+\=]+)', { authorizationRequired: true });
    }
    /**
     * Read or Create MediaItem
     * -------------
     *
     * Read or Create MediaItem instance.
     */
    readOrCreateMediaitem(body) {
        return this.client
            .post('/mediaitems/', body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Update MediaItem
     * -------------
     *
     * Update MediaItem instance.
     */
    updateMediaitem(mediaitemId, body) {
        return this.client
            .put(`/mediaitems/${mediaitemId}`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
    /**
     * Update MediaItem Representation
     * -------------
     *
     * Update given MediaItem with only the fields which are decided externally (using external services). Fields like: - `web_representations` - `thumbnail_uri` - `meta` - `text` All of those fields are computed in smarter way in order to make the MediaItem way better in a semantic sense. Those fields are perceived as the `representation` of a given MediaItem since they contains information about how to display a given MediaItem, how to understand it etc. It goes beyond the simple abstract data oriented representation (uri, extension etc.).
     */
    updateMediaitemRepresentation(mediaitemId, body) {
        return this.client
            .put(`/mediaitems/${mediaitemId}/representation/`, body, { authorizationRequired: true })
            .pipe(filter(x => !_.isEmpty(x)));
    }
}
MediaitemsDomain.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MediaitemsDomain.ctorParameters = () => [
    { type: ClientService }
];

//# sourceMappingURL=data:application/json;base64,