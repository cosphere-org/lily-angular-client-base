/**
  * THIS FILE WAS AUTOGENERATED, ALL MANUAL CHANGES CAN BE
  * OVERWRITTEN
  */
/**
 * Facade API Service for all domains
 */
import { Injectable, Injector } from '@angular/core';
import * as X from '../domains/index';
export class APIService {
    constructor(injector) {
        this.injector = injector;
    }
    get account_settingsDomain() {
        if (!this._account_settingsDomain) {
            this._account_settingsDomain = this.injector.get(X.AccountSettingsDomain);
        }
        return this._account_settingsDomain;
    }
    readAccountsetting() {
        return this.account_settingsDomain.readAccountsetting();
    }
    readAccountsetting2() {
        return this.account_settingsDomain.readAccountsetting2();
    }
    updateAccountsetting(body) {
        return this.account_settingsDomain.updateAccountsetting(body);
    }
    get accountsDomain() {
        if (!this._accountsDomain) {
            this._accountsDomain = this.injector.get(X.AccountsDomain);
        }
        return this._accountsDomain;
    }
    activateAccount(body) {
        return this.accountsDomain.activateAccount(body);
    }
    bulkReadAccounts(params) {
        return this.accountsDomain.bulkReadAccounts(params);
    }
    bulkReadAccounts2(params) {
        return this.accountsDomain.bulkReadAccounts2(params);
    }
    changePassword(body) {
        return this.accountsDomain.changePassword(body);
    }
    createAccount(body) {
        return this.accountsDomain.createAccount(body);
    }
    readAccount() {
        return this.accountsDomain.readAccount();
    }
    readAccount2() {
        return this.accountsDomain.readAccount2();
    }
    resetPassword(body) {
        return this.accountsDomain.resetPassword(body);
    }
    sendAccountActivationEmail(body) {
        return this.accountsDomain.sendAccountActivationEmail(body);
    }
    sendResetPasswordEmail(body) {
        return this.accountsDomain.sendResetPasswordEmail(body);
    }
    updateAccount(body) {
        return this.accountsDomain.updateAccount(body);
    }
    get attempt_statsDomain() {
        if (!this._attempt_statsDomain) {
            this._attempt_statsDomain = this.injector.get(X.AttemptStatsDomain);
        }
        return this._attempt_statsDomain;
    }
    bulkReadAttemptstats(params) {
        return this.attempt_statsDomain.bulkReadAttemptstats(params);
    }
    bulkReadAttemptstats2(params) {
        return this.attempt_statsDomain.bulkReadAttemptstats2(params);
    }
    createAttemptstat(body) {
        return this.attempt_statsDomain.createAttemptstat(body);
    }
    createExternalAttemptStat(body) {
        return this.attempt_statsDomain.createExternalAttemptStat(body);
    }
    get attemptsDomain() {
        if (!this._attemptsDomain) {
            this._attemptsDomain = this.injector.get(X.AttemptsDomain);
        }
        return this._attemptsDomain;
    }
    bulkReadAttemptsByCards(cardId) {
        return this.attemptsDomain.bulkReadAttemptsByCards(cardId);
    }
    bulkReadAttemptsByCards2(cardId) {
        return this.attemptsDomain.bulkReadAttemptsByCards2(cardId);
    }
    createAttempt(body) {
        return this.attemptsDomain.createAttempt(body);
    }
    updateAttempt(attemptId, body) {
        return this.attemptsDomain.updateAttempt(attemptId, body);
    }
    get auth_tokensDomain() {
        if (!this._auth_tokensDomain) {
            this._auth_tokensDomain = this.injector.get(X.AuthTokensDomain);
        }
        return this._auth_tokensDomain;
    }
    authorizeAuthToken() {
        return this.auth_tokensDomain.authorizeAuthToken();
    }
    createAuthToken(body) {
        return this.auth_tokensDomain.createAuthToken(body);
    }
    createFacebookBasedAuthToken(body) {
        return this.auth_tokensDomain.createFacebookBasedAuthToken(body);
    }
    createFacebookBasedMobileAuthToken(body) {
        return this.auth_tokensDomain.createFacebookBasedMobileAuthToken(body);
    }
    createGoogleBasedAuthToken(body) {
        return this.auth_tokensDomain.createGoogleBasedAuthToken(body);
    }
    createGoogleBasedMobileAuthToken(body) {
        return this.auth_tokensDomain.createGoogleBasedMobileAuthToken(body);
    }
    updateAuthToken() {
        return this.auth_tokensDomain.updateAuthToken();
    }
    get cardsDomain() {
        if (!this._cardsDomain) {
            this._cardsDomain = this.injector.get(X.CardsDomain);
        }
        return this._cardsDomain;
    }
    bulkDeleteCards(params) {
        return this.cardsDomain.bulkDeleteCards(params);
    }
    bulkReadCards(params) {
        return this.cardsDomain.bulkReadCards(params);
    }
    bulkReadCards2(params) {
        return this.cardsDomain.bulkReadCards2(params);
    }
    createCard(body) {
        return this.cardsDomain.createCard(body);
    }
    readCard(cardId) {
        return this.cardsDomain.readCard(cardId);
    }
    readCard2(cardId, params) {
        return this.cardsDomain.readCard2(cardId, params);
    }
    bulkReadGeometriesOnly2(params) {
        return this.cardsDomain.bulkReadGeometriesOnly2(params);
    }
    updateCard(cardId, body) {
        return this.cardsDomain.updateCard(cardId, body);
    }
    get categoriesDomain() {
        if (!this._categoriesDomain) {
            this._categoriesDomain = this.injector.get(X.CategoriesDomain);
        }
        return this._categoriesDomain;
    }
    bulkReadCategories() {
        return this.categoriesDomain.bulkReadCategories();
    }
    bulkReadCategories2() {
        return this.categoriesDomain.bulkReadCategories2();
    }
    get contactsDomain() {
        if (!this._contactsDomain) {
            this._contactsDomain = this.injector.get(X.ContactsDomain);
        }
        return this._contactsDomain;
    }
    createAnonymousContactAttempt(body) {
        return this.contactsDomain.createAnonymousContactAttempt(body);
    }
    sendAuthenticatedContactMessage(body) {
        return this.contactsDomain.sendAuthenticatedContactMessage(body);
    }
    verifyAnonymousContactAttempt(body) {
        return this.contactsDomain.verifyAnonymousContactAttempt(body);
    }
    get donationsDomain() {
        if (!this._donationsDomain) {
            this._donationsDomain = this.injector.get(X.DonationsDomain);
        }
        return this._donationsDomain;
    }
    checkIfCanAttemptDonation(params) {
        return this.donationsDomain.checkIfCanAttemptDonation(params);
    }
    checkIfCanAttemptDonation2(params) {
        return this.donationsDomain.checkIfCanAttemptDonation2(params);
    }
    createAnonymousDonation(body) {
        return this.donationsDomain.createAnonymousDonation(body);
    }
    createDonation(body) {
        return this.donationsDomain.createDonation(body);
    }
    createDonationattempt(body) {
        return this.donationsDomain.createDonationattempt(body);
    }
    get external_appsDomain() {
        if (!this._external_appsDomain) {
            this._external_appsDomain = this.injector.get(X.ExternalAppsDomain);
        }
        return this._external_appsDomain;
    }
    authorizeExternalAppAuthToken() {
        return this.external_appsDomain.authorizeExternalAppAuthToken();
    }
    createExternalAppAuthToken(body) {
        return this.external_appsDomain.createExternalAppAuthToken(body);
    }
    readExternalappconf(params) {
        return this.external_appsDomain.readExternalappconf(params);
    }
    readExternalappconf2(params) {
        return this.external_appsDomain.readExternalappconf2(params);
    }
    get focus_recordsDomain() {
        if (!this._focus_recordsDomain) {
            this._focus_recordsDomain = this.injector.get(X.FocusRecordsDomain);
        }
        return this._focus_recordsDomain;
    }
    createFocusrecord(body) {
        return this.focus_recordsDomain.createFocusrecord(body);
    }
    readFocusRecordSummary() {
        return this.focus_recordsDomain.readFocusRecordSummary();
    }
    readFocusRecordSummary2() {
        return this.focus_recordsDomain.readFocusRecordSummary2();
    }
    get fragment_hashtagsDomain() {
        if (!this._fragment_hashtagsDomain) {
            this._fragment_hashtagsDomain = this.injector.get(X.FragmentHashtagsDomain);
        }
        return this._fragment_hashtagsDomain;
    }
    bulkReadFragmentHashtags(params) {
        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags(params);
    }
    bulkReadFragmentHashtags2(params) {
        return this.fragment_hashtagsDomain.bulkReadFragmentHashtags2(params);
    }
    bulkReadPublishedFragmentHashtags(params) {
        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags(params);
    }
    bulkReadPublishedFragmentHashtags2(params) {
        return this.fragment_hashtagsDomain.bulkReadPublishedFragmentHashtags2(params);
    }
    get fragment_wordsDomain() {
        if (!this._fragment_wordsDomain) {
            this._fragment_wordsDomain = this.injector.get(X.FragmentWordsDomain);
        }
        return this._fragment_wordsDomain;
    }
    bulkReadFragmentWords(params) {
        return this.fragment_wordsDomain.bulkReadFragmentWords(params);
    }
    bulkReadFragmentWords2(params) {
        return this.fragment_wordsDomain.bulkReadFragmentWords2(params);
    }
    bulkReadPublishedFragmentWords(params) {
        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords(params);
    }
    bulkReadPublishedFragmentWords2(params) {
        return this.fragment_wordsDomain.bulkReadPublishedFragmentWords2(params);
    }
    get fragmentsDomain() {
        if (!this._fragmentsDomain) {
            this._fragmentsDomain = this.injector.get(X.FragmentsDomain);
        }
        return this._fragmentsDomain;
    }
    bulkReadFragments(params) {
        return this.fragmentsDomain.bulkReadFragments(params);
    }
    bulkReadFragments2(params) {
        return this.fragmentsDomain.bulkReadFragments2(params);
    }
    bulkReadPublishedFragments(params) {
        return this.fragmentsDomain.bulkReadPublishedFragments(params);
    }
    bulkReadPublishedFragments2(params) {
        return this.fragmentsDomain.bulkReadPublishedFragments2(params);
    }
    createFragment() {
        return this.fragmentsDomain.createFragment();
    }
    deleteFragment(fragmentId) {
        return this.fragmentsDomain.deleteFragment(fragmentId);
    }
    mergeFragment(fragmentId) {
        return this.fragmentsDomain.mergeFragment(fragmentId);
    }
    publishFragment(fragmentId) {
        return this.fragmentsDomain.publishFragment(fragmentId);
    }
    readFragment(fragmentId) {
        return this.fragmentsDomain.readFragment(fragmentId);
    }
    readFragment2(fragmentId) {
        return this.fragmentsDomain.readFragment2(fragmentId);
    }
    readFragmentDiff(fragmentId) {
        return this.fragmentsDomain.readFragmentDiff(fragmentId);
    }
    readFragmentDiff2(fragmentId) {
        return this.fragmentsDomain.readFragmentDiff2(fragmentId);
    }
    readFragmentSample(fragmentId) {
        return this.fragmentsDomain.readFragmentSample(fragmentId);
    }
    readFragmentSample2(fragmentId) {
        return this.fragmentsDomain.readFragmentSample2(fragmentId);
    }
    updateFragment(fragmentId, body) {
        return this.fragmentsDomain.updateFragment(fragmentId, body);
    }
    get geometriesDomain() {
        if (!this._geometriesDomain) {
            this._geometriesDomain = this.injector.get(X.GeometriesDomain);
        }
        return this._geometriesDomain;
    }
    bulkReadGeometries(params) {
        return this.geometriesDomain.bulkReadGeometries(params);
    }
    bulkReadGeometries2(params) {
        return this.geometriesDomain.bulkReadGeometries2(params);
    }
    bulkUpdateGeometries(body) {
        return this.geometriesDomain.bulkUpdateGeometries(body);
    }
    readGeometryByCard(cardId) {
        return this.geometriesDomain.readGeometryByCard(cardId);
    }
    readGeometryByCard2(cardId) {
        return this.geometriesDomain.readGeometryByCard2(cardId);
    }
    readGraph(params) {
        return this.geometriesDomain.readGraph(params);
    }
    readGraph2(params) {
        return this.geometriesDomain.readGraph2(params);
    }
    get hashtagsDomain() {
        if (!this._hashtagsDomain) {
            this._hashtagsDomain = this.injector.get(X.HashtagsDomain);
        }
        return this._hashtagsDomain;
    }
    bulkReadHashtags(params) {
        return this.hashtagsDomain.bulkReadHashtags(params);
    }
    bulkReadHashtags2(params) {
        return this.hashtagsDomain.bulkReadHashtags2(params);
    }
    createHashtag(body) {
        return this.hashtagsDomain.createHashtag(body);
    }
    deleteHashtag(hashtagId, params) {
        return this.hashtagsDomain.deleteHashtag(hashtagId, params);
    }
    readHashtagsToc(params) {
        return this.hashtagsDomain.readHashtagsToc(params);
    }
    readHashtagsToc2(params) {
        return this.hashtagsDomain.readHashtagsToc2(params);
    }
    updateHashtag(hashtagId, body) {
        return this.hashtagsDomain.updateHashtag(hashtagId, body);
    }
    get internalDomain() {
        if (!this._internalDomain) {
            this._internalDomain = this.injector.get(X.InternalDomain);
        }
        return this._internalDomain;
    }
    deleteEntriesForUser(userId) {
        return this.internalDomain.deleteEntriesForUser(userId);
    }
    get invoicesDomain() {
        if (!this._invoicesDomain) {
            this._invoicesDomain = this.injector.get(X.InvoicesDomain);
        }
        return this._invoicesDomain;
    }
    bulkReadInvoices() {
        return this.invoicesDomain.bulkReadInvoices();
    }
    bulkReadInvoices2() {
        return this.invoicesDomain.bulkReadInvoices2();
    }
    calculateDebt() {
        return this.invoicesDomain.calculateDebt();
    }
    calculateDebt2() {
        return this.invoicesDomain.calculateDebt2();
    }
    get linksDomain() {
        if (!this._linksDomain) {
            this._linksDomain = this.injector.get(X.LinksDomain);
        }
        return this._linksDomain;
    }
    deleteLink(fromCardId, toCardId) {
        return this.linksDomain.deleteLink(fromCardId, toCardId);
    }
    readOrCreateLink(body) {
        return this.linksDomain.readOrCreateLink(body);
    }
    get mediaitemsDomain() {
        if (!this._mediaitemsDomain) {
            this._mediaitemsDomain = this.injector.get(X.MediaitemsDomain);
        }
        return this._mediaitemsDomain;
    }
    bulkReadMediaitems(params) {
        return this.mediaitemsDomain.bulkReadMediaitems(params);
    }
    bulkReadMediaitems2(params) {
        return this.mediaitemsDomain.bulkReadMediaitems2(params);
    }
    deleteMediaitem(mediaitemId, params) {
        return this.mediaitemsDomain.deleteMediaitem(mediaitemId, params);
    }
    readMediaitem(mediaitemId) {
        return this.mediaitemsDomain.readMediaitem(mediaitemId);
    }
    readMediaitem2(mediaitemId) {
        return this.mediaitemsDomain.readMediaitem2(mediaitemId);
    }
    readMediaitemByProcessId(processId) {
        return this.mediaitemsDomain.readMediaitemByProcessId(processId);
    }
    readMediaitemByProcessId2(processId) {
        return this.mediaitemsDomain.readMediaitemByProcessId2(processId);
    }
    readOrCreateMediaitem(body) {
        return this.mediaitemsDomain.readOrCreateMediaitem(body);
    }
    updateMediaitem(mediaitemId, body) {
        return this.mediaitemsDomain.updateMediaitem(mediaitemId, body);
    }
    updateMediaitemRepresentation(mediaitemId, body) {
        return this.mediaitemsDomain.updateMediaitemRepresentation(mediaitemId, body);
    }
    get notificationsDomain() {
        if (!this._notificationsDomain) {
            this._notificationsDomain = this.injector.get(X.NotificationsDomain);
        }
        return this._notificationsDomain;
    }
    acknowledgeNotification(notificationId) {
        return this.notificationsDomain.acknowledgeNotification(notificationId);
    }
    bulkReadNotifications(params) {
        return this.notificationsDomain.bulkReadNotifications(params);
    }
    bulkReadNotifications2(params) {
        return this.notificationsDomain.bulkReadNotifications2(params);
    }
    get pathsDomain() {
        if (!this._pathsDomain) {
            this._pathsDomain = this.injector.get(X.PathsDomain);
        }
        return this._pathsDomain;
    }
    bulkDeletePaths(params) {
        return this.pathsDomain.bulkDeletePaths(params);
    }
    bulkReadPaths(params) {
        return this.pathsDomain.bulkReadPaths(params);
    }
    bulkReadPaths2(params) {
        return this.pathsDomain.bulkReadPaths2(params);
    }
    createPath(body) {
        return this.pathsDomain.createPath(body);
    }
    readPath(pathId) {
        return this.pathsDomain.readPath(pathId);
    }
    readPath2(pathId) {
        return this.pathsDomain.readPath2(pathId);
    }
    updatePath(pathId, body) {
        return this.pathsDomain.updatePath(pathId, body);
    }
    get payment_cardsDomain() {
        if (!this._payment_cardsDomain) {
            this._payment_cardsDomain = this.injector.get(X.PaymentCardsDomain);
        }
        return this._payment_cardsDomain;
    }
    asDefaultMarkPaymentcard(paymentCardId) {
        return this.payment_cardsDomain.asDefaultMarkPaymentcard(paymentCardId);
    }
    bulkReadPaymentcards() {
        return this.payment_cardsDomain.bulkReadPaymentcards();
    }
    bulkReadPaymentcards2() {
        return this.payment_cardsDomain.bulkReadPaymentcards2();
    }
    createPaymentcard(body) {
        return this.payment_cardsDomain.createPaymentcard(body);
    }
    deletePaymentcard(paymentCardId) {
        return this.payment_cardsDomain.deletePaymentcard(paymentCardId);
    }
    payWithDefaultPaymentCard(body) {
        return this.payment_cardsDomain.payWithDefaultPaymentCard(body);
    }
    renderPaymentCardWidget() {
        return this.payment_cardsDomain.renderPaymentCardWidget();
    }
    renderPaymentCardWidget2() {
        return this.payment_cardsDomain.renderPaymentCardWidget2();
    }
    get paymentsDomain() {
        if (!this._paymentsDomain) {
            this._paymentsDomain = this.injector.get(X.PaymentsDomain);
        }
        return this._paymentsDomain;
    }
    updatePaymentStatus(body) {
        return this.paymentsDomain.updatePaymentStatus(body);
    }
    get recallDomain() {
        if (!this._recallDomain) {
            this._recallDomain = this.injector.get(X.RecallDomain);
        }
        return this._recallDomain;
    }
    createRecallSession(body) {
        return this.recallDomain.createRecallSession(body);
    }
    readRecallSummary() {
        return this.recallDomain.readRecallSummary();
    }
    readRecallSummary2() {
        return this.recallDomain.readRecallSummary2();
    }
    get subscriptionsDomain() {
        if (!this._subscriptionsDomain) {
            this._subscriptionsDomain = this.injector.get(X.SubscriptionsDomain);
        }
        return this._subscriptionsDomain;
    }
    changeSubscription(body) {
        return this.subscriptionsDomain.changeSubscription(body);
    }
    get tasksDomain() {
        if (!this._tasksDomain) {
            this._tasksDomain = this.injector.get(X.TasksDomain);
        }
        return this._tasksDomain;
    }
    bulkReadTasks(params) {
        return this.tasksDomain.bulkReadTasks(params);
    }
    bulkReadTasks2(params) {
        return this.tasksDomain.bulkReadTasks2(params);
    }
    bulkReadTaskBins(params) {
        return this.tasksDomain.bulkReadTaskBins(params);
    }
    bulkReadTaskBins2(params) {
        return this.tasksDomain.bulkReadTaskBins2(params);
    }
    get wordsDomain() {
        if (!this._wordsDomain) {
            this._wordsDomain = this.injector.get(X.WordsDomain);
        }
        return this._wordsDomain;
    }
    bulkReadWords(params) {
        return this.wordsDomain.bulkReadWords(params);
    }
    bulkReadWords2(params) {
        return this.wordsDomain.bulkReadWords2(params);
    }
}
APIService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
APIService.ctorParameters = () => [
    { type: Injector }
];

//# sourceMappingURL=data:application/json;base64,